<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>框架套路解算法</title>
      <link href="/hexo/2021/01/29/%E6%A1%86%E6%9E%B6%E5%A5%97%E8%B7%AF%E8%A7%A3%E7%AE%97%E6%B3%95/"/>
      <url>/hexo/2021/01/29/%E6%A1%86%E6%9E%B6%E5%A5%97%E8%B7%AF%E8%A7%A3%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章生成的文件夹名/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">参考地址：[git 无法添加文件夹下文件](https://www.cnblogs.com/howdop/p/5583342.html)</span><br></pre></td></tr></table></figure></div><h1 id="开篇词"><a href="#开篇词" class="headerlink" title="开篇词"></a>开篇词</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li><p><font color=red size=3><strong><em>可以量化的才叫目标</em></strong></font></p><div class="note primary flat"><p>比如说目标是进大厂，计划半年内刷 300 道题，那这可以反向拆分，每个月刷 50 道，工作日每天刷两道，休息日每天刷一道，再细化，每天几点到几点固定为刷题时间，期间屏蔽所有应用通知，专心做题思考；然后每天反省刷题计划是否达标，如果没达标，是为什么，怎么弥补。</p><p>这就是计算机的递归思维，自顶向下，逐步求精，反向求解。我们旧文写了很多动态规划相关的题目，基本都是先写自顶向下的递归解法，然后改写成自底向上的迭代解法，因为递归思路清晰嘛。</p><p><font color=blue size=3><strong><em>制定一个计划，而且必须有非常强的坚定意志以及耐心，能够扛得住诱惑经得起枯燥。。。</em></strong></font></p></div></li><li><p>两点：目标和明白</p></li></ol><p>以下摘抄自算法小抄：<br>不是说今天热血沸腾给自己制定计划，结果做着做着就被带偏了，真的明白应该是你每时每刻，每分每秒都明白目标是什么。<br>我指的被带偏不是说学着学着跑去刷抖音了，这种问题可以通过物理隔离等方法避免，我说的带偏是指方向跑偏。<br>比如说做英语阅读理解，见到一个不认识的词，就去查，这个过程中又见到十个不认识的词，然后又去查，结果一个小时过去了，查了不少单词，但是文章没读几句，题还没做。<br>你说他没学习，倒也认真学了，但是学着学着方向跑偏了，最后挂科了。<br>这就是没搞明白目标是啥，这种 DFS 查单词的事情，应该是背单词的时候去做，现在做阅读题呢，目标是快速理解文章内容，选出正确答案嘛。那么几个生僻词汇，影响你对全文内容的掌握吗？<br>说回学算法，每个人的自身处境不同，需求不同，就应该有不同的学习策略，就像背单词和做阅读两个场景采取两种策略一样。<br>经常有读者后台留言，让我写一些特别硬核特别难的内容，我都婉言拒绝了；还有的大佬抨击我把算法写成模板是在害人，我也就笑笑不说话。<br>因为我就很明白咱们讲的这些算法到底是个什么定位，无非就是个锻炼思维能力，准备笔试面试的工具。<br>需要笔试了，欢迎你来突击学习一下；不需要笔试的话，每天早上地铁上看看，做做思维早操，一天精神好，仅此而已。<br>大部分读者需要的就是这些，我们号的定位也就是这样。好比初高中的广播体操，就是让学生伸伸胳膊踢踢腿，有益身心健康；你非要说练习后空翻才叫体操，让学生课间练空翻，那估计得出人命了。<br>从个人的角度，学算法，也要时时刻刻「明白」自己想要的是啥。<br>如果目标就是从事算法相关的理论研究工作，去啃《算法导论》这种理论性很强的教材完全没问题，反正你还要在学术的路上走很多年，花上一两年打基础性价比挺高。<br>如果目标是找工作赚钱，那算法就起到个筛选作用，没必要啃大部头，我们号的风格就是你需要的。从各种算法的模板练起，配合历史文章边看边刷，总共可以刷掉将近两百题，国内大厂过算法关没什么问题。节约下来的时间，干点别的不香吗？<br>说实话我个人更倾向于后者，向钱看齐，那么算法只是个工具。有很多读者纠结于要不要打个竞赛刷个公开课之类的，我觉得大可不必，就好比你跑步，朝着终点直线冲刺最划算，非要跑 S 型秀个蛇皮走位，何苦呢？<br>人的精力真的是有限的，把每分每秒都压在刀刃上，才能更快达成目标不是么。<br>当然，不论选择什么，定好目标后都要仔细拆分，严格执行，这个就看个人的执行力了。<br>本文写了些方法论层面的东西，主要希望大家搞清楚自己学习的目标，制定自己的计划，有自己的思考。不要被乱七八糟的建议牵着鼻子走，今天查一个单词，明天查一个单词，结果到头来挂科了。</p><h1 id="学习算法和刷题的框架思维"><a href="#学习算法和刷题的框架思维" class="headerlink" title="学习算法和刷题的框架思维"></a>学习算法和刷题的框架思维</h1><h2 id="数据结构的存储方式"><a href="#数据结构的存储方式" class="headerlink" title="数据结构的存储方式"></a>数据结构的存储方式</h2><ol><li><p><font color=black size=3><strong><em>数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改</em></strong></font>。最基本的两种存储方式是数组和链表。</p></li><li><p><font color=red size=3><strong><em>数组</em></strong></font>：由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p></li><li><p><font color=red size=3><strong><em>链表</em></strong></font>：因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p></li></ol><h2 id="算法刷题指南"><a href="#算法刷题指南" class="headerlink" title="算法刷题指南"></a>算法刷题指南</h2><ol><li><font color=black size=3><strong><em>先刷二叉树</em></strong></font>：因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。<ul><li>对于一个理解二叉树的人来说，刷一道二叉树的题目花不了多长时间。那么如果你对刷题无从下手或者有畏惧心理，不妨从二叉树下手，前 10 道也许有点难受；结合框架再做 20 道，也许你就有点自己的理解了；刷完整个专题，再去做什么回溯动规分治专题，你就会发现<font color=red size=3><strong><em>只要涉及递归的问题，都是树的问题</em></strong></font>。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>数据结构的基本存储方式就是链式和顺序两种，基本操作就是增删查改，遍历方式无非迭代和递归。</li><li>刷算法题建议从「树」分类开始刷，结合框架思维，把这几十道题刷完，对于树结构的理解应该就到位了。这时候去看回溯、动规、分治等算法专题，对思路的理解可能会更加深刻一些。</li></ol><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><ol><li>算法 第4版</li></ol><h1 id="通用解题套路框架"><a href="#通用解题套路框架" class="headerlink" title="通用解题套路框架"></a>通用解题套路框架</h1><h2 id="动态规划解题套路框架"><a href="#动态规划解题套路框架" class="headerlink" title="动态规划解题套路框架"></a>动态规划解题套路框架</h2><h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><ol><li>动态规划问题的一般形式是求最值，列出<code>状态转移方程</code></li><li>求解动态规划的核心问题是穷举，一定会具备<code>最优子结构</code></li><li><code>存在重叠子问题</code>: 使用“备忘录”或“DP table”</li><li>三要素：重叠子问题，最优子结构，状态转移方程</li></ol><h3 id="套路框架"><a href="#套路框架" class="headerlink" title="套路框架"></a>套路框架</h3><ol><li><p>思维框架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义。</span><br></pre></td></tr></table></figure></li><li><p>通用框架代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 base case</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"># 进行状态转移</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><h4 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h4></li><li><p>暴力递归</p><ul><li><code>递归算法的时间复杂度等于用子问题个数乘以解决一个子问题需要的时间。</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span> || N == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(N - <span class="number">1</span>) + fib(N - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="1%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%80%92%E5%BD%92%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="斐波那契数列递归示意图"><div class="note primary flat"><p><font color=red size=3><strong><em>但凡遇到需要递归的问题，最好都画出递归树，对分析算法的复杂度，寻找算法低效的原因都有巨大帮助。</em></strong></font></p></div></li><li>可以发现，出现重复计算问题，即重叠子问题</li></ul></li><li><p>带备忘录的递归解法</p><ul><li>一般使用一个数组充当这个「备忘录」，可以使用哈希表（字典），思想都是一样的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 备忘录全初始化为 0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">memo</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 进行带备忘录的递归</span></span><br><span class="line">    <span class="keyword">return</span> helper(memo, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; memo, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 已经计算过</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = helper(memo, n - <span class="number">1</span>) + helper(memo, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2%E3%80%81%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%E5%BD%95%E8%A7%A3%E5%86%B3%E9%87%8D%E5%8F%A0%E5%AD%90%E9%97%AE%E9%A2%98.png" alt="使用备忘录解决重叠子问题"><br><img src="3%E3%80%81%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%B1%82%E8%A7%A3%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97.png" alt="自顶向下求解斐波那契数列"></li><li>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) … f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</li><li>带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</li></ul></li><li><p>dp 数组的迭代解法</p><ul><li>将备忘录可以进一步独立为一张表：DP table,从而实现自底向上<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span> || N == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; i++)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="4%E3%80%81DPTable%E6%B1%82%E8%A7%A3.png" alt="DPTable求解"></li></ul></li></ol><h5 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h5><ol><li><p>描述问题结构的数学形式：<br><img src="5%E3%80%81%E8%BD%AC%E7%A7%BB%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E9%80%9A%E7%94%A8%E5%85%AC%E5%BC%8F.png" alt="转移状态方程通用公式"></p><ul><li>把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移</li></ul></li><li><p>上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。而且很容易发现，其实状态转移方程直接代表着暴力解法。<br><font color=red size=3><strong><em>千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程。</em></strong></font>只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p></li></ol><h5 id="斐波那契数列细节优化"><a href="#斐波那契数列细节优化" class="headerlink" title="斐波那契数列细节优化"></a>斐波那契数列细节优化</h5><ul><li>根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以上优化的技巧叫<code>状态压缩</code>。如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 n 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从 O(n^2) 压缩到 O(n)。</li></ul><h4 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h4><ol><li><p>题目<br>给你 k 种面值的硬币，面值分别为 c1, c2 … ck，每种硬币的数量无限，再给一个总金额 amount，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，算法返回 -1 。算法的函数签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// coins 中是可选硬币面值，amount 是目标金额</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>;</span><br></pre></td></tr></table></figure><p>比如说 k = 3，面值分别为 1，2，5，总金额 amount = 11。那么最少需要 3 枚硬币凑出，即 11 = 5 + 5 + 1。</p></li><li><p>暴力递归</p><ul><li>这个问题是动态规划问题，因为它具有「最优子结构」的。<code>要符合「最优子结构」，子问题间必须互相独立</code>。</li><li>什么是相互独立：假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。<br>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</li><li><font color=red size=3><strong><em>如何列出正确的状态转移方程</em></strong></font>？<ul><li><code>确定 base case</code>，这个很简单，显然目标金额 amount 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。</li><li><code>确定「状态」，也就是原问题和子问题中会变化的变量。</code>由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 amount。</li><li><code>确定「选择」，也就是导致「状态」产生变化的行为。</code>目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。所以说所有硬币的面值，就是你的「选择」。</li><li><code>明确 dp 函数/数组的定义。</code>我们这里讲的是自顶向下的解法，所以会有一个递归的 dp 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 dp 函数：<br>dp(n) 的定义：输入一个目标金额 n，返回凑出目标金额 n 的最少硬币数量。<br>搞清楚上面这几个关键点，解法的伪码就可以写出来了：</li></ul></li></ul></li></ol><p><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"></p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 算法框架套路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本学习</title>
      <link href="/hexo/2021/01/07/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/hexo/2021/01/07/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="getopt命令解析shell脚本的命令行选项"><a href="#getopt命令解析shell脚本的命令行选项" class="headerlink" title="getopt命令解析shell脚本的命令行选项"></a>getopt命令解析shell脚本的命令行选项</h1><p>参考地址：<a href="https://blog.csdn.net/sofia1217/article/details/52244582">使用getopt命令解析shell脚本的命令行选项</a></p><ul><li>getopt可以解析短选项和长选项，附上自己使用的一个例子<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-o或--options选项后面接可接受的短选项，如ab:c::，表示可接受的短选项为-a -b -c，其中-a选项不接参数，-b选项后必须接参数，-c选项的参数为可选的</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-l或--long选项后面接可接受的长选项，用逗号分开，冒号的意义同短选项。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-n选项后接选项解析错误时提示的脚本名字</span></span><br><span class="line">parameters=`getopt -o t::j::d::z::i:: --long JSONConf::,jsonconf::,taskname::,taskName::,jsrq::,dqbm::,zzbm::,inmode::,activeProfile::,activeprofile:: -n &quot;$0&quot; -- &quot;$@&quot;`</span><br><span class="line">[ $? -ne 0 ] &amp;&amp; &#123; echo &quot;Try &#x27;$0 --help&#x27; for more information.&quot;; exit 1; &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">将规范化后的命令行参数分配至位置参数（<span class="variable">$1</span>,<span class="variable">$2</span>,...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;规范化命令行&quot;</span><span class="variable">$parameters</span></span></span><br><span class="line">eval set -- &quot;$&#123;parameters&#125;&quot;</span><br><span class="line">while true;do</span><br><span class="line">    case &quot;$1&quot; in</span><br><span class="line">        --JSONConf|--jsonconf) case &quot;$2&quot; in &quot;&quot;) jsonconf=&quot;&quot;;shift 2 ;; *) jsonconf=&quot;--JSONConf=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --taskname|--taskName) case &quot;$2&quot; in &quot;&quot;) taskname=&quot;&quot;;shift 2 ;; *) taskname=&quot;--taskName=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --jsrq) case &quot;$2&quot; in &quot;&quot;) jsrq=&quot;&quot;; shift 2 ;; *) jsrq=&quot;--jsrq=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --dqbm) case &quot;$2&quot; in &quot;&quot;) dqbm=&quot;&quot;; shift 2 ;; *) dqbm=&quot;--dqbm=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --zzbm) case &quot;$2&quot; in &quot;&quot;) zzbm=&quot;&quot;; shift 2 ;; *) zzbm=&quot;--zzbm=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --inmode) case &quot;$2&quot; in &quot;&quot;) inmode=&quot;&quot;; shift 2 ;; *) inmode=&quot;--inmode=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --activeProfile|--activeprofile) case &quot;$2&quot; in &quot;&quot;) inmode=&quot;&quot;; shift 2 ;; *) activeProfile=&quot;--bigdata.profiles.active=$2&quot;; shift 2 ;; esac ;;</span><br><span class="line">        --)</span><br><span class="line">           shift</span><br><span class="line">           break ;;</span><br><span class="line">        *) echo &quot;Internal error!&quot;;exit 1;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;JSONConf: &quot;$jsonconf</span><br><span class="line">echo &quot;taskname: &quot;$taskname</span><br><span class="line">echo &quot;jsrq: &quot;$jsrq</span><br><span class="line">echo &quot;dqbm: &quot;$dqbm</span><br><span class="line">echo &quot;zzbm: &quot;$zzbm</span><br><span class="line">echo &quot;inmode: &quot;$inmode</span><br><span class="line">echo &quot;activeProfiles: &quot;$activeProfile</span><br></pre></td></tr></table></figure><h1 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h1>参考地址：<a href="https://blog.csdn.net/u010003835/article/details/80750003">Shell_Linux Shell 中实现字符串切割的几种方法</a></li></ul><h2 id="利用shell中变量的字符串替换"><a href="#利用shell中变量的字符串替换" class="headerlink" title="利用shell中变量的字符串替换"></a>利用shell中变量的字符串替换</h2><ol><li><p>原理：${parameter//pattern/string} </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">string=&quot;hello,shell,split,test&quot;  </span><br><span class="line">array=($&#123;string//,/ &#125;)  </span><br><span class="line"> </span><br><span class="line">for var in $&#123;array[@]&#125;</span><br><span class="line">do</span><br><span class="line">   echo $var</span><br><span class="line">done </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">hello</span><br><span class="line">shell</span><br><span class="line">split</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h2 id="设置分隔符通过IFS变量"><a href="#设置分隔符通过IFS变量" class="headerlink" title="设置分隔符通过IFS变量"></a>设置分隔符通过IFS变量</h2></li><li><p>IFS介绍</p><ul><li><p>Shell 的环境变量分为 set, env 两种，其中 set 变量可以通过 export 工具导入到 env 变量中。其中，set 是显示设置shell变量，仅在本 shell<br>中有效；env是显示设置用户环境变量 ，仅在当前会话中有效。换句话说，set 变量里包含了 env 变量，但 set 变量不一定都是 env变量。这两种变量不同之处在于变量的作用域不同。显然，env 变量的作用域要大些，它可以在 subshell 中使用。</p></li><li><p>而 IFS 是一种 set 变量，当 shell 处理”命令替换”和”参数替换”时，shell 根据 IFS 的值，默认是 space, tab, newline来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。</p></li></ul></li><li><p>自定义IFS变量, 改变分隔符, 对字符串进行切分</p><ul><li>查看变量IFS的值<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$IFS</span></span>  </span><br><span class="line">  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$IFS</span>&quot;</span> | od -b</span>  </span><br><span class="line">0000000 040 011 012 012  </span><br><span class="line">0000004  </span><br></pre></td></tr></table></figure></li><li>直接输出IFS是看不到的，把它转化为二进制就可以看到了，”040”是空格，”011”是Tab，”012”是换行符”\n” 。最后一个 012 是因为 echo 默认是会换行的。</li></ul></li><li><p>改变IFS变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">string=&quot;hello,shell,split,test&quot;  </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">对IFS变量 进行替换处理</span></span><br><span class="line">OLD_IFS=&quot;$IFS&quot;</span><br><span class="line">IFS=&quot;,&quot;</span><br><span class="line">array=($string)</span><br><span class="line">IFS=&quot;$OLD_IFS&quot;</span><br><span class="line"> </span><br><span class="line">for var in $&#123;array[@]&#125;</span><br><span class="line">do</span><br><span class="line">   echo $var</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">hello</span><br><span class="line">shell</span><br><span class="line">split</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h2 id="利用tr指令实现字符替换（！只能针对单个分隔符）"><a href="#利用tr指令实现字符替换（！只能针对单个分隔符）" class="headerlink" title="利用tr指令实现字符替换（！只能针对单个分隔符）"></a>利用tr指令实现字符替换（！只能针对单个分隔符）</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3></li><li><p>tr命令可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。</p></li><li><p>tr(选项)(参数)</p><ul><li>选项<ul><li>-c或–complerment：取代所有不属于第一字符集的字符；</li><li>-d或–delete：删除所有属于第一字符集的字符；</li><li>-s或–squeeze-repeats：把连续重复的字符以单独一个字符表示；</li><li>-t或–truncate-set1：先删除第一字符集较第二字符集多出的字符。</li></ul></li><li>参数<ul><li>字符集1：指定要转换或删除的原字符集。当执行转换操作时，必须使用参数“字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数“字符集2”；</li><li>字符集2：指定要转换成的目标字符集。</li></ul></li></ul></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">string=&quot;hello,shell,split,test&quot;  </span><br><span class="line">array=(`echo $string | tr &#x27;,&#x27; &#x27; &#x27;` )  </span><br><span class="line"> </span><br><span class="line">for var in $&#123;array[@]&#125;</span><br><span class="line">do</span><br><span class="line">   echo $var</span><br><span class="line">done </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">hello</span><br><span class="line">shell</span><br><span class="line">split</span><br><span class="line">test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux问题集锦</title>
      <link href="/hexo/2020/12/28/Linux%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/hexo/2020/12/28/Linux%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="Xshell连接虚拟机慢"><a href="#Xshell连接虚拟机慢" class="headerlink" title="Xshell连接虚拟机慢"></a>Xshell连接虚拟机慢</h1><ul><li>参考地址：<a href="http://blog.51cto.com/13566681/2071670">Xshell 连接虚拟机慢 解决方案</a><br>原来是ssh的服务端在连接时会自动检测dns环境是否一致导致的，修改为不检测即可，操作如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改文件：/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">GSSAPIAuthentication  no  #---&gt;把注释打开，改为no</span><br><span class="line"></span><br><span class="line">UseDNS no  #---&gt;把注释打开，改为no，然后重启ssh服务即可</span><br><span class="line"></span><br><span class="line">重启ssh服务：service sshd restart</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的Linux命令集</title>
      <link href="/hexo/2020/12/13/%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
      <url>/hexo/2020/12/13/%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="CentOS-yum源"><a href="#CentOS-yum源" class="headerlink" title="CentOS yum源"></a>CentOS yum源</h1><h2 id="yum安装常用软件"><a href="#yum安装常用软件" class="headerlink" title="yum安装常用软件"></a>yum安装常用软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装sz、rz</span></span><br><span class="line">yum install -y lrzsz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装网络工具netcat，可以使用测试:nc -lk</span></span><br><span class="line">yum install -y nc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装ifconfig</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看ifconfig是否已安装</span></span><br><span class="line">[root@hadoop101 ~]# ls /sbin/ifconfig</span><br><span class="line">ls: 无法访问/sbin/ifconfig: 没有那个文件或目录</span><br><span class="line"><span class="meta">#</span><span class="bash">查看ifconfig匹配的包</span></span><br><span class="line">[root@hadoop101 ~]# yum search ifconfig</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">============================================================== 匹配：ifconfig ==============================================================</span><br><span class="line">net-tools.x86_64 : Basic networking tools</span><br><span class="line"><span class="meta">#</span><span class="bash">安装net-tools工具包</span></span><br><span class="line">[root@hadoop101 ~]# yum install net-tools.x86_64 -y</span><br></pre></td></tr></table></figure><h1 id="解压-压缩"><a href="#解压-压缩" class="headerlink" title="解压/压缩"></a>解压/压缩</h1><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>tar[必要参数][选择参数][文件] </p><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的 </p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">必要参数有如下：</span><br><span class="line"></span><br><span class="line">-A 新增压缩文件到已存在的压缩</span><br><span class="line"></span><br><span class="line">-B 设置区块大小</span><br><span class="line"></span><br><span class="line">-c 建立新的压缩文件</span><br><span class="line"></span><br><span class="line">-d 记录文件的差别</span><br><span class="line"></span><br><span class="line">-r 添加文件到已经压缩的文件</span><br><span class="line"></span><br><span class="line">-u 添加改变了和现有的文件到已经存在的压缩文件</span><br><span class="line"></span><br><span class="line">-x 从压缩的文件中提取文件</span><br><span class="line"></span><br><span class="line">-t 显示压缩文件的内容</span><br><span class="line"></span><br><span class="line">-z 支持gzip解压文件</span><br><span class="line"></span><br><span class="line">-j 支持bzip2解压文件</span><br><span class="line"></span><br><span class="line">-Z 支持compress解压文件</span><br><span class="line"></span><br><span class="line">-v 显示操作过程</span><br><span class="line"></span><br><span class="line">-l 文件系统边界设置</span><br><span class="line"></span><br><span class="line">-k 保留原有文件不覆盖</span><br><span class="line"></span><br><span class="line">-m 保留文件不被覆盖</span><br><span class="line"></span><br><span class="line">-W 确认压缩文件的正确性</span><br><span class="line"></span><br><span class="line">可选参数如下：</span><br><span class="line"></span><br><span class="line">-b 设置区块数目</span><br><span class="line"></span><br><span class="line">-C 切换到指定目录【解压到指定目录】</span><br><span class="line"></span><br><span class="line">-f 指定压缩文件</span><br><span class="line"></span><br><span class="line">--help 显示帮助信息</span><br><span class="line"></span><br><span class="line">--version 显示版本信息</span><br></pre></td></tr></table></figure><h3 id="常见解压-压缩命令"><a href="#常见解压-压缩命令" class="headerlink" title="常见解压/压缩命令"></a>常见解压/压缩命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">tar </span><br><span class="line">解包：tar xvf FileName.tar</span><br><span class="line">打包：tar cvf FileName.tar DirName</span><br><span class="line"></span><br><span class="line">（注：tar是打包，不是压缩！）</span><br><span class="line"></span><br><span class="line">.gz</span><br><span class="line">解压1：gunzip FileName.gz</span><br><span class="line">解压2：gzip -d FileName.gz</span><br><span class="line">压缩：gzip FileName</span><br><span class="line"></span><br><span class="line">.tar.gz 和 .tgz</span><br><span class="line">解压：tar zxvf FileName.tar.gz</span><br><span class="line">压缩：tar zcvf FileName.tar.gz DirName</span><br><span class="line">.bz2</span><br><span class="line">解压1：bzip2 -d FileName.bz2</span><br><span class="line">解压2：bunzip2 FileName.bz2</span><br><span class="line">压缩： bzip2 -z FileName</span><br><span class="line"></span><br><span class="line">.tar.bz2</span><br><span class="line">解压：tar jxvf FileName.tar.bz2</span><br><span class="line">压缩：tar jcvf FileName.tar.bz2 DirName</span><br><span class="line">.bz</span><br><span class="line">解压1：bzip2 -d FileName.bz</span><br><span class="line">解压2：bunzip2 FileName.bz</span><br><span class="line">压缩：未知</span><br><span class="line"></span><br><span class="line">.tar.bz</span><br><span class="line">解压：tar jxvf FileName.tar.bz</span><br><span class="line">压缩：未知</span><br><span class="line">.Z</span><br><span class="line">解压：uncompress FileName.Z</span><br><span class="line">压缩：compress FileName</span><br><span class="line"></span><br><span class="line">.tar.Z</span><br><span class="line">解压：tar Zxvf FileName.tar.Z</span><br><span class="line">压缩：tar Zcvf FileName.tar.Z DirName</span><br><span class="line"></span><br><span class="line">.zip</span><br><span class="line"><span class="meta">#</span><span class="bash">将FileName.zip解压到指定目录/home/html/下</span></span><br><span class="line">解压：unzip -d /home/html/ FileName.zip</span><br><span class="line"><span class="meta">#</span><span class="bash">将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip：</span></span><br><span class="line">压缩：zip -q -r html.zip /home/html/</span><br><span class="line">.rar</span><br><span class="line">解压：rar x FileName.rar</span><br><span class="line">压缩：rar a FileName.rar DirName </span><br></pre></td></tr></table></figure><h1 id="shell使用技巧"><a href="#shell使用技巧" class="headerlink" title="shell使用技巧"></a>shell使用技巧</h1><h2 id="vim中执行shell命令"><a href="#vim中执行shell命令" class="headerlink" title="vim中执行shell命令"></a>vim中执行shell命令</h2><ol><li><p>:!command : 不退出vim，并执行shell命令command，将命令输出显示在vim的命令区域，不会改变当前编辑的文件的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!ls -l</span><br></pre></td></tr></table></figure><h2 id="vim-删除指定行"><a href="#vim-删除指定行" class="headerlink" title="vim 删除指定行"></a>vim 删除指定行</h2></li><li><p>删除第10行到第20行的内容：先用20G转到第20行，然后使用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:9,.d</span><br></pre></td></tr></table></figure></li><li><p>删除所有内容：先用G 转到文件尾，然后使用下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,.d</span><br></pre></td></tr></table></figure></li><li><p>关于删除的一些说明：</p><ul><li>在vi中，”.”表示当前行，“1,.”表示从第一行到当前行，“d ” 表示删除。</li><li>如果只是想删除某一行，那么把光标指到该行，然后输入dd 即可。</li></ul></li><li><p>设置行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set number</span><br></pre></td></tr></table></figure></li></ol><h1 id="命令行下的文本操作"><a href="#命令行下的文本操作" class="headerlink" title="命令行下的文本操作"></a>命令行下的文本操作</h1><h2 id="去掉首行"><a href="#去掉首行" class="headerlink" title="去掉首行"></a>去掉首行</h2><ol><li>sed命令<ul><li>-i : 直接在文件上编辑 （edit files in place）</li><li>-e[默认选项]：只在命令行输出，而文件不改变<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除首行</span></span><br><span class="line">sed -i &#x27;1d&#x27; filename</span><br><span class="line"><span class="meta">#</span><span class="bash">删除特定行号</span></span><br><span class="line">sed -i &#x27;Nd&#x27; filename</span><br></pre></td></tr></table></figure><h1 id="Linux命令操作-杂"><a href="#Linux命令操作-杂" class="headerlink" title="Linux命令操作(杂)"></a>Linux命令操作(杂)</h1><h2 id="查询某个文件夹下的文件数量"><a href="#查询某个文件夹下的文件数量" class="headerlink" title="查询某个文件夹下的文件数量"></a>查询某个文件夹下的文件数量</h2></li></ul></li><li>查看当前目录下的文件数量（不包含子目录中的文件）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l|grep &quot;^-&quot;| wc -l</span><br></pre></td></tr></table></figure></li><li>查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR|grep &quot;^-&quot;| wc -l</span><br></pre></td></tr></table></figure></li><li>查看当前目录下的文件夹目录个数（不包含子目录中的目录），同上述理，如果需要查看子目录的，加上R<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l|grep &quot;^d&quot;| wc -l</span><br></pre></td></tr></table></figure></li><li>查询当前路径下的指定前缀名的目录下的所有文件数量<ul><li>例如：统计所有以“20161124”开头的目录下的全部文件数量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR 20161124*/|grep &quot;^-&quot;| wc -l</span><br></pre></td></tr></table></figure></li></ul></li><li>对每个命令参数做一下说明备注：<ul><li>ls -lR： 该命令表示以长列表输出指定目录下的信息（未指定则表示当前目录），R代表子目录中的“文件”，这个“文件”指的是目录、链接、设备文件等的总称</li><li>grep “^d”表示目录，”^-“表示文件</li><li>wc -l： 表示统计输出信息的行数，因为经过前面的过滤已经只剩下普通文件，一个目录或文件对应一行，所以统计的信息的行数也就是目录或文件的个数</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink入门学习</title>
      <link href="/hexo/2020/12/13/Flink%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/hexo/2020/12/13/Flink%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章生成的文件夹名/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">参考地址：[git 无法添加文件夹下文件](https://www.cnblogs.com/howdop/p/5583342.html)</span><br></pre></td></tr></table></figure></div><h1 id="Flink简介"><a href="#Flink简介" class="headerlink" title="Flink简介"></a>Flink简介</h1><h2 id="大数据框架的发展历程"><a href="#大数据框架的发展历程" class="headerlink" title="大数据框架的发展历程"></a>大数据框架的发展历程</h2><p><img src="1%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png" alt="大数据框架的发展历程"></p><ul><li>Flink已经是一个实时计算框架，而spark中的spark Streaming其实还是一个伪实时的计算框架【处理数据一般在500ms以内,开窗口最小的窗口也需要500ms】，属于微批处理。</li></ul><h2 id="初识Flink"><a href="#初识Flink" class="headerlink" title="初识Flink"></a>初识Flink</h2><ol><li>Flink项目的理念是：“<font color=red size=3><strong>Apache Flink是为分布式、高性能、随时可用以及准确的流处理应用程序打造的开源流处理框架</strong></font>”。</li><li>Apache Flink是一个框架和分布式处理引擎，用于对<font color=red size=3><strong>无界和有界数据流</strong></font>进行有<font color=red size=3><strong>状态</strong></font>计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</li></ol><h3 id="选择Flink的理由"><a href="#选择Flink的理由" class="headerlink" title="选择Flink的理由"></a>选择Flink的理由</h3><ol><li>流数据更真实地反映了我们的生活方式</li><li>传统的数据架构是基于有限数据集的</li><li>我们的目标</li></ol><ul><li>低延迟【spark stream的延迟是秒级，Flink延迟是毫秒级】</li><li>高吞吐【阿里每秒钟使用Flink处理4.6PB，双十一大屏】</li><li>结果的准确性和良好的容错性【exactly-once】</li></ul><h3 id="哪些行业需要处理流数据"><a href="#哪些行业需要处理流数据" class="headerlink" title="哪些行业需要处理流数据"></a>哪些行业需要处理流数据</h3><div class="note primary flat"><p>基本全部行业都需要流处理数据</p></div><ol><li>电商和市场营销<ul><li>数据报表、广告投放、业务流程需要</li></ul></li><li>物联网（IOT）<ul><li>传感器实时数据采集和显示、实时报警，交通运输业</li></ul></li><li>电信业<ul><li>基站流量调配</li></ul></li><li>银行和金融业<ul><li>实时结算和通知推送，实时检测异常行为</li></ul></li></ol><h2 id="Flink的重要特点"><a href="#Flink的重要特点" class="headerlink" title="Flink的重要特点"></a>Flink的重要特点</h2><h3 id="事件驱动型-Event-driven"><a href="#事件驱动型-Event-driven" class="headerlink" title="事件驱动型(Event-driven)"></a>事件驱动型(Event-driven)</h3><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。</p><ul><li>与之不同的就是SparkStreaming微批次，如图：<br><img src="2%E3%80%81SparkStreaming%E5%BE%AE%E6%89%B9%E6%AC%A1.png" alt="SparkStreaming微批次"></li><li>事件驱动型：<br><img src="3%E3%80%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%9E%8B.png" alt="事件驱动型"></li></ul><h3 id="流与批的世界观"><a href="#流与批的世界观" class="headerlink" title="流与批的世界观"></a>流与批的世界观</h3><ol><li><strong><em>批处理</em></strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</li><li><strong><em>流处理</em></strong>的特点是无界、实时,  无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。<ul><li>在<strong>spark</strong> 的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</li><li>而在<strong>flink</strong> 的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</li></ul></li><li><strong><em>无界数据流</em></strong>：无界数据流有一个开始但是没有结束，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。</li><li><strong><em>有界数据流</em></strong>：有界数据流有明确定义的开始和结束，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。<br><img src="4%E3%80%81%E6%9C%89%E7%95%8C%E5%92%8C%E6%97%A0%E7%95%8C%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="有界和无界数据流"><br><font color=red size=3><strong>这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</strong></font></li></ol><h3 id="分层api"><a href="#分层api" class="headerlink" title="分层api"></a>分层api</h3><p><img src="5%E3%80%81%E5%88%86%E5%B1%82API.png" alt="分层API"></p><ol><li>最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</li><li>实际上，大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。</li><li>Table API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何。</li><li>尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。</li><li>你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用。</li><li>Flink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。</li><li>目前Flink作为批处理还不是主流，不如Spark成熟，所以DataSet使用的并不是很多。Flink Table API和Flink SQL也并不完善，大多都由各大厂商自己定制。所以我们主要学习DataStream API的使用。实际上Flink作为最接近Google DataFlow模型的实现，是流批统一的观点，所以基本上使用DataStream就可以了。</li><li>Flink几大模块<ul><li>Flink Table &amp; SQL(还没开发完)</li><li>Flink Gelly(图计算)</li><li>Flink CEP(复杂事件处理)</li></ul></li></ol><h3 id="Flink的其他特点"><a href="#Flink的其他特点" class="headerlink" title="Flink的其他特点"></a>Flink的其他特点</h3><ol><li>支持事件时间（event-time）和处理时间（processing-time）语义</li><li>精确一次（exactly-once）的状态一致性保证</li><li>低延迟，每秒处理数百万个事件，毫秒级延迟</li><li>与众多常用存储系统的连接</li><li>高可用，动态扩展，实现7*24小时全天候运行</li></ol><h1 id="wordCount程序"><a href="#wordCount程序" class="headerlink" title="wordCount程序"></a>wordCount程序</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><ol><li>通过nc命令产生测试数据，flink监听端口，开启一个5s的滚动窗口，5s内统计一次wordcount</li></ol><h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><div class="note info flat"><p>本项目使用的Flink版本为最新版本，也就是1.11.0。现在提供maven项目的配置文件。</p></div><ol><li>使用Intellij IDEA创建一个Maven新项目</li><li>勾选<code>Create from archetype</code>，然后点击<code>Add Archetype</code>按钮</li><li><code>GroupId</code>中输入<code>org.apache.flink</code>，<code>ArtifactId</code>中输入<code>flink-quickstart-scala</code>，<code>Version</code>中输入<code>1.11.0</code>，然后点击<code>OK</code></li><li>点击向右箭头，出现下拉列表，选中<code>flink-quickstart-scala:1.11.0</code>，点击<code>Next</code></li><li><code>Name</code>中输入<code>FlinkTutorial</code>，<code>GroupId</code>中输入<code>com.caixianquan</code>，<code>ArtifactId</code>中输入<code>FlinkTutorial</code>，点击<code>Next</code></li><li>最好使用IDEA默认的Maven工具：Bundled（Maven 3），点击<code>Finish</code>，等待一会儿，项目就创建好了</li><li>新建一个scala文件：WordCount<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.caixianquan</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一些隐式类型转换，implicit</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WordWithCount</span>(<span class="params">word: <span class="type">String</span>, count: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">def</span> <span class="title">main</span>(<span class="params">args: <span class="type">Array</span>[<span class="type">String</span>]</span>)</span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//获取运行时环境，类似SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    <span class="comment">//设置分区（并行任务）的数量为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立数据源</span></span><br><span class="line">    <span class="comment">//需要先启动`nc -lk 9999`, 用来发送数据</span></span><br><span class="line">    <span class="keyword">val</span> stream = env.socketTextStream(<span class="string">&quot;hadoop101&quot;</span>, <span class="number">9999</span>, &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写对流的转换处理逻辑</span></span><br><span class="line">    <span class="keyword">val</span> transformed = stream</span><br><span class="line">    <span class="comment">//使用空格切分输入的字符串</span></span><br><span class="line">      .flatMap(line=&gt; line.split(<span class="string">&quot;\\s&quot;</span>))</span><br><span class="line">      <span class="comment">//类似于MR中的map</span></span><br><span class="line">      .map(w =&gt; <span class="type">WordWithCount</span>(w, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">//使用word字段进行分组， shuffle</span></span><br><span class="line">      .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">    <span class="comment">//开了一个5s钟的滚动窗口</span></span><br><span class="line">      .timeWindow(<span class="type">Time</span>.seconds(<span class="number">5</span>))</span><br><span class="line">      .sum(<span class="string">&quot;count&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将计算的结果输出到标准输出</span></span><br><span class="line">    transformed.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行计算逻辑</span></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pom文件修改"><a href="#pom文件修改" class="headerlink" title="pom文件修改"></a>pom文件修改</h2></li><li>自动生成的pom文件依赖包中都带有<scope>provided</scope>属性,该属性表示打包时不带上这些依赖包，环境已提供，故在运行程序时也需要注释掉该属性，程序才能正确调用依赖包</li><li>pom文件修改后内容<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>FlinkTutorial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Flink Quickstart Job<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>apache.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache Development Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.apache.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.11.0<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Apache Flink dependencies --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- These dependencies are provided, because they should not be packaged into the JAR file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-scala_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Scala Library, provided by Flink as well. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add connector dependencies here. They must be in the default scope (compile). --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Example:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">&lt;artifactId&gt;flink-connector-kafka_$&#123;scala.binary.version&#125;&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;version&gt;$&#123;flink.version&#125;&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add logging framework, to produce console output when running in the IDE. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- These dependencies are excluded from the application JAR by default. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Change the value of &lt;mainClass&gt;...&lt;/mainClass&gt; if your program entry point changes. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Run shade goal on package phase --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.apache.flink:force-shading<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.code.findbugs:jsr305<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.slf4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.apache.logging.log4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Do not copy the signatures in the META-INF folder.</span></span><br><span class="line"><span class="comment">Otherwise, this might cause SecurityExceptions when using the JAR. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.caixianquan.WordCount<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Java Compiler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Scala Compiler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span>&gt;</span>-nobootcp<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add src/main/scala to eclipse build path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add src/test/scala to eclipse build path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>add-test-source<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-test-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2></li><li>在监听的Linux主机上敲下命令：nc -lk 9999</li><li>idea运行程序</li><li>在终端中输入字符串，观察程序输出<br><img src="6%E3%80%81%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="查看程序运行结果"></li></ol><h1 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h1><div class="note info flat"><p>安装flink参考地址：<a href="https://www.caixianquan.tk/2020/11/16/%E5%A4%A7%E6%95%B0%E6%8D%AEspark%E7%AD%89%E7%BB%84%E4%BB%B6%E6%90%AD%E5%BB%BA-%E4%B8%89/">https://www.caixianquan.tk/2020/11/16/大数据spark等组件搭建-三/</a></p></div><h2 id="Session-Cluster提交任务"><a href="#Session-Cluster提交任务" class="headerlink" title="Session Cluster提交任务"></a>Session Cluster提交任务</h2><p>在yarn中初始化一个flink集群，开辟指定的资源，以后提交任务都向这里提交。这个flink集群会常驻在yarn集群中，除非手工停止。</p><ol><li>先启动hadoop集群</li><li>启动flink集群</li><li>启动yarn-session【在flink/bin下】：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yarn-session.sh -n 2 -s 2 -jm 1024 -tm 1024 -nm test -d</span><br></pre></td></tr></table></figure>其中：</li></ol><ul><li>-n(–container)：TaskManager的数量。</li><li>-s(–slots)：    每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。</li><li>-jm：JobManager的内存（单位MB)。</li><li>-tm：每个taskmanager的内存（单位MB)。</li><li>-nm：yarn 的appName(现在yarn的ui上的名字)。 </li><li>-d：后台执行。</li></ul><ol start="4"><li>执行任务：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run  /opt/module/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><h2 id="Per-Job-Cluster提交任务"><a href="#Per-Job-Cluster提交任务" class="headerlink" title="Per Job Cluster提交任务"></a>Per Job Cluster提交任务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -m yarn-cluster /opt/module/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2></li><li>Session Cluster模式下可以通过Yarn UI中的运行任务下的ApplicationMaster进入查看Flink任务管理页面；Job Cluster模式可以通过<a href="http://hadoop101:8081来访问任务">http://hadoop101:8081来访问任务</a></li><li>Session Cluster模式下只有停止所在的yarn任务才能够使用yarn logs 来收集taskmanager中的日志</li><li>Flink应用暂时无法打印自定义的log日志，只能只能通过print打印出来</li></ol><h1 id="Flink运行架构"><a href="#Flink运行架构" class="headerlink" title="Flink运行架构"></a>Flink运行架构</h1><h2 id="Flink运行时组件"><a href="#Flink运行时组件" class="headerlink" title="Flink运行时组件"></a>Flink运行时组件</h2><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）【类似于master】、资源管理器（ResourceManager）、任务管理器（TaskManager）【类似于slave】，以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机（JVMs）上。每个组件的职责如下：</p><ol><li><p>作业管理器（JobManager）是控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的作业管理器所控制执行。</p><ul><li>作业管理器会先接收到要执行的应用程序。这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。</li><li>作业管理器会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。</li><li>作业管理器会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。</li><li>而在运行过程中，作业管理器会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</li></ul></li><li><p>ResourceManager主要负责管理任务管理器（TaskManager）的插槽（slot）【类似spark中的分区】，TaskManger插槽是Flink中定义的处理资源单元。</p><ul><li>Flink为不同的环境和资源管理工具提供了不同资源管理器（ResourceManager），比如YARN、Mesos、K8s，以及standalone部署。</li><li>当作业管理器申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给作业管理器。如果ResourceManager没有足够的插槽来满足作业管理器的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。</li><li>另外，ResourceManager还负责终止空闲的TaskManager，释放计算资源。</li></ul></li><li><p>任务管理器（TaskManager）是Flink中的工作进程。</p><ul><li>通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了TaskManager能够执行的任务数量。</li><li>启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给作业管理器调用。作业管理器就可以向插槽分配任务（tasks）来执行了。</li><li>在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据（比如shuffle）。任务的执行和插槽的概念会在“任务执行”一节做具体讨论。</li><li>每一个任务管理器是一个JVM进程，每一个插槽是一个线程。</li></ul></li><li><p>分发器（Dispatcher）可以跨作业运行，它为应用提交提供了REST接口。</p><ul><li>当一个应用被提交执行时，分发器就会启动并将应用移交给一个作业管理器。由于是REST接口，所以Dispatcher可以作为集群的一个HTTP接入点，这样就能够不受防火墙阻挡。</li><li>Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。</li><li>Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</li></ul></li></ol><h2 id="任务提交流程（独立集群）"><a href="#任务提交流程（独立集群）" class="headerlink" title="任务提交流程（独立集群）"></a>任务提交流程（独立集群）</h2><p><img src="9%E3%80%81%E7%8B%AC%E7%AB%8B%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="独立集群的任务提交流程"></p><ol><li>程序的并行度设置为10，那么并行任务的数量就是10，作业管理器就会向资源管理器请求10个任务槽<br><img src="10%E3%80%81yarn%E5%BD%A2%E5%BC%8F%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="yarn形式的任务提交流程"><br><img src="11%E3%80%81%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86.png" alt="任务调度原理"><br><img src="12%E3%80%81TaskManager%E5%92%8CSlots.png" alt="TaskManager和Slots"></li><li>Flink中每一个TaskManager都是一个JVM进程，每一个任务插槽都会启动一个线程，它可能会在独立的线程上执行一个或多个子任务【顺序执行】，每一个子任务占用一个任务插槽（Task slot）</li><li>为了控制一个TaskManager能接收多少个task，TaskManager通过task slot 来进行控制（一个TaskManager至少有一个slot）</li><li>默认情况下，Flink允许子任务共享slot，即使它们是不同任务的子任务。 这样的结果是，一个slot可以保存作业的整个管道。</li><li>Task Slot是静态的概念，是指TaskManager具有的并发执行能力<br><img src="13%E3%80%81%E4%BB%BB%E5%8A%A1%E6%A7%BD%E6%95%B0%E9%87%8F%E7%A4%BA%E4%BE%8B.png" alt="任务槽数量示例"></li></ol><ul><li>flink-conf.yaml中配置的任务槽是一个taskmanager有3个slot，而代码中的并行度设置为1，那么任务就只会启动一个slot来执行任务，而设置为2时，那么每一个算子就会在两个slot中执行<br><img src="14%E3%80%81%E4%BB%BB%E5%8A%A1%E6%A7%BD%E5%8D%A0%E6%BB%A1%E4%BE%8B%E5%AD%90.png" alt="任务槽占满例子"></li><li>而如果设置并行度为9，那么三个taskmanager中的三个任务槽都会被占用执行</li><li>可以单独设置不同算子的并行度，比如sink设置为1，如Example4</li><li>taskmanager安装在几个节点上就会启动多少个taskmanager进程，即可认为是节点的数量</li></ul><h2 id="程序与数据流（DataFlow）"><a href="#程序与数据流（DataFlow）" class="headerlink" title="程序与数据流（DataFlow）"></a>程序与数据流（DataFlow）</h2><p><img src="15%E3%80%81%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="程序与数据流"></p><ol><li>所有的Flink程序都是由三部分组成的：  Source 、Transformation 和 Sink。</li><li>Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出</li><li>在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分</li><li>每一个dataflow以一个或多个sources开始以一个或多个sinks结束。dataflow类似于任意的有向无环图（DAG）</li><li>在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系<br><img src="16%E3%80%81%E6%95%B0%E6%8D%AE%E6%B5%81%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE.png" alt="数据流有向无环图"></li></ol><h2 id="执行图（ExecutionGraph）"><a href="#执行图（ExecutionGraph）" class="headerlink" title="执行图（ExecutionGraph）"></a>执行图（ExecutionGraph）</h2><ol><li>Flink中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图</li><li>StreamGraph：是根据用户通过 Stream API编写的代码生成的最初的图。用来表示程序的拓扑结构。</li><li>JobGraph：StreamGraph在编译的阶段经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点</li><li>ExecutionGraph：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</li><li>物理执行图：JobManager根据ExecutionGraph对Job进行调度后，在各个TaskManager上部署Task后形成的“图”，并不是一个具体的数据结构。<br><img src="17%E3%80%81%E6%89%A7%E8%A1%8C%E5%9B%BE%E8%BD%AC%E6%8D%A2.png" alt="执行图转换"></li></ol><h2 id="并行度（Parallelism）"><a href="#并行度（Parallelism）" class="headerlink" title="并行度（Parallelism）"></a>并行度（Parallelism）</h2><p><img src="18%E3%80%81%E5%B9%B6%E8%A1%8C%E5%BA%A6.png" alt="并行度"></p><ol><li>一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）。一般情况下，一个stream的并行度，可以认为就是其所有算子中最大的并行度。</li><li>程序设置的并行度要小于或等于配置文件中设置的所有taskmanager的slot数量，否则程序会报错。</li></ol><h2 id="任务链（Operator-Chains）"><a href="#任务链（Operator-Chains）" class="headerlink" title="任务链（Operator Chains）"></a>任务链（Operator Chains）</h2><ol><li>Flink采用了一种称为任务链的优化技术，可以在特定条件下减少本地通信的开销。为了满足任务链的要求，必须将两个或多个算子设为相同的并行度，并通过本地转发（local forward）的方式进行连接</li><li>相同并行度的one-to-one操作，Flink这样相连的算子链接在一起形成一个task，原来的算子成为里面的subtask</li><li><font color=red size=3><strong><em>并行度相同、并且是 one-to-one 操作，两个条件缺一不可</em></strong></font><br><img src="19%E3%80%81%E4%BB%BB%E5%8A%A1%E9%93%BE.png" alt="任务链"></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据学习 </category>
          
          <category> 尚硅谷大数据之Flink学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka入门学习</title>
      <link href="/hexo/2020/12/08/kafka%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/hexo/2020/12/08/kafka%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章标题/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="kafka概述"><a href="#kafka概述" class="headerlink" title="kafka概述"></a>kafka概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>Kafka是一个分布式的<font color=red size=3><strong><em>基于发布/订阅模式</em></strong></font>的<font color=red size=3><strong><em>消息队列</em></strong></font>，主要应用于大数据实时处理领域。</li></ul><h2 id="消息队列（Message-Queue）"><a href="#消息队列（Message-Queue）" class="headerlink" title="消息队列（Message Queue）"></a>消息队列（Message Queue）</h2><ul><li>三个作用：异步，消峰，解耦</li></ul><h3 id="传统消息队列的应用场景"><a href="#传统消息队列的应用场景" class="headerlink" title="传统消息队列的应用场景"></a>传统消息队列的应用场景</h3><ol><li>MQ传统应用场景之异步处理</li></ol><ul><li>发送短信通知用户注册成功<br><img src="1%E3%80%81%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%80%9A%E7%9F%A5%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.png" alt="发送短信通知用户注册成功"></li></ul><ol start="2"><li>MQ传统应用场景之流量消峰<br><img src="2%E3%80%81MQ%E4%BC%A0%E7%BB%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B9%8B%E6%B5%81%E9%87%8F%E6%B6%88%E5%B3%B0.png" alt="MQ传统应用场景之流量消峰"></li></ol><h3 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h3><ol><li>点对点模式（<font color=red size=3><strong><em>一对一</em></strong></font>，消费者主动拉取数据，消息收到后消息清除）</li></ol><ul><li>消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。<br><img src="3%E3%80%81%E7%82%B9%E5%AF%B9%E7%82%B9%E6%A8%A1%E5%BC%8F.png" alt="点对点模式"></li></ul><ol start="2"><li>发布/订阅模式（<font color=red size=3><strong><em>一对多</em></strong></font>，消费者消费数据之后不会清除消息）</li></ol><ul><li>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。<br><img src="4%E3%80%81%E5%8F%91%E5%B8%83_%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png" alt="发布/订阅模式"></li></ul><h2 id="Kafka基础架构"><a href="#Kafka基础架构" class="headerlink" title="Kafka基础架构"></a>Kafka基础架构</h2><p><img src="5%E3%80%81Kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png" alt="Kafka基础架构"><br><img src="6%E3%80%81%E4%B8%80%E4%B8%AAtopic%E5%88%86%E4%B8%BA%E5%A4%9A%E4%B8%AApartition.png" alt="一个topic分为多个partition"></p><ul><li>一个组负责消费一个topic，每个分区对应一个消费者，</li><li>分区数超过组内消费者数时，需要怎么做，<font color=red size=3><strong><em>一个消费者可以消费多个分区</em></strong></font>；</li><li>而一个分区不能被两个消费者消费，如果消费者数多于分区数，那么<font color=red size=3><strong><em>多出的消费者会消费不了数据</em></strong></font>。</li></ul><p><img src="7%E3%80%81%E6%B6%88%E8%B4%B9%E7%BB%84%E6%A6%82%E5%BF%B5.png" alt="消费组概念"><br><img src="8%E3%80%81%E5%A2%9E%E5%8A%A0%E5%A4%9A%E4%B8%AA%E5%89%AF%E6%9C%AC.png" alt="增加多个副本"></p><h1 id="Kafka快速入门"><a href="#Kafka快速入门" class="headerlink" title="Kafka快速入门"></a>Kafka快速入门</h1><h1 id="Kafka架构深入"><a href="#Kafka架构深入" class="headerlink" title="Kafka架构深入"></a>Kafka架构深入</h1><h1 id="Kafka-API"><a href="#Kafka-API" class="headerlink" title="Kafka API"></a>Kafka API</h1><h1 id="Flume对接Kafka"><a href="#Flume对接Kafka" class="headerlink" title="Flume对接Kafka"></a>Flume对接Kafka</h1><h1 id="Kafka监控"><a href="#Kafka监控" class="headerlink" title="Kafka监控"></a>Kafka监控</h1><h1 id="Kafka面试题"><a href="#Kafka面试题" class="headerlink" title="Kafka面试题"></a>Kafka面试题</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据学习 </category>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows软件问题收集</title>
      <link href="/hexo/2020/12/07/windows%E8%BD%AF%E4%BB%B6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
      <url>/hexo/2020/12/07/windows%E8%BD%AF%E4%BB%B6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章生成的文件夹名/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="Sublime-Text-3增加最近打开的文件数量（Windows）"><a href="#Sublime-Text-3增加最近打开的文件数量（Windows）" class="headerlink" title="Sublime Text 3增加最近打开的文件数量（Windows）"></a>Sublime Text 3增加最近打开的文件数量（Windows）</h1><ol><li>参考地址：<a href="https://www.jianshu.com/p/51400de20b0b">Text 3增加最近打开的文件数量（Windows）</a></li></ol><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>找到Sublime Text 3安装目录下的<code>Default.sublime-package</code>文件，在我电脑上的路径为：<code>D:\Program Files\Sublime Text 3\Packages\Default.sublime-package</code>，复制一份该文件，把文件扩展名改为<code>zip</code>，比如改为：<code>Default.zip</code>。</li></ol><p><img src="1%E3%80%81sublimetext3%E7%9B%AE%E5%BD%95.png" alt="sublimetext3目录"></p><ol start="2"><li>解压该zip文件，在解压出的目录中找到文件<code>Main.sublime-menu</code>，用文本编辑器打开：</li></ol><p><img src="2%E3%80%81Main.sublime-menu.png" alt="Main.sublime-menu"></p><ol start="3"><li><p>找到如图所示的文本，增加几行<code>&#123; &quot;command&quot;: &quot;open_recent_file&quot;, &quot;args&quot;: &#123;&quot;index&quot;: n &#125; &#125;,</code>。<br><img src="3%E3%80%81%E5%A2%9E%E5%8A%A0command.png" alt="增加command"></p></li><li><p>例如把最近打开的文件和文件夹数量都改为15：<br><img src="4%E3%80%81%E5%A2%9E%E5%8A%A015%E6%9D%A1%E8%AE%B0%E5%BD%95.png" alt="增加15条记录"></p></li><li><p>保存修改的文件<code>Main.sublime-menu</code>，找到<code>Sublime Text 3</code>的配置文件目录，在我电脑为<code>C:\Users\zhangchao\AppData\Roaming\Sublime Text 3\Packages\</code>，新建文件夹Default，把修改后的<code>Main.sublime-menu</code>文件复制到Default目录中即可。<br><img src="5%E3%80%81%E5%A4%8D%E5%88%B6%E5%88%B0Default%E7%9B%AE%E5%BD%95.png" alt="复制到Default目录"></p></li></ol><h1 id="Chrome神器Vimium快捷键学习记录"><a href="#Chrome神器Vimium快捷键学习记录" class="headerlink" title="Chrome神器Vimium快捷键学习记录"></a>Chrome神器Vimium快捷键学习记录</h1><p>j: 向下移动。<br>k：向上移动。（不明白默认的<c-y>表示是啥用法，使用了c-y这三个键没有效果）<br>h：向左移动。<br>l：向右移动。<br>zH：一直移动到左部。<br>zL:一直移动到右部。<br>gg：跳转到页面的顶部。<br>G：跳转到页面的底部。<br>d：向下翻页（相当于PageDown被按下了）<br>u：向上翻页（相当于PageUp被按下了）<br>r：重新载入该页（相当于F5刷新页面）<br>gs：查看页面源代码<br>yy：拷贝当前页面的URL到剪贴板<br>yf：拷贝某一个URL到剪贴板（实际上是相当于输入了f，然后出现很多编码的URL，选择某个之后，相当于拷贝了某个，因为一个页面中可能有很多超链接）<br>gu：跳转到父页面（比如<a href="http://www.douban.com/group/vim/%EF%BC%8C%E8%BE%93%E5%85%A5%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%88%B6%E9%A1%B5%E9%9D%A2%E5%8D%B3http://www.douban.com/group/%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%8D%E5%90%8C%E4%BA%8EH%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%98%AF%E5%9B%9E%E5%88%B0%E4%B8%8A%E4%B8%AA%E5%8E%86%E5%8F%B2%E9%A1%B5%E9%9D%A2%EF%BC%89">http://www.douban.com/group/vim/，输入后跳转到父页面即http://www.douban.com/group/，所以不同于H的快捷键是回到上个历史页面）</a></p><p>i：输入模式（如果发现命令不起作用，可能是进入输入模式了，此时按Esc回到命令模式）<br>gi：将焦点集中到第一个输入框（输入gNi则焦点集中到第N个输入框）<br>f：在当前的页面打开一个新的链接。<br>F：在新的页面打开一个新的链接。<br>&lt;a-f&gt;:在当前页面打开多个链接（没感觉使用到了多个标签，不过表示的是输入af）<br>b：在当前页打开一个书签。（输入部分网址会自动进行搜索）<br>B：在新的标签页打开一个书签<br>gf：循环到当前页面的下一个框层（可能跟页面制作有关，目前没用到）</p><p>查找模式：（和Vim相似）<br>/ : 查找<br>n: 向下查找匹配内容<br>N：向上查找匹配内容</p><p>导航历史：<br>H：回退上一个历史页面（相当于浏览器中的向左箭头）<br>L：回到下一个历史页面（相当于浏览器的向右箭头）</p><p>标签页操作：<br>K，gt：跳转到右边的一个标签页<br>J，gT：跳转到左边的一个标签页<br>t：创建一个新的标签页<br>x：关闭当前的标签页<br>X：恢复刚刚关闭的标签页<br>？：显示命令的帮助提示（再按一次关闭）</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> windows软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统问题收集</title>
      <link href="/hexo/2020/12/06/windows%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
      <url>/hexo/2020/12/06/windows%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章生成的文件夹名/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="电脑无法进入睡眠模式"><a href="#电脑无法进入睡眠模式" class="headerlink" title="电脑无法进入睡眠模式"></a>电脑无法进入睡眠模式</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>INDOWS 10专业版64位，系统版本：1511 OS版本：10586.420</p><p>问题描述：</p><p>通过上面的方法，dell 15R 5110笔记本在接通电源的情况下点击开始菜单关机-睡眠依然无法睡眠，只是关闭屏幕但是硬盘CPU依然在工作。</p><p>在更新系统之前是可以睡眠的，只要合上盖子就自动睡眠了，而且很快。自从这次就像装系统一样的大更新后，发现合上盖子后无法睡眠，必须拔掉电源，然后重新再合上盖子，才会自动睡眠。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>问题的核心都围绕着“离开模式”而产生，题主所描述的只关闭屏幕而不关闭CPU的情况正是离开模式的表现。一般来说能够操改变到离开模式的软件有：a)迅雷：离开模式下载 ；b)百度网盘：传输时不休眠。</p></li><li><p>通过软件的方式毕竟不是主流，控制离开模式最核心的方法还在于注册表。通过运行——regedit我们打开注册表编辑器，定位到“计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power”，在右侧找到AwayModeEnabled，当它的值为1时表明当前处于离开模式，无法正常睡眠，将其值改为0即可正常睡眠。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> windows系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows小技巧 </tag>
            
            <tag> windows问题收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hexo/2020/12/06/hello-world/"/>
      <url>/hexo/2020/12/06/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Quick-Start-2"><a href="#Quick-Start-2" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-2"><a href="#Create-a-new-post-2" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-2"><a href="#Run-server-2" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-2"><a href="#Generate-static-files-2" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-2"><a href="#Deploy-to-remote-sites-2" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//只需要dqbm，xlxdbs，gddwbm</span></span><br><span class="line">   <span class="comment">//dataZbGsdxxDf1.select(&quot;XLXDBS&quot;,&quot;DQBM&quot;,&quot;GDDWBM&quot;).createOrReplaceTempView(&quot;rxs_data1&quot;)</span></span><br><span class="line">   <span class="keyword">val</span> rxsXlCshxxDf = <span class="type">RxsColumnsUdf</span>.getcshDF().select(<span class="string">&quot;XLXDBS&quot;</span>,<span class="string">&quot;DQBM&quot;</span>,<span class="string">&quot;GDDWBM&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> rxsxlCshxx1: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>)] = rxsXlCshxxDf.collect().map(f =&gt; (f.getAs[<span class="type">String</span>](<span class="number">0</span>), f.getAs[<span class="type">String</span>](<span class="number">1</span>), f.getAs[<span class="type">String</span>](<span class="number">2</span>)))</span><br><span class="line">  <span class="comment">// val arrayDf:Array[DataFrame] = new Array[DataFrame](rxsxlCshxx1.length)</span></span><br><span class="line">  <span class="keyword">val</span> arrayDf:<span class="type">Array</span>[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>, <span class="type">BigDecimal</span>)] = <span class="keyword">new</span> <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">String</span>,<span class="type">BigDecimal</span>)](rxsxlCshxx1.length)</span><br><span class="line"> <span class="comment">//  val arrayCount:Array[Long] = new Array[Long](rxsxlCshxx1.length)</span></span><br><span class="line"></span><br><span class="line">   println(<span class="string">&quot;初始化表总共行数: &quot;</span>+ rxsxlCshxx1.length)</span><br><span class="line">   <span class="comment">//针对dqbm，xlxdbs，gddwbm进行插数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until rxsxlCshxx1.length)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//bqsdl所在的gddwbm下的所有下级单位集合进行sum,操作一行</span></span><br><span class="line">     arrayDf(i) = spark.sql(</span><br><span class="line">       <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">          |select BQSDL,</span></span><br><span class="line"><span class="string">          |       XLXDBS,</span></span><br><span class="line"><span class="string">          |       DQBM</span></span><br><span class="line"><span class="string">          |    from rxs_dataZbGsdxx E</span></span><br><span class="line"><span class="string">          |    where E.GDDWBM like &#x27;$&#123;rxsxlCshxx1(i)._3&#125;%&#x27;</span></span><br><span class="line"><span class="string">          |        and E.XLXDBS = $&#123;rxsxlCshxx1(i)._1&#125;</span></span><br><span class="line"><span class="string">          |        and E.DQBM = $&#123;rxsxlCshxx1(i)._2&#125;</span></span><br><span class="line"><span class="string">         &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/default_cover.jpg" alt="default_cover"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大数据spark等组件搭建(三)</title>
      <link href="/hexo/2020/11/16/%E5%A4%A7%E6%95%B0%E6%8D%AEspark%E7%AD%89%E7%BB%84%E4%BB%B6%E6%90%AD%E5%BB%BA-%E4%B8%89/"/>
      <url>/hexo/2020/11/16/%E5%A4%A7%E6%95%B0%E6%8D%AEspark%E7%AD%89%E7%BB%84%E4%BB%B6%E6%90%AD%E5%BB%BA-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h1><h2 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>解压缩: flink-1.10.0-bin-scala_2.11.tgz，进入conf目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure></li><li><p>修改 flink-1.10.0/conf/flink-conf.yaml 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobmanager.rpc.address: hadoop101</span><br></pre></td></tr></table></figure></li><li><p>修改 /conf/slaves文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop101</span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br></pre></td></tr></table></figure></li><li><p>分发给另外两台机子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsync flink-1.10.0</span><br></pre></td></tr></table></figure></li><li><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]# /opt/module/flink-1.10.0/bin/start-cluster.sh </span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host hadoop101.</span><br><span class="line">Starting taskexecutor daemon on host hadoop102.</span><br><span class="line">Starting taskexecutor daemon on host hadoop103.</span><br></pre></td></tr></table></figure><p><img src="1%E3%80%81%E5%90%AF%E5%8A%A8flink-Standalone%E6%A8%A1%E5%BC%8F.png" alt="启动flink-Standalone模式"><br>访问<a href="http://hadoop101:8081可以对flink集群和任务进行监控管理。">http://hadoop101:8081可以对flink集群和任务进行监控管理。</a><br><img src="2%E3%80%81Flink%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2.png" alt="Flink集群管理页面"></p></li><li><p>执行自带例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/flink-1.10.0/bin/flink run   /opt/module/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><h2 id="Flink-on-yarn模式"><a href="#Flink-on-yarn模式" class="headerlink" title="Flink on yarn模式"></a>Flink on yarn模式</h2><p>参考例子：<a href="https://www.cnblogs.com/quchunhui/p/12463455.html">Flink On Yarn安装部署笔记（flink-1.10.0，Hadoop2.10.1）</a></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight shell"><figcaption><span>/etc/profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">hadoop需要增加如下环境变量,可能会报错误： java.lang.ClassNotFoundException: org.apache.hadoop.yarn.exceptions.YarnException</span></span><br><span class="line">export HADOOP_CONF_DIR=/opt/module/hadoop-2.7.2/etc/hadoop</span><br><span class="line">export HADOOP_CLASSPATH=`hadoop classpath`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">FLINK_HOME</span></span><br><span class="line">export FLINK_HOME=/opt/module/flink-1.10.0</span><br><span class="line">export PATH=$PATH:$FLINK_HOME/bin</span><br></pre></td></tr></table></figure><p>分发到其他节点并source该文件</p></li></ol><h3 id="导入对应flink集成对应的hadoop的jar包"><a href="#导入对应flink集成对应的hadoop的jar包" class="headerlink" title="导入对应flink集成对应的hadoop的jar包"></a>导入对应flink集成对应的hadoop的jar包</h3><p>要操作hdfs的话，必须要在flink安装目录的 lib 下加上额外的jar包<br>参考地址：<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/release-notes/flink-1.8.html">https://ci.apache.org/projects/flink/flink-docs-release-1.8/release-notes/flink-1.8.html</a><br>测试集群hadoop为2.7.2，对应jar包为：flink-shaded-hadoop-2-uber-2.7.5-10.0.jar<br>下载地址：<a href="https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar">https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar</a></p><p>将该jar包导入到各个节点的flink的lib目录下</p><h3 id="yarn-site-xml配置"><a href="#yarn-site-xml配置" class="headerlink" title="yarn-site.xml配置"></a>yarn-site.xml配置</h3><figure class="highlight shell"><figcaption><span>增加配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class="line">&lt;value&gt;10240&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt;</span><br><span class="line">&lt;value&gt;10240&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是true。由于使用虚拟机内存不够可能会报错，所以不启动 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">&lt;value&gt;false&gt;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 任务每使用1MB物理内存，最多可使用虚拟内存量 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt;</span><br><span class="line">&lt;value&gt;4&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动组件顺序：zookeeper集群【如果有】，hadoop 集群，历史服务器，Flink集群</p><p><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 组件部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必知的硬核知识大全--计算机操作系统理论知识概念</title>
      <link href="/hexo/2020/11/01/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E7%9F%A5%E7%9A%84%E7%A1%AC%E6%A0%B8%E7%9F%A5%E8%AF%86%E5%A4%A7%E5%85%A8-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%A6%82%E5%BF%B5/"/>
      <url>/hexo/2020/11/01/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E7%9F%A5%E7%9A%84%E7%A1%AC%E6%A0%B8%E7%9F%A5%E8%AF%86%E5%A4%A7%E5%85%A8-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章生成的目录名/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br><span class="line">强调模板：&lt;font color=red size=3&gt;***（提示：机器学习最好要看一下《数学之美》这本书）***&lt;/font&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><ol><li>CPU主要由两部分构成：控制单元和算术逻辑单元（ALU）</li></ol><ul><li>控制单元：从内存中提取指令并解码执行</li><li>算数逻辑单元（ALU）：处理算数和逻辑运算</li></ul><ol start="2"><li>内部结构：寄存器、控制器、运算器和时钟</li></ol><ul><li>寄存器：是中央处理器内的组成部分。它们可以用来暂存指令、数据和地址。可以将其看作是内存的一种。根据种类的不同，一个CPU内部会有20- 100个寄存器。</li><li>控制器：负责把内存上的指令、数据读入寄存器，并根据指令的结果控制计算机</li><li>运算器：负责运算从内存中读入寄存器的数据</li><li>时钟：负责发出CPU开始计时的时钟信号</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h1 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h1><h1 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机科学课程 </category>
          
          <category> Prerequisites </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论知识 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> CPU </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk和Hadoop搭建--普通用户下(二)</title>
      <link href="/hexo/2020/10/03/jdk%E5%92%8CHadoop%E6%90%AD%E5%BB%BA-%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%B8%8B-%E4%BA%8C/"/>
      <url>/hexo/2020/10/03/jdk%E5%92%8CHadoop%E6%90%AD%E5%BB%BA-%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%B8%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="虚拟机环境准备"><a href="#虚拟机环境准备" class="headerlink" title="虚拟机环境准备"></a>虚拟机环境准备</h1><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>参考上一节创建虚拟机：<a href="https://www.caixianquan.tk/2020/10/02/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85CentOS-%E4%B8%80/">https://www.caixianquan.tk/2020/10/02/在虚拟机中安装CentOS-一/</a></p><h2 id="导入虚拟机"><a href="#导入虚拟机" class="headerlink" title="导入虚拟机"></a>导入虚拟机</h2><ul><li>从移动硬盘中导入虚拟机，这时虚拟机保存位置的文件名是不能更改的，可以直接从这台导入的虚拟机另外复制出想要的虚拟机，然后重命名，就可以将虚拟机保存的位置更改名字了。如下：<br><img src="1%E3%80%81%E5%AF%BC%E5%85%A5%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="导入虚拟机"></li></ul><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><div class="note primary flat"><p><font color=red size=3><strong>大数据工作环境一般也是关闭防火墙的，需要对外服务，再从集群与外界环境交互中增加防火墙</strong></font></p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo service iptables stop //服务关闭</span><br><span class="line">sudo chkconfig iptables off //关闭开机自启</span><br><span class="line">service iptables status  //查看防火墙状态</span><br><span class="line">chkconfig --list iptables  //显示防火墙的运行状态信息</span><br><span class="line">等级0表示：表示关机 </span><br><span class="line">等级1表示：单用户模式 </span><br><span class="line">等级2表示：无网络连接的多用户命令行模式 </span><br><span class="line">等级3表示：有网络连接的多用户命令行模式 </span><br><span class="line">等级4表示：不可用 </span><br><span class="line">等级5表示：带图形界面的多用户模式 </span><br><span class="line">等级6表示：重新启动 </span><br><span class="line"></span><br><span class="line">CentOS7防火墙</span><br><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure><h2 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h2><div class="note primary flat"><p>生产环境下需要使用普通用户来操作集群，实验环境可以使用root用户</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd caixianquan</span><br><span class="line">passwd caixianquan</span><br></pre></td></tr></table></figure><p>假设虚拟机中已经存在一个普通用户，这里修改用户名及家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">更改用户名：</span><br><span class="line">usermod -l 新用户名 旧用户名</span><br><span class="line">更新家目录：</span><br><span class="line">usermod -d /home/新家目录 -m 新用户名</span><br></pre></td></tr></table></figure><h2 id="配置这个用户为sudoers"><a href="#配置这个用户为sudoers" class="headerlink" title="配置这个用户为sudoers"></a>配置这个用户为sudoers</h2><p><font color=red size=3><strong>为用户授予能够使用root命令</strong></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line">   在root    ALL=(ALL)       ALL</span><br><span class="line">   添加caixianquan    ALL=(ALL)       NOPASSWD:ALL</span><br><span class="line">   保存时wq!强制保存</span><br></pre></td></tr></table></figure><p>比如使用普通用户创建用户，则需要在前面加上sudo即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost opt]$ userdel -r ahhahaha</span><br><span class="line">bash: /usr/sbin/userdel: 权限不够</span><br><span class="line">[caixianquan@localhost opt]$ sudo userdel -r ahhahaha</span><br></pre></td></tr></table></figure><h2 id="在-opt目录下创建software和module两个文件夹，并更改所有权"><a href="#在-opt目录下创建software和module两个文件夹，并更改所有权" class="headerlink" title="在/opt目录下创建software和module两个文件夹，并更改所有权"></a>在/opt目录下创建software和module两个文件夹，并更改所有权</h2><div class="note primary flat"><p>这里主要是为后面的集群搭建设置目录以及安装位置</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/module /opt/software</span><br><span class="line">chown caixianquan:caixianquan /opt/module /opt/software</span><br></pre></td></tr></table></figure><h2 id="配置hosts文件【添加域名，后面免登录】"><a href="#配置hosts文件【添加域名，后面免登录】" class="headerlink" title="配置hosts文件【添加域名，后面免登录】"></a>配置hosts文件【添加域名，后面免登录】</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">=============================</span><br><span class="line">192.168.56.100   hadoop100</span><br><span class="line">192.168.56.101   hadoop101</span><br><span class="line">192.168.56.102   hadoop102</span><br><span class="line">192.168.56.103   hadoop103</span><br><span class="line">192.168.56.104   hadoop104</span><br><span class="line">192.168.56.105   hadoop105</span><br><span class="line">192.168.56.106   hadoop106</span><br><span class="line">192.168.56.107   hadoop107</span><br><span class="line">192.168.56.108   hadoop108</span><br><span class="line">192.168.56.109   hadoop109</span><br><span class="line">=============================</span><br></pre></td></tr></table></figure><p>小技巧：使用shell来做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">for((i = 100;i &lt; 110; i++))</span><br><span class="line">do</span><br><span class="line">        echo &quot;192.168.56.$i hadoop$i&quot; &gt;&gt; /etc/hosts</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="改静态IP"><a href="#改静态IP" class="headerlink" title="改静态IP"></a>改静态IP</h2><p><font color=red size=3><strong>【每次克隆新虚拟机，需要从这开始修改，使用一般用户登录】</strong></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=&quot;eth0&quot;</span><br><span class="line">IPADDR=192.168.5.101</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.5.2</span><br><span class="line">DNS1=192.168.5.2</span><br></pre></td></tr></table></figure><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CentOS6下：编辑vim /etc/sysconfig/network</span><br><span class="line">    改HOSTNAME=hadoop100</span><br><span class="line">CentOS下：编辑vim /etc/hostname</span><br><span class="line">        改hostname=hadoop100</span><br><span class="line">        </span><br><span class="line">或者直接使用命令：hostnamectl  set-hostname hadoop100</span><br><span class="line">【退出重新登录即可】</span><br></pre></td></tr></table></figure><h2 id="备份环境"><a href="#备份环境" class="headerlink" title="备份环境"></a>备份环境</h2><p>保存为快照，下次直接从这个快照克隆其他节点<br><img src="2%E3%80%81%E5%A4%87%E4%BB%BD%E7%8E%AF%E5%A2%83.png" alt="备份环境"></p><h1 id="SSH无密登录配置"><a href="#SSH无密登录配置" class="headerlink" title="SSH无密登录配置"></a>SSH无密登录配置</h1><h2 id="免密登录原理"><a href="#免密登录原理" class="headerlink" title="免密登录原理"></a>免密登录原理</h2><ol><li><p>ssh身份验证：本机A向远程主机B发送一个登录请求，B向A发送一个秘钥用来加密数据流。<br>A通过秘钥加密本机密码发送给B，然后B通过配对秘钥解密核对密码，认证成功即可登录</p></li><li><p>ssh首次连接过程中需要输入yes，这时因为远程主机在向本机发送公钥时，要确保是否是目标主机，需要人工核对。<br><img src="3%E3%80%81%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86.png" alt="免密登录原理"></p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>生成公钥和私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost ~]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><ul><li>然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</li><li>其中在~/.ssh目录下还有一个known_hosts文件，保存之前使用ssh登录过的主机ip，即首次连接时需要输入yes的过程，如果删除该文件，那么下次连接还是首次连接，得人工核对输入yes</li></ul></li><li><p>将公钥拷贝到要免密登录的目标机器上</p><div class="note primary flat"><p>注意：本身节点的authorized_keys文件也需要保存公钥</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost .ssh]$ ssh-copy-id hadoop103</span><br></pre></td></tr></table></figure><p>在目标机器上就会保存对应的公钥，文件为：authorized_keys【可以有多把公钥】<br>注意.ssh文件夹自动生成不会有权限问题</p></li><li><p>在其他hadoop103、hadoop102上</p><ul><li>也需要在各自的主机上生成对应的私钥和公钥</li><li>然后在hadoop103和hadoop102通过ssh-copy-id命令将公钥发送给hadoop101上，那么hadoop101上的authorized_keys文件就保存包括本身的所有公钥，直接通过xsync将authorized_keys文件分发给其他节点上即可实现所有机器免密互相登录</li></ul></li><li><p>.ssh文件夹下（~/.ssh）的文件功能解释<br><img src="4%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E.png" alt="文件说明"></p></li></ol><h1 id="xsync集群分发脚本"><a href="#xsync集群分发脚本" class="headerlink" title="xsync集群分发脚本"></a>xsync集群分发脚本</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>循环复制文件到所有节点的相同目录下</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>rsync命令原始拷贝：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync  -av     /opt/module  root@hadoop103:/opt/</span><br></pre></td></tr></table></figure></li><li>期望脚本：<ul><li>xsync要同步的文件名称</li></ul></li><li><font color=red size=3><strong>说明：在/home/caixianquan/bin这个目录下存放的脚本，caixianquan用户可以在系统任何地方直接执行。</strong></font></li></ol><h2 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h2><ol><li><p>在/home/caixianquan目录下创建bin目录，并在bin目录下xsync创建文件，在root用户下，/root目录下创建bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 ~]$ mkdir bin</span><br><span class="line">[caixianquan@hadoop101 ~]$ cd bin/</span><br><span class="line">[caixianquan@hadoop101 bin]$ touch xsync</span><br><span class="line">[caixianquan@hadoop101 bin]$ vi xsync</span><br></pre></td></tr></table></figure><p>在该文件中编写如下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1 获取输入参数个数，如果没有参数，直接退出</span></span><br><span class="line">pcount=$#</span><br><span class="line">if ((pcount==0)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">2 获取文件名称</span></span><br><span class="line">p1=$1</span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">3 获取上级目录到绝对路径</span></span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">5 循环</span></span><br><span class="line">for((host=101; host&lt;103; host++)); do</span><br><span class="line">        echo ------------------- hadoop$host --------------</span><br><span class="line">        rsync -av $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>修改脚本 xsync 具有执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 bin]$ chmod 777 xsync</span><br></pre></td></tr></table></figure></li><li><p>调用脚本形式：xsync 文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 bin]$ xsync /home/atguigu/bin</span><br></pre></td></tr></table></figure><p><font color=red size=3><strong>注意：如果将xsync放到/home/caixianquan/bin目录下仍然不能实现全局使用，可以将xsync移动到/usr/local/bin目录下【或者/bin下】。</strong></font></p></li><li><p>分发脚本到其他节点的/bin目录上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 bin]$ sudo rsync -av /bin/xsync hadoop102:/bin</span><br></pre></td></tr></table></figure></li><li><p>将/etc/profile文件发送到其他节点上，注意要使用sudo命令【普通用户下】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 opt]$ sudo xsync /etc/profile</span><br></pre></td></tr></table></figure><p>使用source命令执行配置文件profile</p></li></ol><h1 id="jpsall脚本"><a href="#jpsall脚本" class="headerlink" title="jpsall脚本"></a>jpsall脚本</h1><ol><li>编写jpsall脚本，实现观察多台节点的jps进程</li><li>在/home/caixianquan目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 ~]$ mkdir bin</span><br><span class="line">[caixianquan@hadoop101 ~]$ cd bin/</span><br><span class="line">[caixianquan@hadoop101 bin]$ touch jpsall</span><br><span class="line">[caixianquan@hadoop101 bin]$ vi jpsall</span><br></pre></td></tr></table></figure>在该文件中编写如下代码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in hadoop101 hadoop102 hadoop103</span><br><span class="line">do</span><br><span class="line">echo --------------------- $i -------------------------------</span><br><span class="line">ssh $i  &quot;source /etc/profile &amp;&amp; jps | grep -v Jps &quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li>修改脚本 jpsall具有执行权限<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 bin]$ chmod 777 xsync</span><br></pre></td></tr></table></figure></li><li>调用脚本形式：jpsall文件名称<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 bin]$ jpsall</span><br><span class="line">--------------------- hadoop102 -------------------------------</span><br><span class="line">5153 QuorumPeerMain</span><br><span class="line">--------------------- hadoop103 -------------------------------</span><br><span class="line">5300 QuorumPeerMain</span><br><span class="line">--------------------- hadoop104 -------------------------------</span><br><span class="line">5298 QuorumPeerMain</span><br></pre></td></tr></table></figure></li><li>分发脚本到其他节点的/bin目录上<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop101 ~]$ xsync bin/</span><br></pre></td></tr></table></figure><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2></li><li>JDK版本：jdk-8u144-linux-x64.tar.gz</li><li>查询是否已安装Java【能否使用命令java】，如果有就先卸载<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost software]$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_161&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_161-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)</span><br><span class="line">[caixianquan@localhost software]$ rpm -qa | grep java</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.161-2.b14.el7.x86_64</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">tzdata-java-2018c-1.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-1.8.0.161-2.b14.el7.x86_64</span><br><span class="line"></span><br><span class="line">【卸载java】</span><br><span class="line">[caixianquan@localhost software]$ rpm -qa | grep java | xargs sudo rpm -e --nodeps</span><br><span class="line">[caixianquan@localhost software]$ rpm -qa | grep java</span><br><span class="line">[caixianquan@localhost software]$ java</span><br><span class="line">-bash: /usr/bin/java: 没有那个文件或目录</span><br></pre></td></tr></table></figure></li><li>解压压缩包</li></ol><ul><li>将java压缩包解压到/opt/module目录下，hadoop安装包同理</li><li>其中参数：z、压缩编码，x、解压，v、打印信息，f、指定文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost software]$ tar -zxvf jdk-8u144-linux-x64.tar.gz  -C /opt/module</span><br><span class="line">[caixianquan@localhost software]$ cd /opt/module/</span><br><span class="line">[caixianquan@localhost module]$ ls</span><br><span class="line">hadoop-2.7.2  jdk1.8.0_144</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2></li></ul><ol><li><p>编辑/etc/profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果不使用sudo命令，打开的文件是只读方式</span></span><br><span class="line">[caixianquan@localhost module]$ sudo vim /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>往profile文件追加内容：【export为设置全局变量关键字，即当前shell和子shell都有这个文件】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>执行环境配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost module]$ source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>查看配置状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost module]$ echo $JAVA_HOME</span><br><span class="line">/opt/module/jdk1.8.0_144</span><br><span class="line">[caixianquan@localhost module]$ java -version</span><br><span class="line">java version &quot;1.8.0_144&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_144-b01)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h1><h2 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h2></li><li><p>同上述配置Java环境变量，追加内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-2.7.2</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li><li><p>查看环境配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost module]$ hadoop version</span><br><span class="line">Hadoop 2.7.2</span><br><span class="line">Subversion Unknown -r Unknown</span><br><span class="line">Compiled by root on 2017-05-22T10:49Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum d0fda26633fa762bff87ec759ebe689c</span><br><span class="line">This command was run using /opt/module/hadoop-2.7.2/share/hadoop/common/hadoop-common-2.7.2.jar</span><br></pre></td></tr></table></figure><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="集群部署规划"><a href="#集群部署规划" class="headerlink" title="集群部署规划"></a>集群部署规划</h3></li></ol><p><img src="5%E3%80%81%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E8%A7%84%E5%88%92.png" alt="集群部署规划"></p><ul><li>DN和NM需要在同一个节点上，DN管理节点上的磁盘，NM管理节点上的CPU和内存等资源</li><li>一般集群的最小规模需要六台，RM、2NN、NN各自一台，DN和NM分布在三台。</li></ul><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><ol><li>核心配置文件： 配置core-site.xml<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在该文件中编写如下配置</span><br><span class="line">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hdfs://hadoop102:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/opt/module/hadoop-2.7.2/data/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>HDFS配置文件<ul><li>配置hadoop-env.sh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li>配置hdfs-site.xml<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在该文件中编写如下配置</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hadoop104:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>YARN配置文件<ul><li>配置yarn-env.sh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li>配置yarn-site.xml<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在该文件中增加如下配置</span><br><span class="line">&lt;!-- Reducer获取数据的方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop103&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>MapReduce配置文件<ul><li>配置mapred-env.sh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li>配置mapred-site.xml<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">[atguigu@hadoop102 hadoop]$ vi mapred-site.xml</span><br><span class="line">在该文件中增加如下配置</span><br><span class="line">&lt;!-- 指定MR运行在Yarn上 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="在集群上分发配置好的Hadoop配置文件"><a href="#在集群上分发配置好的Hadoop配置文件" class="headerlink" title="在集群上分发配置好的Hadoop配置文件"></a>在集群上分发配置好的Hadoop配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost hadoop-2.7.2]$ xsync etc</span><br></pre></td></tr></table></figure><h3 id="查看文件分发情况"><a href="#查看文件分发情况" class="headerlink" title="查看文件分发情况"></a>查看文件分发情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop103 hadoop]$ cat /opt/module/hadoop-2.7.2/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><h3 id="配置历史服务器【先关闭集群】"><a href="#配置历史服务器【先关闭集群】" class="headerlink" title="配置历史服务器【先关闭集群】"></a>配置历史服务器【先关闭集群】</h3>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</li></ul></li></ol><ul><li><p>配置yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在该文件里面增加如下配置。</span><br><span class="line">&lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.log.server.url&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;http://hadoop104:19888/jobhistory/logs&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置mapred-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在该文件里面增加如下配置。</span><br><span class="line">&lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop104:10020&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 历史服务器web端地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop104:19888&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost etc]$ xsync hadoop/</span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器，在hadoop104上启动【先重启集群后再启动历史服务器】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop104 hadoop-2.7.2]$ sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></li><li><p>查看历史服务器是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost hadoop-2.7.2]$ jps</span><br><span class="line">14930 NodeManager</span><br><span class="line">14710 DataNode</span><br><span class="line">15097 JobHistoryServer</span><br><span class="line">15145 Jps</span><br><span class="line">14813 SecondaryNameNode</span><br></pre></td></tr></table></figure></li><li><p>查看JobHistory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.104:19888/jobhistory</span><br></pre></td></tr></table></figure><h3 id="配置日志的聚集【先关闭集群】"><a href="#配置日志的聚集【先关闭集群】" class="headerlink" title="配置日志的聚集【先关闭集群】"></a>配置日志的聚集【先关闭集群】</h3><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。<br>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。<br>注意：开启日志聚集功能，需要重新启动NodeManager 、ResourceManager和HistoryManager。<br>开启日志聚集功能具体步骤如下：</p></li><li><p>配置yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 hadoop]$ vi yarn-site.xml</span><br></pre></td></tr></table></figure><p>在该文件里面增加如下配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 日志保留时间设置7天 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">&lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@localhost etc]$ xsync hadoop/</span><br></pre></td></tr></table></figure></li><li><p>删除HDFS上已经存在的输出文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 hadoop-2.7.2]$ bin/hdfs dfs -rm -R /user/atguigu/output</span><br></pre></td></tr></table></figure></li><li><p>执行WordCount程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 hadoop-2.7.2]$ hadoop jar</span><br><span class="line"> share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/atguigu/input /user/atguigu/output</span><br></pre></td></tr></table></figure></li><li><p>查看日志，如图2-37，2-38，2-39所示<br><a href="http://192.168.56.104:19888/jobhistory">http://192.168.56.104:19888/jobhistory</a></p></li></ul><h3 id="集群单点启动"><a href="#集群单点启动" class="headerlink" title="集群单点启动"></a>集群单点启动</h3><p><font color=red size=3><strong><em>如果集群是第一次启动，需要格式化NameNode</em></strong></font></p><div class="note primary flat"><p>注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据，注意是所有节点的data和log数据</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hdfs namenode -format</span><br></pre></td></tr></table></figure><ul><li>启动集群<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在hadoop102上启动NameNode</span></span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop-daemon.sh start namenode</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ jps</span><br><span class="line">3461 NameNode</span><br><span class="line"><span class="meta">#</span><span class="bash">在hadoop102、hadoop103以及hadoop104上分别启动DataNode</span></span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop-daemon.sh start datanode</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ jps</span><br><span class="line">3461 NameNode</span><br><span class="line">3608 Jps</span><br><span class="line">3561 DataNode</span><br><span class="line">[atguigu@hadoop103 hadoop-2.7.2]$ hadoop-daemon.sh start datanode</span><br><span class="line">[atguigu@hadoop103 hadoop-2.7.2]$ jps</span><br><span class="line">3190 DataNode</span><br><span class="line">3279 Jps</span><br><span class="line">[atguigu@hadoop104 hadoop-2.7.2]$ hadoop-daemon.sh start datanode</span><br><span class="line">[atguigu@hadoop104 hadoop-2.7.2]$ jps</span><br><span class="line">3237 Jps</span><br><span class="line">3163 DataNode</span><br></pre></td></tr></table></figure><h3 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h3></li></ul><ol><li><p>配置slaves，配置hadoop所有的从主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 hadoop-2.7.2]$ vim etc/hadoop/slaves</span><br><span class="line">删除localhost</span><br><span class="line">在该文件中增加如下内容：</span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</p></div></li><li><p>同步所有节点配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 hadoop]$ xsync slaves</span><br></pre></td></tr></table></figure></li><li><p>启动集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 hadoop-2.7.2]$ sbin/start-dfs.sh</span><br><span class="line">[caixianquan@hadoop102 hadoop-2.7.2]$ jps</span><br><span class="line">4166 NameNode</span><br><span class="line">4482 Jps</span><br><span class="line">4263 DataNode</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[caixianquan@hadoop103 hadoop-2.7.2]$ jps</span><br><span class="line">3218 DataNode</span><br><span class="line">3288 Jps</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[caixianquan@hadoop104 hadoop-2.7.2]$ jps</span><br><span class="line">3221 DataNode</span><br><span class="line">3283 SecondaryNameNode</span><br><span class="line">3364 Jps</span><br></pre></td></tr></table></figure></li><li><p>启动YARN</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop103 hadoop-2.7.2]$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。</p></div></li></ol><h3 id="Web端查看SecondaryNameNode"><a href="#Web端查看SecondaryNameNode" class="headerlink" title="Web端查看SecondaryNameNode"></a>Web端查看SecondaryNameNode</h3><p>（a）浏览器中输入：<a href="http://192.168.56.104:50090/status.html">http://192.168.56.104:50090/status.html</a><br>（b）查看SecondaryNameNode信息，如图所示。<br><img src="6%E3%80%81%E6%9F%A5%E7%9C%8BSecondaryNameNode%E4%BF%A1%E6%81%AF.png" alt="查看SecondaryNameNode信息"></p><p><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"><br><img src="example.png" alt="example"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据学习 </category>
          
          <category> 大数据集群环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> Hadoop 2.7 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在虚拟机中安装CentOS(一)</title>
      <link href="/hexo/2020/10/02/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85CentOS-%E4%B8%80/"/>
      <url>/hexo/2020/10/02/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85CentOS-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h1><ul><li>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li></ul><p>直接安装即可</p><h1 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h1><ol><li><p>点击新建，填写虚拟机名称和指定文件夹<br><img src="1%E3%80%81%E5%A1%AB%E5%86%99%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8D%E7%A7%B0.png" alt="填写虚拟机名称"></p></li><li><p>指定内存大小为4096MB，创建虚拟硬盘</p><img src="/hexo/2020/10/02/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85CentOS-%E4%B8%80/2%E3%80%81%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98.png" class=""><img src="/hexo/2020/10/02/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85CentOS-%E4%B8%80/3%E3%80%81%E7%8E%B0%E5%9C%A8%E5%88%9B%E5%BB%BA%E7%A1%AC%E7%9B%98.png" class=""></li></ol><ul><li>默认类型VDI即可<br><img src="4%E3%80%81%E9%BB%98%E8%AE%A4%E7%B1%BB%E5%9E%8B.png" alt="默认类型"></li><li>动态分配硬盘大小<br><img src="5%E3%80%81%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E7%A1%AC%E7%9B%98%E5%A4%A7%E5%B0%8F.png" alt="动态分配硬盘大小"></li></ul><ol start="3"><li>指定虚拟硬盘文件存放位置和大小<br><img src="6%E3%80%81%E6%8C%87%E5%AE%9A%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE%E5%92%8C%E5%A4%A7%E5%B0%8F.png" alt="指定虚拟硬盘文件存放位置和大小"></li><li>启动虚拟机，指定光驱存放位置，开始安装CentOS7系统<br><img src="7%E3%80%81%E6%8C%87%E5%AE%9A%E5%85%89%E9%A9%B1.png" alt="指定光驱"></li></ol><h2 id="创建虚拟机时报错问题"><a href="#创建虚拟机时报错问题" class="headerlink" title="创建虚拟机时报错问题"></a>创建虚拟机时报错问题</h2><p><img src="8%E3%80%81%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.png" alt="创建虚拟机时报错问题"></p><div class="note warning flat"><p>由于Hyper-V 虚拟化在 windows 中已经被启用，故需要关闭Hyper-V，直接在控制面板中关闭重启电脑即可</p></div><h1 id="安装CentOS系统"><a href="#安装CentOS系统" class="headerlink" title="安装CentOS系统"></a>安装CentOS系统</h1><ol><li>在进入系统引导后，会进入文字界面，选择install CentOS7<br><font color=red size=3><strong>（用键盘上的方向键↑、↓来选择要执行的操作，白色字体表示选中，按下回车，进入下一步操作）</strong></font><br><img src="9%E3%80%81%E8%BF%9B%E5%85%A5%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A2.png" alt="进入安装界面"></li><li>按回车执行安装过程<br><img src="10%E3%80%81%E6%89%A7%E8%A1%8C%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png" alt="执行安装过程"></li><li>选择安装的语言<br><img src="11%E3%80%81%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%9A%84%E8%AF%AD%E8%A8%80.png" alt="选择安装的语言"></li><li>设置安装类型<br><img src="12%E3%80%81%E8%AE%BE%E7%BD%AE%E5%AE%89%E8%A3%85%E7%B1%BB%E5%9E%8B.png" alt="设置安装类型"></li><li>点击“软件选择”，默认是最小安装，只有系统功能，完全使用命令行操作<br><img src="13%E3%80%81%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A9.png" alt="软件选择"></li><li>按照下图选择，点击上方“完成”返回到前一个页面即可，点击“开始安装”开始安装服务器<br><img src="14%E3%80%81%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85.png" alt="开始安装"></li><li>设置用户密码<br><img src="15%E3%80%81%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81.png" alt="设置用户密码"></li><li>成功进入CentOS系统，默认选择的是“汉语”，直接“前进”即可<br><img src="16%E3%80%81%E9%80%89%E6%8B%A9%E8%AF%AD%E8%A8%80.png" alt="选择语言"></li><li>选择输入法为“汉语(Intelligent Pinyin)”,汉语智能拼音输入法，否则无法输入汉字</li><li>关闭定位（默认是打开的）<br><img src="17%E3%80%81%E5%85%B3%E9%97%AD%E5%AE%9A%E4%BD%8D.png" alt="关闭定位"><br><img src="18%E3%80%81%E4%BD%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1.png" alt="位置服务"></li><li>时区定位北京，跳过登录账号<br><img src="19%E3%80%81%E5%AE%9A%E4%BD%8D%E5%8C%97%E4%BA%AC.png" alt="定位北京"><br><img src="20%E3%80%81%E8%B7%B3%E8%BF%87%E5%9C%A8%E7%BA%BF%E8%B4%A6%E5%8F%B7.png" alt="跳过在线账号"></li></ol><h1 id="使用复制创建另外两个虚拟机"><a href="#使用复制创建另外两个虚拟机" class="headerlink" title="使用复制创建另外两个虚拟机"></a>使用复制创建另外两个虚拟机</h1><ol><li><p>选择创建好的虚拟机右键复制，如下，修改虚拟机名称，存储位置、MAC地址初始化如下图所示<br><img src="21%E3%80%81%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="复制虚拟机"></p></li><li><p>选择完全复制，就可以得到另外两个虚拟机<br><img src="22%E3%80%81%E5%AE%8C%E5%85%A8%E5%A4%8D%E5%88%B6.png" alt="完全复制"><br><img src="23%E3%80%81%E4%BA%A7%E7%94%9F%E4%B8%A4%E4%B8%AA%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="产生两个虚拟机"></p></li></ol><h2 id="修改Slave1和Slave2"><a href="#修改Slave1和Slave2" class="headerlink" title="修改Slave1和Slave2"></a>修改Slave1和Slave2</h2><ol><li>修改内存大小为2048MB<br><img src="24%E3%80%81%E4%BF%AE%E6%94%B9%E5%86%85%E5%AD%98.png" alt="修改内存"></li><li>修改用户名分别为Slave1和Slave2</li></ol><ul><li>举例Slave1：</li><li>以root身份进入系统<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod  -l  新用户名  -d  /home/新用户名  -m  老用户名   （英文L）</span><br><span class="line">如：usermod -l caixianquan-Slave1 -d /home/caixianquan-Slave1 -m caixianquan-Master</span><br></pre></td></tr></table></figure>此时登录界面还是caixianquan-Master显示的用户名，这时登录这个普通用户，在设置–&gt;详细信息–&gt;用户里面的账号修改用户名即可，如示图<br><img src="25%E3%80%81%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="修改登录界面用户名"></li></ul><h1 id="主机与虚拟机实现复制粘贴"><a href="#主机与虚拟机实现复制粘贴" class="headerlink" title="主机与虚拟机实现复制粘贴"></a>主机与虚拟机实现复制粘贴</h1><ol><li>打开虚拟机，菜单栏中点击设备，选择共享文件夹，共享粘贴板，拖动都选择双向，然后点击安装增强功能，出现如下问题</li></ol><p><img src="26%E3%80%81%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.png" alt="安装增强功能出现问题"></p><div class="note primary flat"><p>解决方法：进入系统在侧边找到如图加载的虚拟光驱，右击，点击弹出，然后就可正常安装增强功能了</p></div><p><img src="27%E3%80%81%E5%BC%B9%E5%87%BA%E8%99%9A%E6%8B%9F%E5%85%89%E9%A9%B1.png" alt="弹出虚拟光驱"></p><ol start="2"><li>安装完成之后重启即可使用增强功能</li></ol><h1 id="虚拟机上网，相互之间可以ping通，和主机ping通"><a href="#虚拟机上网，相互之间可以ping通，和主机ping通" class="headerlink" title="虚拟机上网，相互之间可以ping通，和主机ping通"></a>虚拟机上网，相互之间可以ping通，和主机ping通</h1><div class="note primary flat"><p><font color=red size=3><strong>需要两个网卡才可以同时上网和ping通主机，一个使用NAT模式，一个使用Host-only模式【按照下图可以通过设置直接使用Host-only实现包含NAT模式中的所有功能，未测试】</strong></font><br><font color=red size=3><strong>或者直接使用桥接模式，但需要独立的真实IP</strong></font></p></div><ol><li>VirtualBox中有4中网络连接方式:<ul><li>NAT </li><li>Bridged Adapter</li><li>Internal </li><li>Host-only Adapter<br><img src="28%E3%80%81%E5%9B%9B%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.png" alt="四种网络连接方式"><br>参考地址：<a href="https://blog.csdn.net/java_zjh/article/details/81147572">https://blog.csdn.net/java_zjh/article/details/81147572</a></li></ul></li></ol><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><ol><li>NAT：Network Address Translation，网络地址转换</li><li>NAT模式是最简单的实现虚拟机上网的方式，你可以这样理解：<ul><li>Guest访问网络的所有数据都是由主机提供的，Guest并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Guest的存在。</li><li>Guest可以访问主机能访问到的所有网络，但是对于主机以及主机网络上的其他机器，Guest又是不可见的，甚至主机也访问不到Guest。</li></ul></li><li>虚拟机与主机的关系：只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。</li><li>虚拟机与网络中其他主机的关系：只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。</li><li>虚拟机与虚拟机的关系：相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。</li></ol><h2 id="Bridged-Adapter（网桥模式）"><a href="#Bridged-Adapter（网桥模式）" class="headerlink" title="Bridged Adapter（网桥模式）"></a>Bridged Adapter（网桥模式）</h2><ul><li>网桥模式，你可以这样理解：</li><li>它是通过主机网卡，架设了一条桥，直接连入到网络中了。因此，它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。</li><li>网桥模式下的虚拟机，你把它认为是真实计算机就行了。</li><li>虚拟机与主机的关系：可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。</li><li>虚拟机于网络中其他主机的关系：可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。</li><li>虚拟机与虚拟机的关系：可以相互访问，原因同上。</li></ul><h2 id="Internal（内网模式）"><a href="#Internal（内网模式）" class="headerlink" title="Internal（内网模式）"></a>Internal（内网模式）</h2><ul><li>内网模式，顾名思义就是内部网络模式：</li><li>虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。</li><li>虚拟机与主机的关系：不能相互访问，彼此不属于同一个网络，无法相互访问。</li><li>虚拟机与网络中其他主机的关系：不能相互访问，理由同上。</li><li>虚拟机与虚拟机的关系：可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。如上配置图中，名称为intnet。</li></ul><h2 id="Host-only-Adapter（主机模式）"><a href="#Host-only-Adapter（主机模式）" class="headerlink" title="Host-only Adapter（主机模式）"></a>Host-only Adapter（主机模式）</h2><ul><li>主机模式，这是一种比较复杂的模式，需要有比较扎实的网络基础知识才能玩转。可以说前面几种模式所实现的功能，在这种模式下，通过虚拟机及网卡的设置都可以被实现。</li><li>我们可以理解为Guest在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，我们可以通过设置这张网卡来实现上网及其他很多功能，比如（网卡共享、网卡桥接等）。</li><li>虚拟机与主机的关系：默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X 子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。</li><li>虚拟机与网络主机的关系：默认不能相互访问，原因同上，通过设置，可以实现相互访问。</li><li>虚拟机与虚拟机的关系：默认可以相互访问，都是同处于一个网段。</li></ul><h2 id="NAT模式实现"><a href="#NAT模式实现" class="headerlink" title="NAT模式实现"></a>NAT模式实现</h2><ol><li>安装完 CentOS 7 之后，关闭三个虚拟机系统</li><li>【全局设置网卡】在 VirtualBox 主控制界面点击 【管理】–【全局设定】–【网络】–【添加新NAT网络】<br><img src="29%E3%80%81%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%8D%A1.png" alt="全局设置网卡"></li><li>在弹出的对话框中，设置【网络CIDR】为【192.168.100.0/24】，【确定】<br><img src="30%E3%80%81%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9CCIDR.png" alt="设置网络CIDR"></li><li>【单独对每一个虚拟机设置】在管理界面点击【设置】–【网络】–【网卡1】，【连接方式】选择【NAT网络】，【界面名称】选【NATNetwork】，【确定】<br><img src="31%E3%80%81%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="单独设置虚拟机"><br><img src="32%E3%80%81%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="单独设置虚拟机"><br><img src="33%E3%80%81%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="单独设置虚拟机"></li><li>【启动】，登进系统，运行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span></span><br></pre></td></tr></table></figure></li><li>修改ifcfg-eth0配置文件：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">需要的信息：</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">IPADDR=192.168.100.10  #Master</span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.100.20  <span class="comment">#Slave1</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.100.30  <span class="comment">#Slave2</span></span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.100.1  #默认网关，在网段为192.168.100.0/24的时候</span><br><span class="line">DNS1=114.114.114.114 #宿主主机的DNS信息</span><br></pre></td></tr></table></figure></li><li>重启网络服务：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> service network restart</span></span><br></pre></td></tr></table></figure></li><li>此时可以正常联网了<h2 id="Host-only-Adapter（主机模式）-1"><a href="#Host-only-Adapter（主机模式）-1" class="headerlink" title="Host-only Adapter（主机模式）"></a>Host-only Adapter（主机模式）</h2></li><li>关闭系统，在【管理】–【全局设定】–【网络】中，应该能看到【仅主机（Host-Only）网络】的选项卡。在安装完 VirtualBox后，在计算机的【网络和共享中心】–【更改适配器设置】中可以看到【VirtualBox Host-Only Network】：<br><img src="34%E3%80%81%E6%9B%B4%E6%94%B9%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="更改适配器设置"></li><li>回到 VirtualBox，点击菜单栏上的管理按键，然后选择主机网络管理器，可以看到：<br><img src="35%E3%80%81%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="主机网络管理器"></li><li>对每一台虚拟机，【设置】–【网络】–【网卡2】–【启用网络连接】，【连接方式】选【仅主机（Host-Only）网络】：<br><img src="36%E3%80%81%E5%AF%B9%E6%AF%8F%E4%B8%80%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E8%A1%8C%E8%AE%BE%E7%BD%AE.png" alt="对每一台虚拟机进行设置"></li><li>开机，执行如以下命令<br><font color=red size=3><strong>（注意：在CentOS7中的网卡配置文件有所改变，看下面的命令）</strong></font><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp ifcfg-enp0s3 ifcfg-enp0s8  <span class="comment">#将原先NAT模式网卡复制一份位ifcfg-enp0s8</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi ifcfg-enp0s8</span></span><br></pre></td></tr></table></figure></li><li>删除【HWADDR】行，删除【UUID】行，添加【IPADDR】和【NETMASK】，修改【DEVICE】为【eth1】，【BOOTPROTO】为【static】：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s8</span><br><span class="line">DEVICE=enp0s8</span><br><span class="line">ONBOOT=yes</span><br><span class="line"> </span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">IPADDR=192.168.56.30  #Slave2</span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.56.10   <span class="comment">#Master</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.56.20   <span class="comment">#Slave1</span></span></span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></li><li>重启网络服务，即可与主机互相ping通<div class="note primary flat"><p>在公司虚拟网中或者家庭网中容易实现</p></div></li></ol><h2 id="桥接模式【需要独立ip】"><a href="#桥接模式【需要独立ip】" class="headerlink" title="桥接模式【需要独立ip】"></a>桥接模式【需要独立ip】</h2><ol><li>由于桥接模式能够让虚拟机共享局域网，方便自己可以用一台电脑启动集群，另一台测试和做笔记等，故在此记录桥接模式配置的过程</li></ol><ul><li>参考地址：<a href="https://blog.csdn.net/java_zjh/article/details/81147572">配置virtualbox虚拟机Linux系统桥接模式上网</a></li></ul><ol start="2"><li><p>关闭系统，在【管理】–【主机网络管理器】中创建一个VirtualBox Host-Only Ethernet Adapter网卡【如果本地连接中存在该网卡，则不必添加】，如图所示：<br><img src="37%E3%80%81%E6%B7%BB%E5%8A%A0%E7%BD%91%E5%8D%A1.png" alt="添加网卡"></p></li><li><p>在本地网络连接中可以看到添加了一块网卡<br><img src="38%E3%80%81%E6%9F%A5%E7%9C%8B%E6%B7%BB%E5%8A%A0%E7%9A%84%E7%BD%91%E5%8D%A1.png" alt="查看添加的网卡"></p></li><li><p>点击本地连接的属性，看是否出现virtualbox bridged networking dirver 选项，如果未出现，点击安装（应该在服务选项中），并且选中，点击确定；<br><img src="39%E3%80%81%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8.png" alt="添加驱动"></p></li><li><p>对VirtualBox Host-Only Network网卡进行信息配置<br><img src="40%E3%80%81%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF.png" alt="配置网卡信息"></p></li><li><p>对每一台虚拟机，【设置】–【网络】–【网卡1】–【启用网络连接】，【连接方式】选【桥接网卡】：<br><img src="41%E3%80%81%E5%90%AF%E7%94%A8%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="启用桥接模式"></p></li><li><p>启动系统，修改linux中的网卡信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=yes</span><br><span class="line"> </span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">IPADDR=192.168.2.30  #Slave2</span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.2.10    <span class="comment">#Master</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">IPADDR=192.168.2.20    <span class="comment">#Slave1</span></span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.2.1 #根据本机物理网卡的网关</span><br><span class="line">DNS1=144.144.144.144</span><br></pre></td></tr></table></figure><p><font color=red size=3><strong>注意如果在虚拟机管理器设置中没有启动虚拟网卡或者没有添加网卡，则在linux中的网卡 文件夹中的无效网卡信息文件要删除</strong></font></p></li><li><p>重启网卡服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@master share_folder]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  确定  ]</span><br><span class="line">[root@master share_folder]# ifconfig</span><br><span class="line">enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.2.30  netmask 255.255.255.0  broadcast 192.168.2.255</span><br><span class="line">        inet6 fe80::a00:27ff:fee0:88cc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:e0:88:cc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 3597  bytes 243752 (238.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 82  bytes 9939 (9.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">【测试网络连接】</span><br><span class="line">【ping通网络】</span><br><span class="line">[root@master share_folder]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (14.215.177.39) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=1 ttl=57 time=19.4 ms</span><br><span class="line">64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=2 ttl=57 time=18.7 ms</span><br><span class="line">64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=3 ttl=57 time=52.0 ms</span><br><span class="line">^C</span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 18.730/30.074/52.008/15.512 ms</span><br><span class="line">【ping通过宿主主机】</span><br><span class="line">[root@master share_folder]# ping 192.168.2.172</span><br><span class="line">PING 192.168.2.172 (192.168.2.172) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.2.172: icmp_seq=1 ttl=64 time=0.403 ms</span><br><span class="line">64 bytes from 192.168.2.172: icmp_seq=2 ttl=64 time=0.277 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.2.172 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.277/0.340/0.403/0.063 ms</span><br><span class="line">【ping通局域网内的其他主机】</span><br><span class="line">[root@master share_folder]# ping 192.168.2.124</span><br><span class="line">PING 192.168.2.124 (192.168.2.124) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.2.124: icmp_seq=1 ttl=64 time=237 ms</span><br><span class="line">64 bytes from 192.168.2.124: icmp_seq=2 ttl=64 time=67.9 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.2.124 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 67.903/152.540/237.178/84.638 ms</span><br></pre></td></tr></table></figure><h2 id="主机模式-共享网络"><a href="#主机模式-共享网络" class="headerlink" title="主机模式+共享网络"></a>主机模式+共享网络</h2><div class="note primary flat"><p><font color=red size=3><strong>访问外网不太稳定，推荐还是使用Host-Only+NAT模式</strong></font></p></div><p><del>参考地址[已失效]：<a href="https://blog.csdn.net/sunweixiang1002/article/details/84679928">VMware虚拟机三种网络模式详解 ———Host-Only（仅主机模式）</a></del></p></li><li><p>主机模式配置和上述相同，这里配置共享网络<br><img src="42%E3%80%81%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png" alt="共享网络设置"></p></li><li><p>可以看到上图有一个提示，强制将VMware Network Adapter VMnet1的ip设置成192.168.137.1<br><img src="43%E3%80%81%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8DIP.png" alt="自动分配IP"></p></li><li><p>将虚拟机重新设置IP,重启网卡服务<br><font color=red size=3><strong>要设置网关和DNS，与VMware Network Adapter VMnet1的IP相同</strong></font><br><img src="44%E3%80%81%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BAip.png" alt="重新设置虚拟机ip"><br><img src="45%E3%80%81%E8%83%BD%E5%A4%9F%E4%B8%8E%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E5%B9%B6%E4%B8%94ping%E9%80%9A%E5%A4%96%E7%BD%91.png" alt="能够与主机通信并且ping通外网"></p></li></ol><div class="note danger flat"><p>如果还是无法ping通外网，需要查看：管理——&gt;主机网络管理器中的虚拟网卡的ip地址设置<br><img src="46%E3%80%81%E6%A3%80%E6%9F%A5%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84ip.png" alt="检查主机网络管理器中的ip"><br>该ip地址必须与当前主机的虚拟网卡的主机是一样的，由于是共享网络，所以虚拟网卡会默认分配到192.168.137.1</p></div><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><div class="note primary flat"><p>关闭防火墙才能正常使用SSH连接，也可以添加规则（单机环境，只是实验，直接关闭容易点）</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看防火墙状态</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span></span><br><span class="line">sudo service iptables stop</span><br><span class="line"><span class="meta">#</span><span class="bash">查看防火墙开机启动状态</span></span><br><span class="line">chkconfig iptables --list</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙开机启动</span></span><br><span class="line">sudo chkconfig iptables off</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>CentOS下的防火墙</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure><h1 id="修改主机名-永久"><a href="#修改主机名-永久" class="headerlink" title="修改主机名(永久)"></a>修改主机名(永久)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;newhostname&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据学习 </category>
          
          <category> 大数据集群环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> VirtualBox </tag>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git知识点及问题收集</title>
      <link href="/hexo/2020/08/16/Git%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
      <url>/hexo/2020/08/16/Git%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="Git拉取指定远程分支"><a href="#Git拉取指定远程分支" class="headerlink" title="Git拉取指定远程分支"></a>Git拉取指定远程分支</h1><div class="note primary flat"><p>git clone -b 分支名称 代码仓库地址</p></div><h1 id="Git重命名分支"><a href="#Git重命名分支" class="headerlink" title="Git重命名分支"></a>Git重命名分支</h1><div class="note primary flat"><p>git branch -m  旧分支名称 新分支名称</p></div><h1 id="Git查看远程仓库路径"><a href="#Git查看远程仓库路径" class="headerlink" title="Git查看远程仓库路径"></a>Git查看远程仓库路径</h1><div class="note primary flat"><p>git remove -v</p></div><h1 id="Git添加远程仓库"><a href="#Git添加远程仓库" class="headerlink" title="Git添加远程仓库"></a>Git添加远程仓库</h1><div class="note primary flat"><p>git remote add origin 仓库地址</p></div><h1 id="Git移除远程仓库【更换仓库】"><a href="#Git移除远程仓库【更换仓库】" class="headerlink" title="Git移除远程仓库【更换仓库】"></a>Git移除远程仓库【更换仓库】</h1><div class="note primary flat"><ul><li>移除仓库<br>git remote rm 远程仓库别名（如：origin）</li></ul></div><h1 id="服务端仓库无法即时检出更新"><a href="#服务端仓库无法即时检出更新" class="headerlink" title="服务端仓库无法即时检出更新"></a>服务端仓库无法即时检出更新</h1><p>参考地址：<a href="https://blog.csdn.net/sinat_34349564/article/details/52486886">对于git init 初始化服务端仓库无法即时检出更新的问题</a></p><p><font color=red size=3><strong>提示：使用的是新建一个post-receive文件</strong></font><br>之前用git init初始化服务端的git仓库，在本地推送更新后发现一个问题，当我在本地推送更新到远程仓库后，我在远程仓库也就是服务端查看文件，发现文件并没有更改，然后我git status了一下，发现推送的更新在暂存区，需要我检出更新git checkout -f 或着释放暂存区的更新git stash一下，这样每次更新我都要在服务器端进行检出更新的操作，其实更新已经推送到服务端远程仓库了，如果我将更新推送到另一个分支，然后再服务器端切换到对应的分支，也是可以看到更新的。那么怎么将推送到当前分支的更新马上检出而不用自己在服务器端进行检出操作呢。这里可以使用hooks钩子来设置。<br>先进入到仓库的.git/hooks/文件目录下，然后新建一个post-receive文件，并写入配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# cd /home/caixianquan/repos/blog.git/hooks/</span><br><span class="line">[root@www hooks]# touch post-receive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">git --work-tree=/opt/blog --git-dir=/home/caixianquan/repos/blog.git checkout -f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者将hooks文件目录下的post-update.sample文件更名为post-update，然后打开文件，<br>在exec git update-server-info这一行代码前面加上一个# 号，即改成</p><div class="note primary flat"><p>#exec git update-server-info</p></div><p>然后再在下面加上</p><div class="note primary flat"><p>unset GIT_DIR<br>cd ..<br>git checkout -f</p></div><p>保存一下<br>这样我们在本地再推送一次更新，可以在服务端查看，发现文件已经更新了，不用再手动检出更新了。</p><h1 id="git无法push某个文件夹且没提示错误"><a href="#git无法push某个文件夹且没提示错误" class="headerlink" title="git无法push某个文件夹且没提示错误"></a>git无法push某个文件夹且没提示错误</h1><p>在commit、push hexo源文件时发现一切正常，登到服务器查看却缺少了themes下的Butterfly主题的资源，这个是从git上clone下来的，其中已经删除了.git和.gitignore、.github等类似文件夹。但还是无法push上去，可以尝试一下命令：</p><div class="note primary flat"><p>git rm –cached directory<br>git add directory</p></div><p>注：directory为子文件夹的路径。【相对路径或绝对路径】<br>该命令的directory必须是未push上去的文件夹，这里的示例为：themes/Butterfly.<br>之后使用git status就可以看到未跟踪的文件夹了。</p><div class="note info flat"><p>但是执行git rm –cached directory时，提示</p><p>fatal: Unable to create ‘xx/.git/index.lock’: File exists.<br>执行<code>rm -f xx/.git/index.lock</code>后解决</p><p>参考地址：<a href="https://www.cnblogs.com/howdop/p/5583342.html">git 无法添加文件夹下文件</a></p></div><div class="note warning flat"><p>注：如果没有删除掉子git仓库中的.git等文件夹，在push时会报如下错误：<br><img src="1%E3%80%81git%E4%BB%93%E5%BA%93%E5%B5%8C%E5%A5%97git%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99.png" alt="git仓库嵌套git仓库报错"></p></div><h1 id="git强制拉取并覆盖本地代码"><a href="#git强制拉取并覆盖本地代码" class="headerlink" title="git强制拉取并覆盖本地代码"></a>git强制拉取并覆盖本地代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="撤销本地修改【未提交】"><a href="#撤销本地修改【未提交】" class="headerlink" title="撤销本地修改【未提交】"></a>撤销本地修改【未提交】</h1><p>如果想要撤销此次本地修改并未提交，并且要恢复到上一次提交后的状态，包括工作区<br>如果直接<code>git reset 版本号</code>恢复上一次提交，这会报如下错误：<br><img src="2%E3%80%81%E6%81%A2%E5%A4%8D%E4%B8%8A%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4.png" alt="恢复上一次提交"><br>这里是删除了这些文件，前面的D代表删除操作<br>需要如下使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><p>对删除文件进行状态监控，再恢复上次提交</p><h1 id="拒绝push"><a href="#拒绝push" class="headerlink" title="拒绝push"></a>拒绝push</h1><p><img src="3%E3%80%81%E6%8B%92%E7%BB%9Dpush.png" alt="拒绝push"><br>这是由于git默认拒绝了push操作，需要进行设置，修改【在服务器上的git仓库中】.git/config文件后面添加如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[receive]</span><br><span class="line">    denyCurrentBranch = ignore</span><br></pre></td></tr></table></figure><p>重新git push即可</p>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据之SpakStreaming(四)</title>
      <link href="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpakStreaming-%E5%9B%9B/"/>
      <url>/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpakStreaming-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章标题/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据之SpakSql(三)</title>
      <link href="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpakSql-%E4%B8%89/"/>
      <url>/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpakSql-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章标题/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据之SparkCore(二)</title>
      <link href="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSparkCore-%E4%BA%8C/"/>
      <url>/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSparkCore-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章标题/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据之Spark基础解析(一)</title>
      <link href="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/"/>
      <url>/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="Spark概述"><a href="#Spark概述" class="headerlink" title="Spark概述"></a>Spark概述</h1><h2 id="什么是Spark"><a href="#什么是Spark" class="headerlink" title="什么是Spark"></a>什么是Spark</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Spark是一种基于<font color=red size=3><strong>内存</strong></font>的快速、通用、可扩展的大数据分析引擎。</li></ul><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p><img src="1%E3%80%81Hadoop%E5%8E%86%E5%8F%B2.png" alt="Hadoop历史"></p><ul><li>MR的缺点．</li></ul><ol><li>mr基于数据集的计算，所以面向数据</li><li>基本运算规则从存储介质中获取（采集）数据，然后进行计算，最后将结果存储到介质中，所以主要应用于一次性计算，不适合于数据挖掘和机器学习这样的迭代计算和图形挖掘计算。</li><li>MR基于文件存储介质的操作，所以性能非常的慢</li><li>MR和hadoop紧密耦合在一起，无法动态替换</li></ol><ul><li>2009年诞生于加州大学伯克利分校AMPLab，项目采用<font color=red size=3><strong>Scala编写</strong></font>。</li><li>2010年开源;</li><li>2013年6月成为Apache孵化项目(基于Hadoop问题，将资源和任务调度分开)</li><li>2014年2月成为Apache顶级项目。<br><img src="2%E3%80%81Spark%E5%8E%86%E5%8F%B2.png" alt="Spark历史"></li><li>Yarn解决了MR和hadoop的耦合性过高问题，将MR作为yarn上的一个热插拔的组件。可以与其他组件一起使用。</li><li>Spark将资源与计算分开来，降低耦合性，而没考虑是否能够替换组件问题。Yarn可以支持Spark的计算。</li><li>当使用Yarn和Spark时，master和worker就使用Yarn上的RM和NM</li><li>Yarn是为了其他框架也可以使用，所以用了container，兼容性更好</li><li>spark的资源调度框架就是为了自己使用，所以没有必要用container，效率更高</li><li>一般都是使用HDFS作为存储，Yarn作为资源的管理和调度，spark作为计算</li></ul><h3 id="Hadoop-MR框架和Spark框架"><a href="#Hadoop-MR框架和Spark框架" class="headerlink" title="Hadoop MR框架和Spark框架"></a>Hadoop MR框架和Spark框架</h3><ul><li>spark框架中间结果不落盘，但是shuffle操作还是会落盘</li><li>支持迭代式计算，图形计算<br>![spark框架和Hadoop MR框架](36、spark框架和Hadoop MR框架.png)</li></ul><h2 id="Spark内置模块"><a href="#Spark内置模块" class="headerlink" title="Spark内置模块"></a>Spark内置模块</h2><p><img src="3%E3%80%81spark%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97.png" alt="spark内置模块"></p><ul><li><p><font color=red size=3><strong>Spark Core</strong></font>：实现了Spark的基本功能，包含任务调度、内存管理、错误恢复、与存储系统交互等模块。Spark Core中还包含了对弹性分布式数据集(Resilient Distributed DataSet，简称RDD)的API定义。 </p></li><li><p><font color=red size=3><strong>Spark SQL</strong></font>：是Spark用来操作结构化数据的程序包。通过Spark SQL，我们可以使用 SQL或者Apache Hive版本的SQL方言(HQL)来查询数据。Spark SQL支持多种数据源，比如Hive表、Parquet以及JSON等。 </p></li><li><p><font color=red size=3><strong>Spark Streaming</strong></font>：是Spark提供的对实时数据进行流式计算的组件。提供了用来操作数据流的API，并且与Spark Core中的 RDD API高度对应。 </p></li><li><p><font color=red size=3><strong>Spark MLlib</strong></font>：提供常见的机器学习(ML)功能的程序库。包括分类、回归、聚类、协同过滤等，还提供了模型评估、数据 导入等额外的支持功能。 </p></li><li><p><font color=red size=3><strong>Spark GraphX</strong></font>：主要用于图形并行计算和图挖掘系统的组件。</p></li><li><p><font color=red size=3><strong>集群管理器</strong></font>：Spark 设计为可以高效地在一个计算节点到数千个计算节点之间伸缩计 算。为了实现这样的要求，同时获得最大灵活性，Spark支持在各种集群管理器(Cluster Manager)上运行，包括Hadoop YARN、Apache Mesos【国外使用比较多】，以及Spark自带的一个简易调度器，叫作独立调度器。 </p><p>Spark得到了众多大数据公司的支持，这些公司包括Hortonworks、IBM、Intel、Cloudera、MapR、Pivotal、百度、阿里、腾讯、京东、携程、优酷土豆。当前百度的Spark已应用于大搜索、直达号、百度大数据等业务；阿里利用GraphX构建了大规模的图计算和图挖掘系统，实现了很多生产系统的推荐算法；腾讯Spark集群达到8000台的规模，是当前已知的世界上最大的Spark集群。</p></li></ul><h2 id="Spark特点"><a href="#Spark特点" class="headerlink" title="Spark特点"></a>Spark特点</h2><ol><li><font color=red size=3><strong>快</strong></font>：与Hadoop的MapReduce相比，Spark基于<font color=red size=3><strong>内存</strong></font>的运算要<font color=red size=3><strong>快100倍以上</strong></font>，基于<font color=red size=3><strong>硬盘</strong></font>的运算也要<font color=red size=3><strong>快10倍</strong></font>以上。Spark实现了高效的DAG（有向无环图）执行引擎，可以通过基于内存来高效处理数据流。计算的中间结果是存在于内存中的。</li><li><font color=red size=3><strong>易用</strong></font>：Spark支持<font color=red size=3><strong>Java、Python和Scala的API</strong></font>，还支持超过80种高级算法，使用户可以快速构建不同的应用。而且Spark支持交互式的Python和Scala的Shell，可以非常方便地在这些Shell中使用Spark集群来验证解决问题的方法。</li><li><font color=red size=3><strong>通用</strong></font>：Spark提供了统一的解决方案。Spark可以用于，交互式查询（<font color=red size=3><strong>Spark SQL</strong></font>）、实时流处理（<font color=red size=3><strong>Spark Streaming</strong></font>）、机器学习（<font color=red size=3><strong>Spark MLlib</strong></font>）和图计算（<font color=red size=3><strong>GraphX</strong></font>）。这些不同类型的处理都可以在同一个应用中无缝使用。减少了开发和维护的人力成本和部署平台的物力成本。</li><li><font color=red size=3><strong>兼容性</strong></font>：Spark可以非常方便地与其他的开源产品进行融合。比如，Spark<font color=red size=3><strong>可以使用Hadoop的YARN</strong></font>和Apache Mesos作为它的资源管理和调度器，并且可以<font color=red size=3><strong>处理所有Hadoop支持的数据</strong></font>，包括HDFS、HBase等。这对于已经部署Hadoop集群的用户特别重要，因为不需要做任何数据迁移就可以使用Spark的强大处理能力。</li></ol><h1 id="Spark运行模式"><a href="#Spark运行模式" class="headerlink" title="Spark运行模式"></a>Spark运行模式</h1><h2 id="Spark安装地址"><a href="#Spark安装地址" class="headerlink" title="Spark安装地址"></a>Spark安装地址</h2><ul><li>官网地址<br><a href="http://spark.apache.org/">http://spark.apache.org/</a></li><li>文档查看地址<br><a href="https://spark.apache.org/docs/2.1.1/">https://spark.apache.org/docs/2.1.1/</a></li><li>下载地址<br><a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></li></ul><h2 id="重要角色"><a href="#重要角色" class="headerlink" title="重要角色"></a>重要角色</h2><h3 id="Driver（驱动器）【管理者】"><a href="#Driver（驱动器）【管理者】" class="headerlink" title="Driver（驱动器）【管理者】"></a>Driver（驱动器）【管理者】</h3><p>Spark的驱动器是执行开发程序中的main方法的进程。它负责开发人员编写的用来创建SparkContext、创建RDD，以及进行RDD的转化操作和行动操作代码的执行。如果你是用spark shell，那么当你启动Spark shell的时候，系统后台自启了一个Spark驱动器程序，就是在Spark shell中预加载的一个叫作 sc的SparkContext对象。如果驱动器程序终止，那么Spark应用也就结束了。主要负责：</p><ol><li>把用户程序转为作业（JOB）</li><li>跟踪Executor的运行状况</li><li>为执行器节点调度任务</li><li>UI展示应用运行状况</li></ol><h3 id="Executor（执行器）"><a href="#Executor（执行器）" class="headerlink" title="Executor（执行器）"></a>Executor（执行器）</h3><p>Spark Executor是一个工作进程，负责在 Spark 作业中运行任务，任务间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。主要负责：</p><ol><li>负责运行组成 Spark 应用的任务，并将结果返回给驱动器进程；</li><li>通过自身的块管理器（Block Manager）为用户程序中要求缓存的RDD提供内存式存储。RDD是直接缓存在Executor进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</li></ol><h2 id="Local模式"><a href="#Local模式" class="headerlink" title="Local模式"></a>Local模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Local模式就是运行在<font color=red size=3><strong>一台计算机上的模式</strong></font>，通常就是用于在本机上练手和测试。它可以通过以下集中方式设置Master。</p></li><li><p>local: 所有计算都运行在一个线程当中，没有任何并行计算，通常我们在本机执行一些测试代码，或者练手，就用这种模式;</p></li><li><p>local[K]: 指定使用几个线程来运行计算，比如local[4]就是运行4个Worker线程。<font color=red size=3><strong>通常我们的Cpu有几个Core，就指定几个线程</strong></font>，最大化利用Cpu的计算能力;</p></li><li><p>local[*]: 这种模式直接帮你按照Cpu最多Cores来设置线程数了。</p></li></ul><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li><p>上传并解压spark安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 sorfware]$ tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz -C /opt/module/</span><br><span class="line">[caixianquan@hadoop102 module]$ mv spark-2.1.1-bin-hadoop2.7 spark</span><br></pre></td></tr></table></figure></li><li><p>官方求PI案例<br>【反斜杠 \ 表示连接，太长换行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master local[2] \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><div class="note info flat"><p>（1）基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class &lt;main-class&gt;</span><br><span class="line">--master &lt;master-url&gt; \</span><br><span class="line">--deploy-mode &lt;deploy-mode&gt; \</span><br><span class="line">--conf &lt;key&gt;=&lt;value&gt; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> other options</span></span><br><span class="line">&lt;application-jar&gt; \</span><br><span class="line">[application-arguments]</span><br></pre></td></tr></table></figure><p>（2）参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--master 指定Master的地址，默认为Local</span><br><span class="line">--class: 表示要执行的的主类 (如 org.apache.spark.examples.SparkPi)</span><br><span class="line">--deploy-mode: 是否发布你的驱动到worker节点(cluster) 或者作为一个本地客户端 (client) (default: client)*</span><br><span class="line">--conf: 任意的Spark配置属性， 格式key=value. 如果值包含空格，可以加引号“key=value” </span><br><span class="line">application-jar: 打包好的应用jar,包含依赖. 这个URL在集群中全局可见。 比如hdfs:// 共享存储系统， 如果是 file:// path， 那么所有的节点的path都包含同样的jar</span><br><span class="line">application-arguments: 传给main()方法的参数</span><br><span class="line">--executor-memory 1G 指定每个executor可用内存为1G</span><br><span class="line">--total-executor-cores 2 指定每个executor使用的cup核数为2个</span><br></pre></td></tr></table></figure></div></li><li><p>结果展示<br>该算法是利用蒙特·卡罗算法求PI【<font color=red size=3><strong>后面的100是传入的参数，计算100次</strong></font>】<br><img src="4%E3%80%81%E8%92%99%E7%89%B9%C2%B7%E5%8D%A1%E7%BD%97%E7%AE%97%E6%B3%95.png" alt="蒙特·卡罗算法"></p></li><li><p>准备文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ mkdir input</span><br></pre></td></tr></table></figure><p>在input下创建文件1.txt和2.txt，并输入以下内容</p><table><thead><tr><th align="left">1.txt</th><th align="left">2.txt</th></tr></thead><tbody><tr><td align="left">Hello World<br>Hello Spark</td><td align="left">Hello Spark</td></tr></tbody></table></li><li><p>启动spark-shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ bin/spark-shell</span><br><span class="line">Using Spark&#x27;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">18/09/29 08:50:52 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">18/09/29 08:50:58 WARN ObjectStore: Failed to get database global_temp, returning NoSuchObjectException</span><br><span class="line">Spark context Web UI available at http://192.168.9.102:4040</span><br><span class="line">Spark context available as &#x27;sc&#x27; (master = local[*], app id = local-1538182253312).</span><br><span class="line">Spark session available as &#x27;spark&#x27;.</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &#x27;_/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version 2.1.1</span><br><span class="line">      /_/</span><br><span class="line">         </span><br><span class="line">Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_144)</span><br><span class="line">Type in expressions to have them evaluated.</span><br><span class="line">Type :help for more information.</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span></span><br></pre></td></tr></table></figure><div class="note primary flat"><p>注意：sc是SparkCore程序的入口；spark是SparkSQL程序入口；master = local[*]表示本地模式运行。</p></div><p>开启另一个CRD窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ jps</span><br><span class="line">3627 SparkSubmit</span><br><span class="line">4047 Jps</span><br></pre></td></tr></table></figure><p>可登录hadoop102:4040查看程序运行<br><img src="5%E3%80%81%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C.png" alt="查看程序运行"></p></li></ul><h3 id="运行WordCount程序"><a href="#运行WordCount程序" class="headerlink" title="运行WordCount程序"></a>运行WordCount程序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;sc.textFile(<span class="string">&quot;input&quot;</span>).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br><span class="line">res0: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="type">Hello</span>,<span class="number">3</span>), (<span class="type">World</span>,<span class="number">1</span>), (<span class="type">Scala</span>,<span class="number">1</span>), (<span class="type">Spark</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><font color=red size=3><strong>可登录hadoop102:4040查看程序运行</strong></font><br><img src="6%E3%80%81%E6%9F%A5%E7%9C%8BWordCount%E7%A8%8B%E5%BA%8F.png" alt="查看WordCount程序"></p><ul><li>WordCount程序分析</li></ul><p>提交任务分析：<br><img src="7%E3%80%81WordCount%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90.png" alt="WordCount程序分析"><br>数据流分析：</p><p>textFile(“input”)：读取本地文件input文件夹数据；<br>flatMap(<em>.split(“ “))：压平操作，按照空格分割符将一行数据映射成一个个单词；<br>map((</em>,1))：对每一个元素操作，将单词映射为元组；<br>reduceByKey(<em>+</em>)：按照key将值进行聚合，相加；<br>collect：将数据收集到Driver端展示。<br><img src="8%E3%80%81wordCount%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.png" alt="wordCount代码分析"></p><h2 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>构建一个由Master+Slave构成的Spark集群，Spark运行在集群中。<br><img src="9%E3%80%81Standalone%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F.png" alt="Standalone运行模式"></p><h3 id="安装使用-1"><a href="#安装使用-1" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li><p>进入spark安装目录下的conf文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 module]$ cd spark/conf/</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ mv slaves.template slaves</span><br><span class="line">[atguigu@hadoop102 conf]$ mv spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure></li><li><p>修改slave文件，添加work节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ vim slaves</span><br><span class="line"></span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></table></figure></li><li><p>修改spark-env.sh文件，添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ vim spark-env.sh</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_HOST=hadoop102</span><br><span class="line">SPARK_MASTER_PORT=7077</span><br></pre></td></tr></table></figure></li><li><p>分发spark包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 module]$ xsync spark/</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 spark]$ sbin/start-all.sh</span><br><span class="line">[atguigu@hadoop102 spark]$ util.sh </span><br><span class="line">================atguigu@hadoop102================</span><br><span class="line">3330 Jps</span><br><span class="line">3238 Worker</span><br><span class="line">3163 Master</span><br><span class="line">================atguigu@hadoop103================</span><br><span class="line">2966 Jps</span><br><span class="line">2908 Worker</span><br><span class="line">================atguigu@hadoop104================</span><br><span class="line">2978 Worker</span><br><span class="line">3036 Jps</span><br></pre></td></tr></table></figure><p><font color=red size=3><strong>网页查看：hadoop102:8080</strong></font></p><div class="note primary flat"><p>注意：如果遇到 “JAVA_HOME not set” 异常，可以在sbin目录下的spark-config.sh 文件中加入如下配置：<br>export JAVA_HOME=XXXX</p></div></li><li><p>官方求PI案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 spark]$ bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://hadoop102:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><img src="10%E3%80%81%E5%AE%98%E6%96%B9%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="官方程序运行结果"></p></li><li><p>启动spark shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/spark/bin/spark-shell \</span><br><span class="line">--master spark://hadoop102:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2</span><br></pre></td></tr></table></figure><p>参数：–master spark://hadoop102:7077指定要连接的集群的master<br>执行WordCount程序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;sc.textFile(<span class="string">&quot;input&quot;</span>).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br><span class="line">res0: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((hadoop,<span class="number">6</span>), (oozie,<span class="number">3</span>), (spark,<span class="number">3</span>), (hive,<span class="number">3</span>), (atguigu,<span class="number">3</span>), (hbase,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h3 id="JobHistoryServer配置"><a href="#JobHistoryServer配置" class="headerlink" title="JobHistoryServer配置"></a>JobHistoryServer配置</h3></li><li><p>修改spark-default.conf.template名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ mv spark-defaults.conf.template spark-defaults.conf</span><br></pre></td></tr></table></figure></li><li><p>修改spark-default.conf文件，开启Log：<br><font color=red size=3><strong>注意：HDFS上的目录需要提前存在。</strong></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ vi spark-defaults.conf</span><br><span class="line">spark.eventLog.enabled           true</span><br><span class="line">spark.eventLog.dir               hdfs://hadoop102:9000/directory</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 hadoop]$ hadoop fs –mkdir /directory</span><br></pre></td></tr></table></figure></li><li><p>修改spark-env.sh文件，添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ vi spark-env.sh</span><br><span class="line"></span><br><span class="line">export SPARK_HISTORY_OPTS=&quot;-Dspark.history.ui.port=18080 </span><br><span class="line">-Dspark.history.retainedApplications=30 </span><br><span class="line">-Dspark.history.fs.logDirectory=hdfs://hadoop102:9000/directory&quot;</span><br></pre></td></tr></table></figure><p><font color=red size=3><strong>参数描述：</strong></font></p></li></ul><ol><li>spark.eventLog.dir：Application在运行过程中所有的信息均记录在该属性指定的路径下； </li><li>spark.history.ui.port=18080  WEBUI访问的端口号为18080</li><li>spark.history.fs.logDirectory=hdfs://hadoop102:9000/directory  配置了该属性后，在start-history-server.sh时就无需再显式的指定路径，Spark History Server页面只展示该指定路径下的信息</li><li>spark.history.retainedApplications=30指定保存Application历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数。</li></ol><ul><li>分发配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ xsync spark-defaults.conf</span><br><span class="line">[atguigu@hadoop102 conf]$ xsync spark-env.sh</span><br></pre></td></tr></table></figure></li><li>启动历史服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 spark]$ sbin/start-history-server.sh</span><br></pre></td></tr></table></figure></li><li>再次执行任务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 spark]$ bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://hadoop102:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure></li><li>查看历史服务<br>hadoop102:18080<br><img src="11%E3%80%81%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1.png" alt="查看历史服务"></li></ul><h3 id="HA配置"><a href="#HA配置" class="headerlink" title="HA配置"></a>HA配置</h3><p><img src="12%E3%80%81HA%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="HA架构图"></p><ul><li><p>zookeeper正常安装并启动</p></li><li><p>修改spark-env.sh文件添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ vi spark-env.sh</span><br></pre></td></tr></table></figure><p>注释掉如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">SPARK_MASTER_HOST=hadoop102</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SPARK_MASTER_PORT=7077</span></span><br><span class="line">添加上如下内容：</span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS=&quot;</span><br><span class="line">-Dspark.deploy.recoveryMode=ZOOKEEPER </span><br><span class="line">-Dspark.deploy.zookeeper.url=hadoop102,hadoop103,hadoop104 </span><br><span class="line">-Dspark.deploy.zookeeper.dir=/spark&quot;</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 conf]$ xsync spark-env.sh</span><br></pre></td></tr></table></figure></li><li><p>在hadoop102上启动全部节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 spark]$ sbin/start-all.sh</span><br></pre></td></tr></table></figure></li><li><p>在hadoop103上单独启动master节点【<font color=red size=3><strong>注意是在hadoop103上</strong></font>】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop103 spark]$ sbin/start-master.sh</span><br></pre></td></tr></table></figure></li><li><p>spark HA集群访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/spark/bin/spark-shell \</span><br><span class="line">--master spark://hadoop102:7077,hadoop103:7077 \</span><br><span class="line">--executor-memory 2g \</span><br><span class="line">--total-executor-cores 2</span><br></pre></td></tr></table></figure><h2 id="Yarn模式（重点）"><a href="#Yarn模式（重点）" class="headerlink" title="Yarn模式（重点）"></a>Yarn模式（重点）</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>Spark客户端直接连接Yarn，不需要额外构建Spark集群。有yarn-client和yarn-cluster两种模式，<font color=red size=3><strong>主要区别在于：Driver程序的运行节点。</strong></font></p></li><li><p>yarn-client：Driver程序运行在客户端，适用于交互、调试，希望立即看到app的输出</p></li><li><p>yarn-cluster：Driver程序运行在由RM（ResourceManager）启动的AP（APPMaster）适用于生产环境。<br><img src="30%E3%80%81Yarn%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F.png" alt="Yarn运行模式"><br><img src="31%E3%80%81YarnClient%E6%A8%A1%E5%BC%8F%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="YarnClient模式任务提交流程"></p><div class="note primary flat"><p>申请资源：ApplicationMaster不清楚哪些节点的资源可以使用，所以需要向RM申请资源</p></div></li></ul><h3 id="安装使用-2"><a href="#安装使用-2" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li>修改hadoop配置文件yarn-site.xml,添加如下内容：<div class="note primary flat"><p>因为测试环境虚拟机内存较少，防止执行过程进行被意外杀死，做如下配置</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 hadoop]$ vi yarn-site.xml</span><br><span class="line">        <span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改spark-env.sh，添加如下配置：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 conf]$ vi spark-env.sh</span><br><span class="line">YARN_CONF_DIR=/opt/module/hadoop-2.7.2/etc/hadoop</span><br></pre></td></tr></table></figure></li><li>分发配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 conf]$ xsync /opt/module/hadoop-2.7.2/etc/hadoop/yarn-site.xml</span><br><span class="line">[caixianquan@hadoop102 conf]$ xsync spark-env.sh</span><br></pre></td></tr></table></figure></li><li>执行一个程序<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><font color=red size=3><strong>注意：在提交任务之前需启动HDFS以及YARN集群。</strong></font></li></ul><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><ul><li>修改配置文件spark-defaults.conf<br>添加如下内容：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark.yarn.historyServer.address=hadoop102:18080</span><br><span class="line">spark.history.ui.port=18080</span><br></pre></td></tr></table></figure></li><li>重启spark历史服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ sbin/stop-history-server.sh </span><br><span class="line">stopping org.apache.spark.deploy.history.HistoryServer</span><br><span class="line">[caixianquan@hadoop102 spark]$ sbin/start-history-server.sh </span><br><span class="line">starting org.apache.spark.deploy.history.HistoryServer, logging to /opt/module/spark/logs/spark-atguigu-org.apache.spark.deploy.history.HistoryServer-1-hadoop102.out</span><br></pre></td></tr></table></figure></li><li>提交任务到Yarn执行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caixianquan@hadoop102 spark]$ bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure></li><li>Web页面查看日志<br><img src="32%E3%80%81web%E9%A1%B5%E9%9D%A2%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97.png" alt="web页面查看日志"><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/32%E3%80%81web%E9%A1%B5%E9%9D%A2%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%971.png" class=""></li></ul><h1 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h1><h2 id="编写WordCount程序"><a href="#编写WordCount程序" class="headerlink" title="编写WordCount程序"></a>编写WordCount程序</h2><h3 id="创建一个Maven项目WordCount并导入依赖"><a href="#创建一个Maven项目WordCount并导入依赖" class="headerlink" title="创建一个Maven项目WordCount并导入依赖"></a>创建一个Maven项目WordCount并导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note primary flat"><p>注意：如果maven版本为3.2.x，插件下载报错，那么修改插件版本为3.3.2</p></div><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建SparkConf并设置App名称</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建SparkContext，该对象是提交Spark App的入口</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用sc创建RDD并执行相应的transformation和action</span></span><br><span class="line">    sc.textFile(args(<span class="number">0</span>)).flatMap(_.split(<span class="string">&quot; &quot;</span>)).map((_, <span class="number">1</span>)).reduceByKey(_+_, <span class="number">1</span>).sortBy(_._2, <span class="literal">false</span>).saveAsTextFile(args(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="打包到集群测试"><a href="#打包到集群测试" class="headerlink" title="打包到集群测试"></a>打包到集群测试</h3><h4 id="通过Project-Structure方式打包"><a href="#通过Project-Structure方式打包" class="headerlink" title="通过Project Structure方式打包"></a>通过Project Structure方式打包</h4><p><font color=red size=3><strong>以下为示例</strong></font><br><img src="13%E3%80%81Project-Structure%E6%96%B9%E5%BC%8F%E6%89%93%E5%8C%85.png" alt="Project Structure方式打包"></p><ol><li>如下图所示，选中需要打包的模块，右键点击，即会出现如下图所示的内容，点击Open Module Settings。<br><img src="22%E3%80%81Open-Module-Settings.png" alt="Open Module Settings"><br><img src="14%E3%80%81Project-Structure%E9%A1%B5%E9%9D%A2.png" alt="Project-Structure页面"></li><li>打jar包有两种，一种是依赖jar包，Empty选项，另一种是可执行jar包，第二个选项：from modules with dependencies，会一起打包所需要的依赖jar包<br><img src="15%E3%80%81%E6%89%93%E5%8C%85%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96jar%E5%8C%85.png" alt="打包所需要的依赖jar包"><br><img src="16%E3%80%81%E8%AE%BE%E7%BD%AE%E4%B8%BB%E7%B1%BB.png" alt="设置主类"></li><li>选择需要打jar的module<br><img src="17%E3%80%81%E9%80%89%E6%8B%A9%E9%9C%80%E8%A6%81%E6%89%93jar%E7%9A%84module.png" alt="选择需要打jar的module"></li><li>选择主类<br><img src="18%E3%80%81%E9%80%89%E6%8B%A9%E4%B8%BB%E7%B1%BB.png" alt="选择主类"><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/19%E3%80%81%E9%80%89%E6%8B%A9%E4%B8%BB%E7%B1%BB1.png" class=""><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/20%E3%80%81%E9%80%89%E6%8B%A9%E4%B8%BB%E7%B1%BB2.png" class=""></li><li>将一些资源配置文件放在resources文件夹中<br><img src="21%E3%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E4%BD%8D%E7%BD%AE.png" alt="example"><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/23%E3%80%81%E6%9F%A5%E7%9C%8B%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E4%BD%8D%E7%BD%AE.png" class=""></li><li>点击OK，点击Apply，点击OK即可</li><li>配置环境之后就可以开始打jar包，如下<br><img src="24%E3%80%81%E5%BC%80%E5%A7%8B%E6%89%93jar%E5%8C%85.png" alt="开始打jar包"><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/25%E3%80%81%E5%BC%80%E5%A7%8B%E6%89%93jar%E5%8C%851.png" class=""></li><li>选择build，构建，成功会有如下提示<br><img src="26%E3%80%81%E6%89%93%E5%8C%85%E6%88%90%E5%8A%9F.png" alt="打包成功"></li><li>这个文件夹就包含了程序所需的所有依赖jar包<br><img src="27%E3%80%81%E6%9F%A5%E7%9C%8B%E7%94%9F%E6%88%90%E7%9A%84%E7%9B%AE%E5%BD%95.png" alt="查看生成的目录"><img src="/hexo/2020/08/08/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BSpark%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90-%E4%B8%80/28%E3%80%81%E6%9F%A5%E7%9C%8B%E7%94%9F%E6%88%90%E7%9A%84%E7%9B%AE%E5%BD%951.png" class=""></li><li>将该文件夹放入到linux中<br><img src="29%E3%80%81%E5%B0%86jar%E5%8C%85%E6%94%BE%E5%85%A5linux%E4%B8%AD.png" alt="将jar包放入linux中"></li></ol><h4 id="在yarn上运行程序"><a href="#在yarn上运行程序" class="headerlink" title="在yarn上运行程序"></a>在yarn上运行程序</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class WordCount \</span><br><span class="line">--master spark://hadoop102:7077 \</span><br><span class="line">WordCount.jar \</span><br><span class="line">/word.txt \</span><br><span class="line">/out</span><br></pre></td></tr></table></figure><h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><ul><li>本地Spark程序调试需要使用local提交模式，即将本机当做运行环境，Master和Worker都为本机。运行时直接加断点调试即可。如下：<br>创建SparkConf的时候设置额外属性，表明本地执行：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WC&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>如果本机操作系统是windows，如果在程序中使用了hadoop相关的东西，比如写入文件到HDFS，则会遇到如下异常：<br><img src="33%E3%80%81%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Cspark%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99.png" alt="本地运行spark程序报错"></li><li>出现这个问题的原因，并不是程序的错误，而是用到了hadoop相关的服务，解决办法是将附加里面的hadoop-common-bin-2.7.3-x64.zip解压到任意目录。<br><img src="34%E3%80%81hadoop%E7%9B%AE%E5%BD%95.png" alt="hadoop目录"></li><li>在IDEA中配置Run Configuration，添加HADOOP_HOME变量<br><img src="35%E3%80%81idea%E6%B7%BB%E5%8A%A0HADOOP_HOME%E5%8F%98%E9%87%8F.png" alt="idea添加HADOOP_HOME变量"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据学习 </category>
          
          <category> Spark </category>
          
          <category> 尚硅谷大数据之Spark学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> spark </tag>
            
            <tag> spark运行模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/hexo/2020/07/19/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/hexo/2020/07/19/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><div class="note info flat"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">--头部属性说明：</span><br><span class="line">title【必需】文章标题【需要】</span><br><span class="line">date【必需】文章创建日期【需要】</span><br><span class="line">tags【可选】文章标签【需要】</span><br><span class="line">categories【可选】文章分类【需要】</span><br><span class="line">keywords【可选】文章关键字【需要，同标签】</span><br><span class="line">description【可选】文章描述【需要】</span><br><span class="line">top_img【可选】文章顶部图片</span><br><span class="line">cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)【需要，地址为：/年/月/日/文章标题/图片名称.后缀名】</span><br><span class="line">comments【可选】显示文章评论模块(默认 true)</span><br><span class="line">toc【可选】显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line">toc_number【可选】显示</span><br><span class="line">toc_number(默认为设置中toc的number配置)</span><br><span class="line">copyright【可选】显示文章版权模块(默认 true)</span><br><span class="line">mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line">katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">--标签外挂</span><br><span class="line">样式：</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">编辑内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">--图片插入示例：</span><br><span class="line">不显示描述，可以插入【舍弃不用】：</span><br><span class="line">&#123;% asset_img example.png %&#125;</span><br><span class="line">显示描述的：</span><br><span class="line">![example](example.png)不用添加路径，直接填图片名称即可，将图片放入对应文件夹内</span><br><span class="line"></span><br><span class="line">-- 插入链接</span><br><span class="line">&#123;% link text url [external] [title] %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="第一章-前言"><a href="#第一章-前言" class="headerlink" title="第一章 前言"></a>第一章 前言</h1><p>主要是参考尚硅谷的李立超老师的Python基础视频笔记，加上自己的所总结的知识点，形成比较完善的python笔记，方便自己后续查阅已经复习巩固资料。</p><h1 id="第二章-计算机基础知识"><a href="#第二章-计算机基础知识" class="headerlink" title="第二章 计算机基础知识"></a>第二章 计算机基础知识</h1><div class="note default flat"><p>该章比较基础，可有可无，当做扩展资料。</p></div><h2 id="计算机是什么"><a href="#计算机是什么" class="headerlink" title="计算机是什么"></a>计算机是什么</h2><p>在现实生活中，越来越无法离开计算机了<br>  电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。<br>计算机就是一个用来计算的机器！<br>目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛<br>所以我们学习计算机，就是学习如何控制计算机！</p><h2 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h2><p>计算机由两部分组成：硬件 和 软件<br>硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。<br>   硬件是看的见摸得着的<br>  软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）<br>   软件是看的见摸不着的，软件负责控制计算机中的硬件    </p><h2 id="计算机的使用方式"><a href="#计算机的使用方式" class="headerlink" title="计算机的使用方式"></a>计算机的使用方式</h2><p>我们必须要通过软件来对计算机完成各种操作，<br>   但是注意，软件中并不是所有的功能都会对用户开放，<br>   用户需要调用软件提供的接口（Interface 交互界面）来操作计算机</p><p>用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）</p><h2 id="windows的命令行"><a href="#windows的命令行" class="headerlink" title="windows的命令行"></a>windows的命令行</h2><p>命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机<br>任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）<br>命令行有多个不同的名字：<br>   命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal<br>1.如何进入到命令行<br>   win键 + R 出现运行窗口，输入cmd，然后回车<br>2.命令行的结构</p><ul><li><p>版本及版权声明（一般没有什么用）<br>Microsoft Windows [版本 10.0.16299.431]<br>(c) 2017 Microsoft Corporation。保留所有权利。</p></li><li><p>命令提示符<br> C:\Users\lilichao&gt;<br> C:  </p></li><li><p>当前所在的磁盘根目录</p></li><li><p>可以通过 x: 来切换盘符（x表示你的盘符）</p><p> \Users\lilichao</p><ul><li>所在磁盘的路径，当前所在的文件夹</li><li>cd 来切换目录<br>&gt;</li><li>命令提示符，在大于号后边可以直接输入指令</li></ul></li></ul><p>3.常用的dos命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">      dir 查看当前目录下的所有文件（夹）</span><br><span class="line">      cd 进入到指定的目录</span><br><span class="line">          . 表示当前目录</span><br><span class="line">          .. 表示上一级目录</span><br><span class="line">      md 创建一个目录</span><br><span class="line">      rd 删除一个目录    </span><br><span class="line">      del 删除一个文件</span><br><span class="line">      cls 清除屏幕</span><br><span class="line">  </span><br><span class="line">命令的语法</span><br><span class="line"> 命令 [参数] [选项]</span><br></pre></td></tr></table></figure><p>4.小技巧</p><ul><li>方向键上下，查看命令的历史记录</li><li>tab键自动补全命令        </li></ul><h2 id="环境变量（environment-variable）"><a href="#环境变量（environment-variable）" class="headerlink" title="环境变量（environment variable）"></a>环境变量（environment variable）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">环境变量指的就是操作系统当中的一些变量。</span><br><span class="line">可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）</span><br><span class="line">1.查看环境变量</span><br><span class="line">    &gt; 右键 计算机（此电脑），选择属性</span><br><span class="line">    &gt; 系统界面左侧选择 高级系统设置</span><br><span class="line">    &gt; 选择环境变量</span><br><span class="line">    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量</span><br><span class="line">        建议只修改用户的环境变量，不要修改系统的环境变量</span><br><span class="line">        &#123;% note info %&#125;</span><br><span class="line">        必要时还是需要修改系统变量，具体问题具体分析</span><br><span class="line">        &#123;% endnote&#125;</span><br><span class="line"></span><br><span class="line">2.添加环境变量</span><br><span class="line">    &gt; 通过新建按钮添加环境变量</span><br><span class="line">    &gt; 一个环境变量可以由多个值，值与值之间使用;（英文）隔开</span><br><span class="line"></span><br><span class="line">3.修改环境变量</span><br><span class="line">    &gt; 通过编辑按钮来修改环境变量</span><br><span class="line"></span><br><span class="line">4.删除环境变量</span><br><span class="line">    &gt; 通过删除按钮来删除环境变量    </span><br></pre></td></tr></table></figure><h2 id="path环境变量"><a href="#path环境变量" class="headerlink" title="path环境变量"></a>path环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">path环境变量中保存的是一个一个的路径。</span><br><span class="line">当我们在命令行中输入一个命令（或访问一个文件时），</span><br><span class="line">    系统会首先在当前目录下寻找，如果找到了则直接执行或打开</span><br><span class="line">    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止</span><br><span class="line">    如果path环境变量中的路径都没有找到，则报错</span><br><span class="line">        &#39;xxx&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br><span class="line">我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，</span><br><span class="line">    这样我们就可以在任意的位置访问到这些文件了</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">    1.如果环境变量中没有path，可以手动添加</span><br><span class="line">    2.path环境变量不区分大小写 PATH Path path   </span><br><span class="line">    3.修改完环境变量必须重新启动命令行窗口</span><br><span class="line">    4.多个路径之间使用;隔开</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><div class="note primary flat"><p>B：二进制<br>O：八进制<br>D：十进制<br>H：十六进制</p></div><ul><li><p>十进制（最常用的进制）</p><ul><li>十进制就是满十进一的进制</li><li>十进制当中一共有10个数字<pre><code>  0 1 2 3 4 5 6 7 8 9</code></pre></li><li>十进制如何计数<pre><code>  0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30</code></pre></li></ul></li><li><p>二进制（计算机底层使用的进制）</p><ul><li>满二进一</li><li>二进制中一共有2个数字<pre><code>0 1</code></pre></li><li>二进制如何计数<pre><code>0 1 10 11 100 101 110 111 1000</code></pre></li><li>所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制</li><li>可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1</li><li>内存中的每一个小格子，我们称为1bit（位）<br>   bit是计算机中的最小的单位<br>   byte是我们最小的可操作的单位<br>   8bit = 1byte（字节）<br>   1024byte = 1kb（千字节）<br>   1024kb = 1mb（兆字节）<br>   1024mb = 1gb（吉字节）<br>   1024gb = 1tb（太字节）<br>   。。。</li></ul></li></ul><ul><li>八进制（一般不用）<ul><li>满八进一</li><li>八进制中一共有8个数字<br>  0 1 2 3 4 5 6 7</li><li>八进制如何计数<br>  0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30</li></ul></li><li>十六进制<ul><li>满十六进一</li><li>十六进制中一共有16个数字<br>   由于十六进制是满16才进位，<br>   所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15   <pre><code>0 1 2 3 4 5 6 7 8 9 a b c d e f </code></pre></li><li>十六进制如何计数<br>  0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f<pre><code>  20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    </code></pre></li><li>我们在查看二进制数据时，一般会以十六进制的形式显示</li></ul></li></ul><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="二进制数转换成十进制数"><a href="#二进制数转换成十进制数" class="headerlink" title="二进制数转换成十进制数"></a>二进制数转换成十进制数</h3><p>   由二进制数转换成十进制数的基本做法是，把二进制数首先写成加权系数展开式，然后按十进制加法规则求和。这种做法称为”按权相加”法。<br>   例1105 把二进制数110.11转换成十进制数。<br>   <img src="1%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%8D%81%E8%BF%9B%E5%88%B6%E4%BE%8B%E5%AD%90.png" alt="二进制转换十进制例子"></p><h3 id="、十进制数转换为二进制数"><a href="#、十进制数转换为二进制数" class="headerlink" title="、十进制数转换为二进制数"></a>、十进制数转换为二进制数</h3><p>十进制数转换为二进制数时，由于整数和小数的转换方法不同，所以先将十进制数的整数部分和小数部分分别转换后，再加以合并。    </p><ul><li><p>十进制整数转换为二进制整数<br>    十进制整数转换为二进制整数采用”<font color=red size=3><code>除2取余，逆序排列</code></font>“法。具体做法是：用2去除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为零时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。<br>    例1107 把 (173)10 转换为二进制数。<br><img src="2%E3%80%81%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="十进制整数转换二进制"></p></li><li><p>十进制小数转换为二进制小数<br>    十进制小数转换成二进制小数采用”乘2取整，顺序排列”法。具体做法是：用2乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数 部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，或者达到所要求的精度为止。<br>    然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。<br>    【例1108】把（0.8125）转换为二进制小数。<br><img src="3%E3%80%81%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="十进制小数转换二进制"></p></li></ul><font color=red size=3>  例1109 （173.8125）10＝（ ）2    解： 由［例1107］得（173）10＝（10101101）2由［例1108］得（0.8125）10＝（0.1101）2把整数部分和小数部分合并得： （173.8125）10＝（10101101.1101）2</font><p>十进制小数转换成二进制小数采用”乘2取整，顺序排列”法。具体做法是：用2乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数部分，又 得到一个积，再将积的整数部分取出，如此进行，直到积中的整数部分为零，或者整数部分为1，此时0或1为二进制的最后一位。或者达到所要求的精度为止。<br>然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。<br>十进制小数转二进制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">如：0.625=（0.101）B</span><br><span class="line">0.625*2=1.25======取出整数部分1</span><br><span class="line">0.25*2=0.5========取出整数部分0</span><br><span class="line">0.5*2=1==========取出整数部分1</span><br><span class="line"></span><br><span class="line">再如：0.7=（0.1 0110 0110...）B</span><br><span class="line">0.7*2=1.4========取出整数部分1</span><br><span class="line">0.4*2=0.8========取出整数部分0</span><br><span class="line">0.8*2=1.6========取出整数部分1</span><br><span class="line">0.6*2=1.2========取出整数部分1</span><br><span class="line">0.2*2=0.4========取出整数部分0</span><br><span class="line">0.4*2=0.8========取出整数部分0</span><br><span class="line">0.8*2=1.6========取出整数部分1</span><br><span class="line">0.6*2=1.2========取出整数部分1</span><br><span class="line">0.2*2=0.4========取出整数部分0</span><br></pre></td></tr></table></figure><h2 id="文本文件和字符集"><a href="#文本文件和字符集" class="headerlink" title="文本文件和字符集"></a>文本文件和字符集</h2><ol><li>文本分成两种，一种叫做纯文本，还有一种叫做富文本</li><li>纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）</li><li>富文本中可以保存文本以外的内容（word文档）</li><li>在开发时，编写程序使用的全都是纯文本！</li><li>纯文本在计算机底层也会转换为二进制保存，</li></ol><ul><li>将字符转换为二进制码的过程，我们称为编码</li><li>将二进制码转换为字符的过程，我们称为解码</li><li>编码和解码时所采用的规则，我们称为字符集</li></ul><ol start="6"><li>常见的字符集：</li></ol><ul><li>ASCII<ul><li>美国人编码，使用7位来对美国常用的字符进行编码</li><li>包含128个字符</li></ul></li><li>ISO-8859-1<ul><li>欧洲的编码，使用8位</li><li>包含256个字符</li></ul></li><li>GB2312</li><li>GBK<ul><li>国标码，中国的编码</li></ul></li><li>Unicode   <ul><li>万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码</li><li>Unicode编码有多种实现，UTF-8 UTF-16 UTF-32</li><li>最常用的就是UTF-8</li></ul></li></ul><ol start="7"><li>乱码</li></ol><ul><li>编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确     </li></ul><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><ul><li>纯文本编辑器</li><li>Package Control（Sublime的包管理器）<ul><li>Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包 </li></ul></li></ul><h1 id="第三章-Python入门"><a href="#第三章-Python入门" class="headerlink" title="第三章 Python入门"></a>第三章 Python入门</h1><h2 id="什么是计算机语言"><a href="#什么是计算机语言" class="headerlink" title="什么是计算机语言"></a>什么是计算机语言</h2><p>计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！<br>需要通过计算机的语言来控制计算机（编程语言）！<br>计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！<br>计算机语言发展经历了三个阶段：</p><ol><li>机器语言</li></ol><ul><li>机器语言通过二进制编码来编写程序</li><li>执行效率好，编写起来太麻烦</li></ul><ol start="2"><li>符号语言（汇编）</li></ol><ul><li>使用符号来代替机器码</li><li>编写程序时，不需要使用二进制，而是直接编写符号</li><li>编写完成后，需要将符号转换为机器码，然后再由计算机执行</li><li>符号转换为机器码的过程称为汇编</li><li>将机器码转换为符号的过程，称为反汇编  </li><li>汇编语言一般只适用于某些硬件，兼容性比较差  </li></ul><ol start="3"><li>高级语言</li></ol><ul><li>高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了</li><li>也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行</li><li>并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言</li><li>C、C++、C#、Java、JavaScript、Python 。。。</li></ul><h2 id="编译型语言和解释型语言"><a href="#编译型语言和解释型语言" class="headerlink" title="编译型语言和解释型语言"></a>编译型语言和解释型语言</h2><p>计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，<br>也就是像 print(‘hello’) 必需要转换为类似 1010101 这样的机器码   </p><p>根据转换时机的不同，语言分成了两大类：</p><ol><li>编译型语言</li></ol><ul><li>C语言</li><li>编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行</li><li>a(源码) –编译–&gt; b(编译后的机器码)</li><li>特点：<ul><li>执行速度特别快</li><li>跨平台性比较差</li></ul></li></ul><ol start="2"><li>解释型语言 </li></ol><ul><li>Python JS Java</li><li>解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译</li><li>a（源码）–解释器–&gt; 解释执行  </li><li>特点：<ul><li>执行速度比较慢</li><li>跨平台性比较好   </li></ul></li></ul><h2 id="Python的介绍"><a href="#Python的介绍" class="headerlink" title="Python的介绍"></a>Python的介绍</h2><ol><li><p>Python是解释型语言</p></li><li><p>Python（英国发音：/?pa?θ?n/ 美国发音：/?pa?θɑ?n/），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 </p></li><li><p>Life is short you need Python （人生苦短，我用Python）    </p></li><li><p>Python的用途：</p></li></ol><ul><li>WEB应用: Facebook 豆瓣 。。。</li><li>爬虫程序</li><li>科学计算</li><li>自动化运维</li><li>大数据（数据清洗）</li><li>云计算</li><li>桌面软件/游戏</li><li>人工智能</li><li>。。。     </li></ul><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><ol><li>开发环境搭建就是安装Python的解释器</li><li>Python的解释器分类：</li></ol><ul><li>CPython（官方）：用c语言编写的Python解释器</li><li>PyPy：用Python语言编写的Python解释器</li><li>IronPython：用.net编写的Python解释器</li><li>Jython：用Java编写的Python解释器</li></ul><ol start="3"><li>步骤：</li></ol><ul><li>下载安装包 python-3.6.5.exe<ul><li>3.x</li><li>2.x    </li></ul></li><li>安装（傻瓜式安装） </li><li>打开命令行窗口，输入python 出现如下内容<div class="note primary flat"><p>Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.<br>&gt;&gt;&gt;    </p></div></li></ul><h2 id="Python的交互界面"><a href="#Python的交互界面" class="headerlink" title="Python的交互界面"></a>Python的交互界面</h2><ol><li>当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面<br>结构：</li></ol><ul><li><p>版本和版权声明：</p><ul><li>Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32</li><li>Type “help”, “copyright”, “credits” or “license” for more information.</li></ul></li><li><p>命令提示符：</p><ul><li>&gt;&gt;&gt;</li></ul></li></ul><ol start="2"><li><p>在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！</p></li><li><p>安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式<br>但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。<br>IDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存</p></li><li><p>交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！ </p></li></ol><ul><li>仅可以用来做一些日常的简单的测试！   </li></ul><ol start="5"><li><p>我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码</p></li><li><p>练习：</p></li></ol><ul><li>自己尝试创建一个py文件，并向文件中写入python打印语句（print…） </li><li>然后执行该文件。</li><li>如果你的系统的扩展名无法修改，请尝试自行baidu！</li></ul><h2 id="Python和Sublime的整合"><a href="#Python和Sublime的整合" class="headerlink" title="Python和Sublime的整合"></a>Python和Sublime的整合</h2><p>1.在Sublime中执行Python代码，ctrl + b 自动在Sublime内置的控制台中执行<br>    这种执行方式，在某些版本的Sublime中对中文支持不好，并且不能使用input()函数</p><p>2.使用SublimeREPL来运行python代码<br>    安装完成，设置快捷键，希望按f5则自动执行当前的Python代码<br>    { “keys”: [“f5”], “caption”: “SublimeREPL:Python”,”command”: “run_existing_window_command”, “args”:{“id”: “repl_python_run”,”file”: “config/Python/Main.sublime-menu”}},</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol><li>在Python中严格区分大小写</li><li>Python中的每一行就是一条语句，每条语句以换行结束</li><li>Python中每一行语句不要过长（规范中建议每行不要超过80个字符）</li></ol><ul><li>“rulers”:[80],</li></ul><ol start="4"><li>一条语句可以分多行编写，多行编写时语句后边以\结尾  </li><li>Python是缩进严格的语言，所以在Python中不要随便写缩进  </li><li>在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略</li></ol><ul><li>我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯</li><li>注释要求简单明了，一般习惯上#后边会跟着一个空格</li></ul><ol start="7"><li>在使用变量之前，需要对其先赋值</li><li>变量名可以包括字母、数字、下划线，但变量名不能以数字开头</li></ol><h2 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h2><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>使用<code>/</code>精确除；<br>使用 <code>//</code>地板除法，即省略小数点后位数，保留整数 （向下取整）</p><h3 id="幂运算："><a href="#幂运算：" class="headerlink" title="幂运算：**"></a>幂运算：**</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> ** <span class="number">2</span>  = <span class="number">9</span>;</span><br><span class="line"><span class="number">5</span> ** <span class="number">3</span> = <span class="number">125</span>;</span><br></pre></td></tr></table></figure><h3 id="not-逻辑运算符"><a href="#not-逻辑运算符" class="headerlink" title="not 逻辑运算符"></a>not 逻辑运算符</h3><p>取相反<br><img src="7%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98.png" alt="优先级问题"></p><h3 id="一些注意点"><a href="#一些注意点" class="headerlink" title="一些注意点"></a>一些注意点</h3><h3 id="使用反斜杠"><a href="#使用反斜杠" class="headerlink" title="使用反斜杠"></a>使用反斜杠</h3><p>在路径字符串使用反斜杠，需要使用转义字符<code>\</code>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;C:\\row&#x27;</span> ——&gt; print(<span class="built_in">str</span>) ——&gt; C:\row</span><br><span class="line"><span class="built_in">str</span> = <span class="string">r&#x27;C:\row&#x27;</span> ——&gt; print(<span class="built_in">str</span>) ——&gt; C:\row   \\使用r来添加转义字符，只对反斜杠转义生效</span><br><span class="line"></span><br><span class="line">\\如果路径末尾加上反斜杠，则不能使用r来自动添加反斜杠，可以如下使用</span><br><span class="line"><span class="built_in">str</span> = <span class="string">r&#x27;C:\row&#x27;</span> + <span class="string">&#x27;\\&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="三重引号"><a href="#三重引号" class="headerlink" title="三重引号"></a>三重引号</h3><p>得到一个跨越多行的字符串，使用三重引号字符串，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;&#x27;我爱鱼C，</span></span><br><span class="line"><span class="string">正如我爱小甲鱼，</span></span><br><span class="line"><span class="string">他那噶几噶几</span></span><br><span class="line"><span class="string">呱唧呱唧</span></span><br><span class="line"><span class="string">呱唧呱唧的声音，</span></span><br><span class="line"><span class="string">总缠绕于我的脑海，</span></span><br><span class="line"><span class="string">久久不肯散去。。。。。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h2><ul><li>Python是一门面向对象的语言</li><li>一切皆对象！</li><li>程序运行当中，所有的数据都是存储到内存当中然后再运行的！</li><li>对象就是内存中专门用来存储指定数据的一块区域</li><li>对象实际上就是一个容器，专门用来存储数据</li><li>像我们之前学习的数值、字符串、布尔值、None都是对象<br><img src="4%E3%80%81%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1.png" alt="一切皆对象"></li></ul><h2 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h2><ul><li><p>每个对象中都要保存三种数据</p></li><li><p>id（标识）</p><blockquote><p>id用来标识对象的唯一性，每一个对象都有唯一的id<br>对象的id就相当于人的身份证号一样<br>可以通过id()函数来查看对象的id<br>id是由解析器生成的，在CPython中，id就是对象的内存地址<br>对象一旦创建，则它的id永远不能再改变</p></blockquote></li><li><p>type（类型）</p><blockquote><p>类型用来标识当前对象所属的类型<br>比如：int str float bool 。。。<br>类型决定了对象有哪些功能<br>通过type()函数来查看对象的类型<br>Python是一门强类型的语言，对象一旦创建类型便不能修改</p></blockquote></li></ul><ul><li>value（值）<blockquote><p>值就是对象中存储的具体的数据<br>对于有些对象值是可以改变的<br>对象分成两大类，可变对象 不可变对象</p><pre><code>  可变对象的值可以改变  不可变对象的值不能改变，之前学习的对象都是不可变对象</code></pre></blockquote></li></ul><p><img src="5%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="对象的结构"></p><h2 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a>可变对象与不可变对象</h2><ol><li><p>Python 在 heap 中分配的对象分成两类：可变对象和不可变对象。所谓可变对象是指，对象的内容是可变的，例如 list。而不可变的对象则相反，表示其内容不可变。</p><div class="note primary flat"><p>不可变对象 ：int，string，float，tuple   -– 可理解为C中，该参数为值传递<br>可变对象   ：list，dictionary，set           -– 可理解为C中，该参数为指针传递</p></div></li><li><p>由于 Python 中的变量存放的是对象引用，所以对于不可变对象而言，尽管对象本身不可变，但变量的对象引用是可变的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#因为258是int对象，是不可变对象的。所以下面3个id的值都是一样的，最后一句的结果也是为True</span></span><br><span class="line"><span class="comment">#该代码最好在IDE工具下运行，在命令行会有不同结果</span></span><br><span class="line">print(<span class="built_in">id</span>(<span class="number">258</span>))</span><br><span class="line">a = <span class="number">258</span></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">b = <span class="number">258</span></span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br></pre></td></tr></table></figure><p><img src="10%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1.png" alt="不可变对象"></p></li><li><p>可变对象：其对象的内容是可以变化的。当对象的内容发生变化时，变量的对象引用是不会变化的。<br><img src="11%E3%80%81%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1.png" alt="可变对象"></p></li></ol><h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><ul><li><p>每个对象中都保存了三个数据：</p><ul><li>id（标识）</li><li>type（类型）</li><li>value（值）    </li></ul></li><li><p>列表就是一个可变对象</p><ul><li>a = [1,2,3]</li></ul></li><li><p>a[0] = 10 （改对象）</p><ul><li>这个操作是在通过变量去修改对象的值</li><li>这种操作不会改变变量所指向的对象    </li><li>当我们去修改对象时，如果有其他变量也指向了该对象，则修改也会在其他的变量中体现</li></ul></li><li><p>a = [4,5,6] （改变量）</p><ul><li>这个操作是在给变量重新赋值</li><li>这种操作会改变变量所指向的对象</li><li>为一个变量重新赋值时，不会影响其他的变量</li></ul></li><li><p>一般只有在为变量赋值时才是修改变量，其余的都是修改对象</p><h3 id="从数据类型角度理解"><a href="#从数据类型角度理解" class="headerlink" title="从数据类型角度理解"></a>从数据类型角度理解</h3></li></ul><ol><li><p>构造操作:  这类操作主要是基于一些已知信息，产生这个类的实例对象。类似银行进行开通账户  </p></li><li><p>解析操作：这类操作是获取对象的一些有用信息，其结果反应了对象的一些特征，但返回的不是对象本身。类似银行查询账户余额   </p></li><li><p>变化操作 ：这类操作是修改对象内部的信息和状态。比如一个银行账户进行转账操作</p></li></ol><div class="note default flat"><p>如果一个类型，具只具有1和2两种操作，也就说只具有构造和解析操作，那么这个类型就是不可变类型，这个类型的对象就是不可变对象<br>如果一个类型，具有1、2、3三种操作，这个类型就是可变类型，这个类型的对象就是可变对象。</p></div><h2 id="变量和对象"><a href="#变量和对象" class="headerlink" title="变量和对象"></a>变量和对象</h2><ul><li>对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名</li><li>变量中存储的不是对象的值，而是对象的id（内存地址），<ul><li>当我们使用变量时，实际上就是在通过对象id在查找对象</li></ul></li><li>变量中保存的对象，只有在为变量重新赋值时才会改变</li><li>变量和变量之间是相互独立的，修改一个变量不会影响另一个变量</li></ul><p><img src="6%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E5%AF%B9%E8%B1%A1.png" alt="变量与对象"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol><li><p>所谓的类型转换，将一个类型的对象转换为其他对象</p></li><li><p><font color=red size=3><strong>类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象</strong></font></p></li><li><p>类型转换四个函数 int() float() str() bool()</p></li><li><p><font color=red size=3><strong>type(变量名)可以查看变量的类型</strong></font></p></li></ol><h3 id="int-和float"><a href="#int-和float" class="headerlink" title="int()和float()"></a>int()和float()</h3><ol><li>int() 可以用来将其他的对象转换为整型</li><li>规则：</li></ol><ul><li>布尔值：True -&gt; 1   False -&gt; 0</li><li>浮点数：直接取整，省略小数点后的内容</li><li>字符串：合法的整数字符串，直接转换为对应的数字<ul><li>如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: ‘11.5’</li></ul></li><li>对于其他不可转换为整型的对象，直接抛出异常 ValueError</li></ul><ol start="3"><li>float() 和 int()基本一致，不同的是它会将对象转换为浮点数</li></ol><h3 id="str-和bool"><a href="#str-和bool" class="headerlink" title="str()和bool()"></a>str()和bool()</h3><ol><li>str() 可以将对象转换为字符串</li></ol><ul><li>True -&gt; ‘True’</li><li>False -&gt; ‘False’</li><li>123 -&gt; ‘123’ </li><li>。。。</li></ul><ol start="2"><li>bool() 可以将对象转换为布尔值，任何对象都可以转换为布尔值</li></ol><ul><li>规则：对于所有表示空性的对象都会转换为False，其余的转换为True</li><li>哪些表示的空性：0 、 None 、 ‘’ 。。。</li></ul><h3 id="例子说明"><a href="#例子说明" class="headerlink" title="例子说明"></a>例子说明</h3><p>a = True</p><ul><li>调用int()来将a转换为整型<br>int(a)  这里a的类型及值都没有发生改变</li><li>int()函数不会对原来的变量产生影响，他是对象转换为指定的类型并将其作为返回值返回</li><li>如果希望修改原来的变量，则需要对变量进行重新赋值<br>a = int(a)</li></ul><h1 id="第四章-流程控制语句"><a href="#第四章-流程控制语句" class="headerlink" title="第四章 流程控制语句"></a>第四章 流程控制语句</h1><div class="note primary flat"><ul><li>缩进有两种方式，一种是使用tab键，一种是使用空格（四个）<ul><li>Python的官方文档中推荐我们使用空格来缩进</li><li>在sublime text中可以设置：”translate_tabs_to_spaces”: true</li></ul></li></ul></div><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">    条件为true执行的操作</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    条件为false执行的操作</span><br><span class="line">  </span><br><span class="line"><span class="comment">#if-else例子</span></span><br><span class="line">age = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">17</span> :</span><br><span class="line">    print(<span class="string">&#x27;你已经成年了~~&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&#x27;你还未成年~~&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#if-elif-else例子</span></span><br><span class="line">age = <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> age &lt; <span class="number">30</span> :</span><br><span class="line">    print(<span class="string">&#x27;你已经成年了！&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">30</span> <span class="keyword">and</span> age &lt; <span class="number">60</span> :</span><br><span class="line">    print(<span class="string">&#x27;你已经中年了！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&#x27;你已经退休了！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">    条件为true执行的操作</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">while</span>条件为false执行的操作，为可选择关键词</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#while例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"><span class="meta">... </span>    i += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    print(i,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span> :</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;else中的代码块&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> hello</span><br><span class="line"><span class="number">2</span> hello</span><br><span class="line"><span class="number">3</span> hello</span><br><span class="line"><span class="number">4</span> hello</span><br><span class="line"><span class="number">5</span> hello</span><br><span class="line"><span class="number">6</span> hello</span><br><span class="line"><span class="number">7</span> hello</span><br><span class="line"><span class="number">8</span> hello</span><br><span class="line"><span class="number">9</span> hello</span><br><span class="line"><span class="number">10</span> hello</span><br><span class="line"><span class="keyword">else</span>中的代码块</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 目标 <span class="keyword">in</span> 表达式：</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure><h2 id="条件表达式（三元操作符）"><a href="#条件表达式（三元操作符）" class="headerlink" title="条件表达式（三元操作符）"></a>条件表达式（三元操作符）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x,y = <span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    small = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    small = y</span><br><span class="line">    </span><br><span class="line"><span class="comment">#改为如下：</span></span><br><span class="line">small = x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br></pre></td></tr></table></figure><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><ol><li>break: break可以用来立即退出循环语句（包括else）</li><li>continue: continue可以用来跳过当次循环</li><li>break和continue都是只对离他最近的循环起作用</li><li>pass: pass是用来在判断或循环语句中占位的,无实际意义</li></ol><h2 id="assert-：断言"><a href="#assert-：断言" class="headerlink" title="assert ：断言"></a>assert ：断言</h2><p>如果错误会自动抛出AssertionError异常</p><h1 id="第五章-序列"><a href="#第五章-序列" class="headerlink" title="第五章 序列"></a>第五章 序列</h1><h2 id="列表-一个打了激素的数组"><a href="#列表-一个打了激素的数组" class="headerlink" title="列表:一个打了激素的数组"></a>列表:一个打了激素的数组</h2><div class="note primary flat"><p>由于python中变量没有数据类型，所以python中用列表替代数组</p></div><ol><li>列表是Python中的一个对象</li><li>对象（object）就是内存中专门用来存储数据的一块区域</li><li>之前我们学习的对象，像数值，它只能保存一个单一的数据</li><li>列表中可以保存多个有序的数据</li><li>列表是用来存储对象的对象</li><li>列表的使用：</li></ol><ul><li>列表的创建</li><li>操作列表中的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建列表，通过[]来创建列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [] <span class="comment"># 创建了一个空列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_list , <span class="built_in">type</span>(my_list))</span><br><span class="line">[] &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"># 当向列表中添加多个元素时，多个元素之间使用,隔开</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member = [<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;黑夜&#x27;</span>,<span class="string">&#x27;迷途&#x27;</span>,‘蔡贤权<span class="string">&#x27;,&#x27;</span>旭方<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; member</span></span><br><span class="line"><span class="string">[&#x27;</span>红色<span class="string">&#x27;,&#x27;</span>黑夜<span class="string">&#x27;,&#x27;</span>迷途<span class="string">&#x27;,‘蔡贤权&#x27;</span>,<span class="string">&#x27;旭方&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表嵌套列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mix = [<span class="number">1</span>,<span class="string">&#x27;红色&#x27;</span>,<span class="number">3.14</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mix</span><br><span class="line">[<span class="number">1</span>,<span class="string">&#x27;红色&#x27;</span>,<span class="number">3.14</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中可以保存任意的对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="number">10</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">True</span>,<span class="literal">None</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="built_in">print</span>]</span><br></pre></td></tr></table></figure><ol start="7"><li>列表中的对象都会按照插入的顺序存储到列表中，</li></ol><ul><li>第一个插入的对象保存到第一个位置，第二个保存到第二个位置</li></ul><ol start="8"><li>我们可以通过索引（index）来获取列表中的元素</li></ol><ul><li>索引是元素在列表中的位置，列表中的每一个元素都有一个索引</li><li>索引是从0开始的整数，列表第一个位置索引为0，第二个位置索引为1，第三个位置索引为2，以此类推</li></ul><ol start="9"><li><p>索引访问list中每一个位置的元素：list名[n],从0开始；用-1做索引，直接获取最后一个元素<br><img src="8%E3%80%81%E7%B4%A2%E5%BC%95%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8.png" alt="索引访问列表"></p></li><li><p>追加元素到末尾，将元素插入到指定的位置<br><img src="9%E3%80%81%E6%8F%92%E5%85%A5%E5%88%B0%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE.png" alt="插入到指定位置"></p></li><li><p>len（list名）：获得list元素的个数</p></li><li><p>extend(列表)：多个数据添加，以列表形式</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">member.extend([<span class="string">&#x27;竹林小溪&#x27;</span>,<span class="string">&#x27;Crazy迷恋&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h3><ol><li>append()：向列表的最后添加一个元素</li><li>insert()：向列表的指定位置插入一个元素</li></ol><ul><li>参数：1.要插入的位置；2.要插入的元素</li></ul><ol start="3"><li>extend()：使用新的序列来扩展当前序列，需要一个序列作为参数，它会将该序列中的元素添加到当前列表中</li><li>clear()：清空序列</li><li>pop()：根据索引删除并返回被删除的元素</li><li>remove()：删除指定值得元素，如果相同值得元素有多个，只会删除第一个</li><li>reverse(): 用来反转列表</li><li>sort()：用来对列表中的元素进行排序，默认是升序排列</li></ol><ul><li>如果需要降序排列，则需要传递一个reverse=True作为参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus.append(<span class="string">&#x27;唐僧&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus.insert(<span class="number">2</span>,<span class="string">&#x27;唐僧&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus.extend([<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus += [<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = stus.pop(<span class="number">2</span>) <span class="comment"># 删除索引为2的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;result = &#x27;</span>,result)</span><br><span class="line">result =  沙和尚</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = stus.pop() <span class="comment"># 删除最后一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;result = &#x27;</span>,result)</span><br><span class="line">result =  唐僧</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus.remove(<span class="string">&#x27;猪八戒&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,-<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;修改后&#x27;</span>,my_list)</span><br><span class="line">修改后 [<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;蜘蛛精&#x27;</span>]</span><br><span class="line"><span class="comment"># 通过while循环来遍历列表</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(stus):</span><br><span class="line">    print(stus[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过for循环来遍历列表</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line"><span class="comment">#   for 变量 in 序列 :</span></span><br><span class="line"><span class="comment">#       代码块</span></span><br><span class="line"><span class="comment"># for循环的代码块会执行多次，序列中有几个元素就会执行几次</span></span><br><span class="line"><span class="comment">#   没执行一次就会将序列中的一个元素赋值给变量，</span></span><br><span class="line"><span class="comment">#   所以我们可以通过变量，来获取列表中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> stus :</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure><h3 id="列表切片（slice）"><a href="#列表切片（slice）" class="headerlink" title="列表切片（slice）"></a>列表切片（slice）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>member</span><br><span class="line">[<span class="string">&#x27;牡丹&#x27;</span>,<span class="string">&#x27;黑夜&#x27;</span>,<span class="string">&#x27;迷途&#x27;</span>,<span class="string">&#x27;福禄娃娃&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member[<span class="number">1</span>,<span class="number">3</span>]      <span class="comment">#从1切到2，包含两个</span></span><br><span class="line">[<span class="string">&#x27;黑夜&#x27;</span>,<span class="string">&#x27;迷途&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member[:<span class="number">3</span>] <span class="comment">#从1切到2，包含三个</span></span><br><span class="line">[<span class="string">&#x27;牡丹&#x27;</span>,<span class="string">&#x27;黑夜&#x27;</span>,<span class="string">&#x27;迷途&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member[:]  <span class="comment">#相当于拷贝</span></span><br><span class="line">[<span class="string">&#x27;牡丹&#x27;</span>,<span class="string">&#x27;黑夜&#x27;</span>,<span class="string">&#x27;迷途&#x27;</span>,<span class="string">&#x27;福禄娃娃&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  如果直接赋值，如下</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member1 = member</span><br><span class="line">  这时，对member的任何修改，member1同样生效，相当于Linux中的硬连接</span><br></pre></td></tr></table></figure><h3 id="删除元素和修改元素"><a href="#删除元素和修改元素" class="headerlink" title="删除元素和修改元素"></a>删除元素和修改元素</h3></li></ul><ol><li>列表名.remove(‘存储的值’)：删除指定值</li><li>del 列表名[索引]：删除指定索引位置所在的值</li><li>del 列表名：删除这个列表</li><li>列表名.pop()：删除最后一个元素</li><li>列表名.pop(2): 删除指定位置的元素</li><li>pop(i)方法：删除指定位置的元素，i为索引位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>member.remove(<span class="string">&#x27;蔡贤权&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> member[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> member \\删除这个列表</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member.pop()   \\删除最后一个元素</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member.pop(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li>通过切片来修改列表和删除元素</li></ol><ul><li>通过切片来修改列表，在给切片进行赋值时，只能使用序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"><span class="comment"># 在给切片进行赋值时，只能使用序列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;牛魔王&#x27;</span>,<span class="string">&#x27;红孩儿&#x27;</span>] <span class="comment">#使用新的元素替换旧元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;牛魔王&#x27;</span>, <span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以多个元素来替换之前的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;牛魔王&#x27;</span>,<span class="string">&#x27;红孩儿&#x27;</span>,<span class="string">&#x27;二郎神&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;牛魔王&#x27;</span>, <span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;二郎神&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[<span class="number">0</span>:<span class="number">0</span>] = [<span class="string">&#x27;铁扇公主&#x27;</span>] <span class="comment">#向索引为0的位置插入元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;铁扇公主&#x27;</span>, <span class="string">&#x27;牛魔王&#x27;</span>, <span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;二郎神&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当设置了步长时，序列中元素的个数必须和切片中元素的个数一致</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[::<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;铁扇公主&#x27;</span>, <span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[::<span class="number">2</span>] = [<span class="string">&#x27;牛魔王&#x27;</span>,<span class="string">&#x27;红孩儿&#x27;</span>,<span class="string">&#x27;二郎神&#x27;</span>] <span class="comment">#这里会报错，由于切片选取出来是四个，而序列中只有三个</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended <span class="built_in">slice</span> of size <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>通过切片来删除元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;铁扇公主&#x27;</span>, <span class="string">&#x27;牛魔王&#x27;</span>, <span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;二郎神&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stus[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;红孩儿&#x27;</span>, <span class="string">&#x27;二郎神&#x27;</span>, <span class="string">&#x27;沙和尚&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;蜘蛛精&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stus[::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;二郎神&#x27;</span>, <span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;白骨精&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus[<span class="number">1</span>:<span class="number">3</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus)</span><br><span class="line">[<span class="string">&#x27;二郎神&#x27;</span>]</span><br></pre></td></tr></table></figure><div class="note primary flat"><p><font color=red size=3><strong>以上操作，只适用于可变序列</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span> <span class="comment">#不可变序列，无法通过索引来修改</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 list() 函数将其他的序列转换为list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">list</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="通用操作-序列"><a href="#通用操作-序列" class="headerlink" title="通用操作(序列)"></a>通用操作(序列)</h2><h3 id="和"><a href="#和" class="headerlink" title="+ 和 *"></a>+ 和 *</h3><ul><li>“+”可以将两个列表拼接为一个列表</li><li>“*”可以将列表重复指定的次数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="in-和-not-in"><a href="#in-和-not-in" class="headerlink" title="in 和 not in"></a>in 和 not in</h3></li><li>in用来检查指定元素是否存在于列表中，如果存在，返回True，否则返回False</li><li>not in用来检查指定元素是否不在列表中，如果不在，返回True，否则返回False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;牛魔王&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> stus)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;牛魔王&#x27;</span> <span class="keyword">in</span> stus)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="、-、is、is-not"><a href="#、-、is、is-not" class="headerlink" title="==、!=、is、is not"></a>==、!=、is、is not</h3></li></ul><ol><li>==、!= 比较的是对象的值是否相等 </li><li>is、is not 比较的是对象的id是否相等（比较两个对象是否是同一个对象）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a,b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="number">1962841246920</span> <span class="number">1962841246792</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a == b) <span class="comment"># a和b的值相等，使用==会返回True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a <span class="keyword">is</span> b) <span class="comment"># a和b不是同一个对象，内存地址不同，使用is会返回False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="len-、min-和max"><a href="#len-、min-和max" class="headerlink" title="len()、min()和max()"></a>len()、min()和max()</h3></li></ol><ul><li>len() 获取列表中的元素的个数</li><li>min() 获取列表中的最小值</li><li>max() 获取列表中的最大值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">100</span>,<span class="number">77</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">min</span>(arr),<span class="built_in">max</span>(arr),<span class="built_in">len</span>(arr))</span><br><span class="line"><span class="number">1</span> <span class="number">100</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="一些常见的方法"><a href="#一些常见的方法" class="headerlink" title="一些常见的方法"></a>一些常见的方法</h3></li></ul><ol><li>index()：取索引</li><li>count()：统计次数</li><li>reversed()：生成一个迭代器，强制转换为list显示</li><li>enumerate()：增加序号</li><li>zip()：拉链表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stus = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定元素在列表中的第一次出现时索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus.index(<span class="string">&#x27;沙和尚&#x27;</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index()的第二个参数，表示查找的起始位置，第三个参数，表示查找的结束位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus.index(<span class="string">&#x27;沙和尚&#x27;</span>,<span class="number">3</span>,<span class="number">7</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count()统计指定元素在列表中出现的次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stus.count(<span class="string">&#x27;牛魔王&#x27;</span>))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#reversed()：生成一个迭代器，强制转换为list显示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">1</span>,<span class="number">18</span>,<span class="number">13</span>,<span class="number">0</span>,-<span class="number">98</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">76</span>,<span class="number">32</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">reversed</span>(numbers))</span><br><span class="line">[<span class="number">32</span>, <span class="number">76</span>, <span class="number">54</span>, <span class="number">34</span>, -<span class="number">98</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#enumerate()：增加序号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(numbers))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">18</span>), (<span class="number">2</span>, <span class="number">13</span>), (<span class="number">3</span>, <span class="number">0</span>), (<span class="number">4</span>, -<span class="number">98</span>), (<span class="number">5</span>, <span class="number">34</span>), (<span class="number">6</span>, <span class="number">54</span>), (<span class="number">7</span>, <span class="number">76</span>), (<span class="number">8</span>, <span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#zip()：拉链表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(a,b))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>), (<span class="number">4</span>, <span class="number">7</span>), (<span class="number">5</span>, <span class="number">8</span>)]</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3>range()是一个函数，可以用来生成一个自然数的序列</li></ol><ul><li>该函数需要三个参数<ul><li>起始位置（可以省略，默认是0）</li><li>结束位置【不包含边界位置】</li><li>步长（可以省略，默认是1）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; range(5) # 生成一个这样的序列[0,1,2,3,4]</span><br><span class="line">r &#x3D; range(0,10,2)</span><br><span class="line">r &#x3D; range(10,0,-1) #从10开始，往0开始生成，[10,9,8,7,6,5,4,3,2,1]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for s in &#39;hello&#39;:</span><br><span class="line">...     print(s)</span><br><span class="line">...</span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br></pre></td></tr></table></figure><h2 id="序列（sequence）"><a href="#序列（sequence）" class="headerlink" title="序列（sequence）"></a>序列（sequence）</h2><div class="note primary flat"><p>即对列表、元组、字符串的内置函数的操作</p></div></li></ul></li></ul><ol><li>序列是Python中最基本的一种数据结构</li><li>数据结构指计算机中数据存储的方式</li><li>序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引）</li></ol><ul><li>并且序列中的数据会按照添加的顺序来分配索引</li></ul><ol start="4"><li>序列的分类：</li></ol><ul><li>可变序列（<font color=red size=3><strong>序列中的元素可以改变</strong></font>）：<ul><li>&gt; 列表（list）</li></ul></li><li>不可变序列（<font color=red size=3><strong>序列中的元素不能改变</strong></font>）：<ul><li>&gt; 字符串（str）    </li><li>&gt; 元组（tuple）</li></ul></li><li>刚刚我们所讲所有操作都是序列的通用操作01 02 03 三个文件中的操作</li></ul><ol start="5"><li>列表、元组和字符串的共同点：</li></ol><ul><li>都可以通过索引得到每一个元素</li><li>默认索引值总是从0开始</li><li>可以通过分片的方法得到一个范围内的元素的集合</li><li>有很多共同的操作符（重复操作符、拼接操作符、成员关系操作符）</li></ul><div class="note primary flat"><p>迭代：迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。<br> —百度百科</p></div><h2 id="元组：戴上了枷锁的列表"><a href="#元组：戴上了枷锁的列表" class="headerlink" title="元组：戴上了枷锁的列表"></a>元组：戴上了枷锁的列表</h2><ol><li>元组是一个不可变的序列</li><li>它的操作的方式基本上和列表是一致的</li><li>所以你在操作元组时，就把元组当成是一个不可变的列表就ok了</li><li>一般当我们希望数据不改变时，就使用元组，其余情况都使用列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建元组</span></span><br><span class="line"><span class="comment"># 使用()来创建元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tuple = () <span class="comment"># 创建了一个空元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_tuple,<span class="built_in">type</span>(my_tuple))</span><br><span class="line">() &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; my_tuple = (1,2,3,4,5) # 创建了一个5个元素的元组</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组是不可变对象，不能尝试为元组中的元素重新赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tuple[<span class="number">3</span>] = <span class="number">10</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取元组中的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_tuple[<span class="number">3</span>])</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当元组不是空元组时，括号可以省略</span></span><br><span class="line"><span class="comment"># 如果元组不是空元组，它里边至少要有一个逗号“,”，否则按数学公式中的小括号表示，即只是一个数值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tuple = <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tuple = <span class="number">40</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_tuple,<span class="built_in">type</span>(my_tuple))</span><br><span class="line">(<span class="number">40</span>,) &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 元组的解包（解构）</span></span><br><span class="line"><span class="class"># 解包指就是将元组当中每一个元素都赋值给一个变量</span></span><br><span class="line">&gt;&gt;&gt; my_tuple = 10,20,30,40</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d = my_tuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;a =&quot;</span>,a)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;b =&quot;</span>,b)</span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">c = <span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&quot;d =&quot;</span>,d)</span><br><span class="line">d = <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">300</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a , b)</span><br><span class="line"><span class="number">100</span> <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互a 和 b的值，这时我们就可以利用元组的解包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , b = b , a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a , b)</span><br><span class="line"><span class="number">300</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在对一个元组进行解包时，变量的数量必须和元组中的元素的数量一致</span></span><br><span class="line"><span class="comment"># 也可以在变量前边添加一个*，这样变量将会获取元组中所有剩余的元素</span></span><br><span class="line"><span class="comment"># 不能同时出现两个或以上的*变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tuple = <span class="number">10</span> , <span class="number">20</span> , <span class="number">30</span> , <span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , b , *c = my_tuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">type</span>(c))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">c</span>)</span></span><br><span class="line">[30, 40]</span><br><span class="line"></span><br><span class="line"><span class="comment">#*号放在中间变量也是可以取值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , *b , c = my_tuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>*a , *b , c = my_tuple</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: two starred expressions <span class="keyword">in</span> assignment</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以作用于字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , b , *c = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">type</span>(c))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2></li></ol><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><ol><li>如果将两个字符串进行相加，则会自动将两个字符串拼接为一个<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span> + <span class="string">&#x27;haha&#x27;</span> + <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abchaha哈哈&#x27;</span></span><br></pre></td></tr></table></figure></li><li>在创建字符串时，可以在字符串中指定占位符</li></ol><ul><li><p>%s 在字符串中表示任意字符</p></li><li><p>%f 浮点数占位符</p></li><li><p>%d 整数占位符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;Hello %s&#x27;</span>%<span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;Hello 孙悟空&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;hello %s 你好 %s&#x27;</span>%(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;hello tom 你好 孙悟空&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;hello %3.5s&#x27;</span>%<span class="string">&#x27;abcdefg&#x27;</span> <span class="comment"># %3.5s字符串的长度限制在3-5之间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;hello abcde&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;hello %s&#x27;</span>%<span class="number">123.456</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;hello 123.456&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;hello %.2f&#x27;</span>%<span class="number">123.456</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;hello 123.46&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;hello %d&#x27;</span>%<span class="number">123.95</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;hello 123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;a = %s&#x27;</span>%a)</span><br><span class="line">a = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串的复制（将字符串和数字相乘）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment"># * 在语言中表示乘法</span></span><br><span class="line"><span class="comment"># 如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a * <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="字典当索引不好用时（映射类型）"><a href="#字典当索引不好用时（映射类型）" class="headerlink" title="字典当索引不好用时（映射类型）"></a>字典当索引不好用时（映射类型）</h2></li></ul><ol><li>字典属于一种新的数据结构，称为映射（mapping）</li><li>字典的作用和列表类似，都是用来存储对象的容器</li><li><font color=red size=3><strong>列表</strong></font>存储数据的性能很好，但是查询数据的性能的很差</li><li>在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找到指定的元素</li><li>在查询元素时，字典的效率是非常快的</li><li>在字典中可以保存多个对象，每个对象都会有一个唯一的名字</li></ol><ul><li><p>这个唯一的名字，我们称其为键（key），通过key可以快速的查询value</p></li><li><p>这个对象，我们称其为值（value）</p></li><li><p>所以字典，我们也称为叫做键值对（key-value）结构</p></li><li><p>每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）</p><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3></li><li><p>创建一个保护有数据的字典</p></li><li><p>语法：</p><ul><li>{key:value,key:value,key:value}</li><li>字典的值可以是任意对象</li><li>字典的键可以是任意的不可变对象（int、str、bool、tuple …），但是一般我们都会使用str</li><li>字典的键是不能重复的，如果出现重复的后边的会替换到前边的</li></ul></li><li><p>使用dict函数创建字典【<font color=red size=3><strong>关键字参数创建字典时key值不能有引号，key都是字符串</strong></font>】</p></li><li><p>使用fromkeys()内建字典</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 &#123;&#125; 来创建字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125; <span class="comment"># 创建了一个空字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用dict函数创建字典</span></span><br><span class="line"><span class="comment">#这个含义是将一个包含有双值子元组或子序列的元组或序列转换为字典</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3 = <span class="built_in">dict</span>(((<span class="string">&#x27;F&#x27;</span>,<span class="number">70</span>),(<span class="string">&#x27;i&#x27;</span>,<span class="number">105</span>),(<span class="string">&#x27;s&#x27;</span>,<span class="number">115</span>),(<span class="string">&#x27;h&#x27;</span>,<span class="number">104</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">67</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3</span><br><span class="line">&#123;<span class="string">&#x27;F&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">105</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">115</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">104</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">67</span>&#125;</span><br><span class="line"><span class="comment">#注意：这里也可以传入字符串，但必须仅有两个字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict4=<span class="built_in">dict</span>([(<span class="number">1</span>,<span class="number">2</span>),[<span class="string">&#x27;d&#x27;</span>,<span class="number">3</span>],<span class="string">&#x27;ab&#x27;</span>,(<span class="number">4</span>,<span class="number">5</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict4</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数传入的是key=value，一个括号就可以，key不能有引号，都是字符串类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict4 = <span class="built_in">dict</span>(蔡贤权 = <span class="string">&#x27;让编程改变世界&#x27;</span>, 苍井空 = <span class="string">&#x27;让AV征服所有宅男&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict4</span><br><span class="line">&#123;<span class="string">&#x27;蔡贤权&#x27;</span>: <span class="string">&#x27;让编程改变世界&#x27;</span>, <span class="string">&#x27;苍井空&#x27;</span>: <span class="string">&#x27;让AV征服所有宅男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用fromkeys()创建字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1.fromkeys((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&#123;<span class="number">1</span>: <span class="literal">None</span>, <span class="number">2</span>: <span class="literal">None</span>, <span class="number">3</span>: <span class="literal">None</span>, <span class="number">4</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1.fromkeys((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="string">&#x27;Number&#x27;</span>)    <span class="comment">#注意这里的第二个参数只能为一个，因为是将第二个参数的全部值赋予给每一个key</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;Number&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Number&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;Number&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;Number&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1.fromkeys((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),(<span class="string">&#x27;Number&#x27;</span>,<span class="string">&#x27;caixianquan&#x27;</span>))</span><br><span class="line">&#123;<span class="number">1</span>: (<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;caixianquan&#x27;</span>), <span class="number">2</span>: (<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;caixianquan&#x27;</span>), <span class="number">3</span>: (<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;caixianquan&#x27;</span>), <span class="number">4</span>: (<span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;caixianquan&#x27;</span>)&#125;</span><br><span class="line"><span class="comment"># 无法修改，试图修改时会重新创建一个字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1.fromkeys((<span class="number">1</span>,<span class="number">3</span>),<span class="string">&#x27;xufang&#x27;</span>)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;xufang&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;xufang&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复值，后面替换前面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;</span><br><span class="line"><span class="meta">... </span><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;孙悟空&#x27;</span> ,</span><br><span class="line"><span class="meta">... </span><span class="string">&#x27;age&#x27;</span>:<span class="number">18</span> ,</span><br><span class="line"><span class="meta">... </span><span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span> ,</span><br><span class="line"><span class="meta">... </span><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;sunwukong&#x27;</span></span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d,<span class="built_in">type</span>(d))</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sunwukong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125; &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 需要根据键来获取值</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">d[<span class="string">&#x27;name&#x27;</span>],d[<span class="string">&#x27;age&#x27;</span>],d[<span class="string">&#x27;gender&#x27;</span>]</span>)</span></span><br><span class="line"><span class="class"><span class="title">sunwukong</span> 18 男</span></span><br><span class="line"><span class="class"># 如果使用了字典中不存在的键，会报错</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">d[<span class="string">&#x27;hello&#x27;</span>]</span>) <span class="title">KeyError</span>:</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    print(d[<span class="string">&#x27;hello&#x27;</span>]) KeyError: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">                             ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><ol><li>keys(): 该方法会返回字典的所有的key。返回一个序列，序列中保存有字典的所有的键</li><li>values(): 该方法会返回一个序列，序列中保存有字典的左右的值</li><li>items(): 该方法会返回字典中所有的项,返回一个序列，序列中包含有双值子序列。双值分别是，字典中的key和value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过遍历keys()来获取所有的键</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k <span class="keyword">in</span> d.keys() :</span><br><span class="line"><span class="meta">... </span>    print(k , d[k])</span><br><span class="line">...</span><br><span class="line">name 孙悟空</span><br><span class="line">age <span class="number">18</span></span><br><span class="line">gender 男</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只获取字典中的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line"><span class="meta">... </span>    print(v)</span><br><span class="line">...</span><br><span class="line">孙悟空</span><br><span class="line"><span class="number">18</span></span><br><span class="line">男</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过item获取key和value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d.items())</span><br><span class="line">dict_items([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items() :</span><br><span class="line"><span class="meta">... </span>    print(k , <span class="string">&#x27;=&#x27;</span> , v)</span><br><span class="line">...</span><br><span class="line">name = 孙悟空</span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">gender = 男</span><br></pre></td></tr></table></figure></li><li>len(): 获取字典中键值对的个数</li><li>in、not in: 检查字典中是否包含【不包含】指定的键<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#获取字典中键值对的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">len</span>(d))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> d) <span class="comment"># in 检查字典中是否包含指定的键</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li>get(key[, default]): 该方法用来根据键来获取字典中的值,可以设定取不到时默认返回值</li><li>修改字典：如果key存在则覆盖，不存在则添加<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置默认值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">孙悟空</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d.get(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d.get(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;默认值&#x27;</span>))</span><br><span class="line">默认值</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;sunwukong&#x27;</span> <span class="comment"># 修改字典的key-value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;address&#x27;</span>] = <span class="string">&#x27;花果山&#x27;</span> <span class="comment"># 向字典中添加key-value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sunwukong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;花果山&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li>setdefault(key[, default]): 可以用来向字典中添加key-value,<font color=red size=3><strong>不设置default默认为none</strong></font></li></ol><ul><li>如果key已经存在于字典中，则返回key的值，不会对字典做任何操作</li><li>如果key不存在，则向字典中添加这个key，并设置value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setdefault()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sunwukong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;花果山&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = d.setdefault(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sunwukong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;花果山&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line"><span class="string">&#x27;sunwukong&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = d.setdefault(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sunwukong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;address&#x27;</span>: <span class="string">&#x27;花果山&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>update([other]): 将其他的字典中的key-value添加到当前字典中</li></ol><ul><li>如果有重复的key，则后边的会替换到当前的</li></ul><ol start="10"><li>删除: 可以使用 del 来删除字典中的 key-value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#update()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;e&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.update(d2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#del 删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li><li>popitem(): 随机删除字典中的一个键值对，一般都会删除最后一个键值对</li></ol><ul><li>删除之后，它会将删除的key-value作为返回值返回</li><li>返回的是一个元组，元组中有两个元素，第一个元素是删除的key，第二个是删除的value</li><li>当使用popitem()删除一个空字典时，会抛出异常 KeyError: ‘popitem(): dictionary is empty’</li></ul><ol start="12"><li>pop(key[, default]): 根据key删除字典中的key-value,会将被删除的value返回！</li></ol><ul><li>如果删除不存在的key，会抛出异常。如果指定了默认值，再删除不存在的key时，不会报错，而是直接返回默认值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#popitem() 随机删除字典中的一个键值对，一般删除最后一个键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = d.popitem()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">(<span class="string">&#x27;f&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pop()，删除指定key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;这是默认值&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;这是默认值&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="13"><li>clear()用来清空字典, d.clear()</li><li>copy(): 该方法用于对字典进行浅复制</li></ol><ul><li>复制以后的对象，和原对象是独立，修改一个不会影响另一个</li><li>注意，<font color=red size=3><strong>浅复制会简单复制对象内部的值，如果值也是一个可变对象，这个可变对象不会被复制</strong></font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = d  <span class="comment">#简单赋值，id一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;d= &#x27;</span>,d,<span class="built_in">id</span>(d))</span><br><span class="line">d=  &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125; <span class="number">1962841154616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;d2= &#x27;</span>,d2,<span class="built_in">id</span>(d2))</span><br><span class="line">d2=  &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125; <span class="number">1962841154616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = d.copy() <span class="comment">#浅复制，id不同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;d3= &#x27;</span>,d3,<span class="built_in">id</span>(d3))</span><br><span class="line">d3=  &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125; <span class="number">1962841273400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解释如果值也是一个可变对象，这个可变对象不会被复制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = d.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2[<span class="string">&#x27;a&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;猪八戒&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;d = &#x27;</span>,d , <span class="built_in">id</span>(d))</span><br><span class="line">d =  &#123;<span class="string">&#x27;a&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125; <span class="number">1962841155768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;d2 = &#x27;</span>,d2 , <span class="built_in">id</span>(d2))</span><br><span class="line">d2 =  &#123;<span class="string">&#x27;a&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125; <span class="number">1962841272680</span></span><br><span class="line"><span class="comment">#可以看到值包含一个可变对象用到的是引用其地址，</span></span><br><span class="line">所以对内部的可变对象赋值就会一起发生变化</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2></li></ul><ol><li>集合和列表非常相似</li><li>不同点：</li></ol><ul><li>集合中只能存储不可变对象</li><li>集合中存储的对象是无序（不是按照元素的插入顺序保存）</li><li>集合中不能出现重复的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 &#123;&#125; 来创建集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(s)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">s</span></span></span><br><span class="line">&#123;1, 2, 3, 5, 10&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不能使用可变对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="comment"># 使用 set() 函数来创建集合</span></span><br><span class="line">s = <span class="built_in">set</span>() <span class="comment"># 空集合</span></span><br><span class="line"><span class="comment"># 可以通过set()来将序列和字典转换为集合</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;h&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用set()将字典转换为集合时，只会包含字典中的键</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3></li></ul><ol><li>使用in和not in来检查集合中的元素</li><li>使用len()来获取集合中元素的数量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></li><li>add(): 向集合中添加元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure></li><li>update(): 将一个集合中的元素添加到当前集合中</li></ol><ul><li>update()可以传递序列或字典作为参数，字典只会使用键<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(s2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update((<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(&#123;<span class="number">10</span>:<span class="string">&#x27;ab&#x27;</span>,<span class="number">20</span>:<span class="string">&#x27;bc&#x27;</span>,<span class="number">100</span>:<span class="string">&#x27;cd&#x27;</span>,<span class="number">1000</span>:<span class="string">&#x27;ef&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">40</span>, <span class="number">1000</span>, <span class="number">10</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>pop()随机删除并返回一个集合中的元素</li><li>remove()删除集合中的指定元素</li><li>clear()清空集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">40</span>, <span class="number">1000</span>, <span class="number">10</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.pop()</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">40</span>, <span class="number">1000</span>, <span class="number">10</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><font color=red size=3><strong>在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</strong></font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建两个集合</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 交集运算</span></span><br><span class="line">result = s &amp; s2 <span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 并集运算</span></span><br><span class="line">result = s | s2 <span class="comment"># &#123;1,2,3,4,5,6,7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 差集</span></span><br><span class="line">result = s - s2 <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 异或集 获取只在一个集合中出现的元素</span></span><br><span class="line">result = s ^ s2 <span class="comment"># &#123;1, 2, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;= 检查一个集合是否是另一个集合的子集</span></span><br><span class="line"><span class="comment"># 如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合超集</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">result = a &lt;= b <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt; 检查一个集合是否是另一个集合的真子集</span></span><br><span class="line"><span class="comment"># 如果超集b中含有子集a中所有元素，并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;= 检查一个集合是否是另一个的超集</span></span><br><span class="line"><span class="comment"># &gt; 检查一个集合是否是另一个的真超集</span></span><br><span class="line">print(<span class="string">&#x27;result =&#x27;</span>,result)</span><br></pre></td></tr></table></figure><h1 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h1><h2 id="函数简介（function）"><a href="#函数简介（function）" class="headerlink" title="函数简介（function）"></a>函数简介（function）</h2></li><li>函数也是一个对象</li><li>对象是内存中专门用来存储数据的一块区域</li><li>函数可以用来保存一些可执行的代码，并且可以在需要时，对这些语句进行多次的调用</li><li>创建函数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2</span>,...形参n]</span>) :</span></span><br><span class="line">    代码块</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>() :</span></span><br><span class="line">    print(<span class="string">&#x27;这是我的第一个函数！&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;今天天气真不错！&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>函数名必须要符号标识符的规范<ul><li>（可以包含字母、数字、下划线、但是不能以数字开头）    </li></ul></li></ul><ol start="5"><li>函数中保存的代码不会立即执行，需要调用函数代码才会执行</li><li>调用函数：</li></ol><ul><li>函数对象()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印fn</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fn)</span><br><span class="line">&lt;function fn at <span class="number">0x000001C9023C2EA0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">type</span>(fn))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">fn</span>是函数对象  <span class="title">fn</span>()调用函数</span></span><br><span class="line"><span class="class"># <span class="title">print</span>是函数对象 <span class="title">print</span>()调用函数</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">fn</span>()</span></span><br><span class="line"><span class="class">这是我的第一个函数!</span></span><br><span class="line"><span class="class"><span class="title">hello</span></span></span><br><span class="line"><span class="class">今天天气真不错!</span></span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>定义函数一般都是要实现某种功能的    </li></ol><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ol><li>在定义函数时，可以在函数名后的()中定义数量不等的形参，</li></ol><ul><li>多个形参之间使用,隔开</li></ul><ol start="2"><li>形参（形式参数），定义形参就相当于在函数内部声明了变量，但是并不赋值</li><li>实参（实际参数）</li></ol><ul><li>如果函数定义时，指定了形参，那么在调用函数时也必须传递实参，<ul><li>实参将会赋值给对应的形参，简单来说，有几个形参就得传几个实参<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 定义函数时指定形参</span></span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">a , b</span>) :</span></span><br><span class="line"><span class="meta">... </span>    <span class="comment"># print(&#x27;a =&#x27;,a)</span></span><br><span class="line"><span class="meta">... </span>    <span class="comment"># print(&#x27;b =&#x27;,b)</span></span><br><span class="line"><span class="meta">... </span>    print(a,<span class="string">&quot;+&quot;</span>,b,<span class="string">&quot;=&quot;</span>,a + b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 调用函数时，来传递实参</span></span><br><span class="line"><span class="meta">... </span>fn2(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="number">10</span> + <span class="number">20</span> = <span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn2(<span class="number">123</span>,<span class="number">456</span>)</span><br><span class="line"><span class="number">123</span> + <span class="number">456</span> = <span class="number">579</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="4"><li>默认形参：指定了默认值以后，如果用户传递了参数则默认值没有任何作用</li></ol><ul><li>默认参数必须在无默认值的参数后面<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a = <span class="number">5</span> , b = <span class="number">10</span> , c</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b= &#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c= &#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a , b = <span class="number">10</span> , c = <span class="number">20</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b= &#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c= &#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="number">2</span>)</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b=  <span class="number">10</span></span><br><span class="line">c=  <span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>位置参数和关键字参数：混合使用关键字和位置参数时，必须将位置参数写到前面<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a , b = <span class="number">10</span> , c = <span class="number">20</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b= &#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c= &#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="number">2</span>,c = <span class="number">30</span>)</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b=  <span class="number">10</span></span><br><span class="line">c=  <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li> 函数在调用时，解析器不会检查实参的类型。实参可以传递任意类型的对象</li><li>形参传入的是一个对象，当通过形参去修改对象时会影响到所有指向该对象的变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn4</span>(<span class="params">a</span>):</span></span><br><span class="line"><span class="meta">... </span>    a[<span class="number">0</span>] = <span class="number">30</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a,<span class="built_in">id</span>(a))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(c)</span><br><span class="line">a = [<span class="number">30</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="number">1962841246856</span></span><br><span class="line"><span class="comment">#传入的是列表c的一个浅复制，并不会影响列表C中的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(c.copy())   </span><br><span class="line">a = [<span class="number">30</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="number">1962841286408</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#和以上一样，切片没指定开始和结束，即是浅复制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(c[:])</span><br><span class="line">a = [<span class="number">30</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="number">1962841286408</span></span><br></pre></td></tr></table></figure><h2 id="不定长的参数"><a href="#不定长的参数" class="headerlink" title="不定长的参数"></a>不定长的参数</h2><div class="note primary flat"><p>在形参前边加上一个*，这样这个形参将会获取到所有的实参，<br>本质上是将获得的实参保存为一个元组，<font color=red size=3><strong>参考元组那一小节的赋值</strong></font></p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*nums</span>):</span></span><br><span class="line"><span class="meta">... </span>    result = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> nums :</span><br><span class="line"><span class="meta">... </span>        result += n</span><br><span class="line"><span class="meta">... </span>    print(result)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line"><span class="number">1468</span></span><br></pre></td></tr></table></figure></li><li>可变参数不是必须写在最后，但是注意，带*的参数后的所有参数，必须以关键字参数的形式传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个参数给a，剩下的位置参数给b的元组，c必须使用关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">a,*b,c</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line">    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line">    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn2(<span class="number">23</span>,<span class="number">453</span>,<span class="number">54</span>,c=<span class="number">21</span>,<span class="number">65</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn2(<span class="number">23</span>,<span class="number">453</span>,<span class="number">54</span>,c=<span class="number">21</span>)</span><br><span class="line">a = <span class="number">23</span></span><br><span class="line">b = (<span class="number">453</span>, <span class="number">54</span>)</span><br><span class="line">c = <span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn2(<span class="number">23</span>,<span class="number">453</span>,<span class="number">54</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: fn2() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的位置参数都给a，b和c必须使用关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">*a,b,c</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line">    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line">    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果在形参的开头直接写一个*,则要求我们的所有的参数必须以关键字参数的形式传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">*,a,b,c</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line">    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line">    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br></pre></td></tr></table></figure></li><li>*形参只能接收位置参数，而不能接收关键字参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn3</span>(<span class="params">*a</span>) :</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br></pre></td></tr></table></figure></li><li>**形参可以接收其他的关键字参数，它会将这些参数统一保存到一个字典中</li></ol><ul><li>字典的key就是参数的名字，字典的value就是参数的值</li><li>**形参只能有一个，并且必须写在所有参数的最后<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn3</span>(<span class="params">b,c,**a</span>) :</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a,<span class="built_in">type</span>(a))</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn3(b=<span class="number">1</span>,d=<span class="number">2</span>,c=<span class="number">3</span>,e=<span class="number">10</span>,f=<span class="number">20</span>)</span><br><span class="line">a = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">20</span>&#125; &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line">b = 1</span><br><span class="line">c = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>参数的解包（拆包）</li></ol><ul><li>传递实参时，也可以在序列类型的参数前添加星号，这样他会自动将序列中的元素依次作为参数传递</li><li>要求序列中元素的个数必须和形参的个数的一致<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn4</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(*t)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn4</span>(<span class="params">a,b,*c</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(*t)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = (<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>通过 **来对一个字典进行解包操作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn4</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;a =&#x27;</span>,a)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;b =&#x27;</span>,b)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;c&#x27;</span>:(<span class="number">300</span>,<span class="number">400</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn4(**d)</span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">200</span></span><br><span class="line">c = (<span class="number">300</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2></li><li>关键字：return</li><li>return 可以返回一个函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">fn2</span>():</span></span><br><span class="line"><span class="meta">... </span>            print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> fn2</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = fn() <span class="comment">#使用变量保存一个函数对象，fn返回的是fn2这个函数对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r()</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li><li>如果仅仅写一个return 或者 不写return，则相当于return None </li></ol><h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><ol><li>help()是Python中的内置函数</li><li>通过help()函数可以查询python中的函数的用法</li></ol><ul><li>语法：help(函数对象)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">print</span>) <span class="comment"># 获取print()函数的使用说明</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>在定义函数时，可以在函数内部编写文档字符串，文档字符串就是函数的说明</li><li>当我们编写了文档字符串时，就可以通过help()函数来查看函数的说明<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对形参进行类型描述只是作为文档描述，实际不起作用，可以传入任何类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">bool</span>,c:<span class="built_in">str</span>=<span class="string">&#x27;hello&#x27;</span></span>) -&gt; int:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    这是一个文档字符串的示例</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    函数的作用：。。。。。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    函数的参数：</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        a，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        b，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        c，作用，类型，默认值。。。。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(fn)</span><br><span class="line">Help on function fn <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">fn(a:int, b:bool, c:str=&#x27;hello&#x27;) -&gt; int</span><br><span class="line">    这是一个文档字符串的示例</span><br><span class="line"></span><br><span class="line">    函数的作用：。。。。。</span><br><span class="line">    函数的参数：</span><br><span class="line">        a，作用，类型，默认值。。。。</span><br><span class="line">        b，作用，类型，默认值。。。。</span><br><span class="line">        c，作用，类型，默认值。。。。</span><br></pre></td></tr></table></figure><h2 id="作用域与命名空间"><a href="#作用域与命名空间" class="headerlink" title="作用域与命名空间"></a>作用域与命名空间</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li><li>使用变量时，会优先在当前作用域中寻找该变量，如果有则使用<br>如果没有则继续去上一级作用域中寻找,以此类推</li><li>在函数中为变量赋值时，默认都是为局部变量赋值<br>如果希望在函数内部修改全局变量，则需要使用global关键字，来声明变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn3</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">global</span> a    <span class="comment">#必须且只能是声明，不能直接赋值</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">10</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;函数内部: &#x27;</span>,<span class="string">&#x27;a = &#x27;</span>,a)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn3()</span><br><span class="line">函数内部:  a =  <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3></li><li>locals(): 获取当前命名空间</li><li>globals(): 在任意位置获取全局命名空间</li><li>不建议通过命名空间来修改变量值</li></ol><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol><li>递归是解决问题的一种方式，它和循环很像</li></ol><ul><li>它的整体思想是，将一个大问题分解为一个个的小问题，直到问题无法分解时，再去解决问题</li></ul><ol start="2"><li>递归式函数的两个要件</li></ol><ul><li>基线条件<ul><li>问题可以被分解为的最小问题，当满足基线条件时，递归就不在执行了</li></ul></li><li>递归条件<ul><li>将问题继续分解的条件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li>递归深度: python3默认递归的深度为100层，可以修改递归深度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.setrecursionlimit(<span class="number">1000000</span>)      //设置递归的深度为<span class="number">100</span>万层</span><br></pre></td></tr></table></figure><h1 id="第七章-高阶函数"><a href="#第七章-高阶函数" class="headerlink" title="第七章 高阶函数"></a>第七章 高阶函数</h1><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2></li><li>接收函数作为参数，或者将函数作为返回值的函数是高阶函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">func, lst</span>):</span></span><br><span class="line">    new_list = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> lst :</span><br><span class="line">            <span class="keyword">if</span> func(n):</span><br><span class="line">                new_list.append(n)</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn4</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> i % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">print(fn(fn4, l))   <span class="comment">#[3, 6, 9]</span></span><br></pre></td></tr></table></figure></li><li>filter(): 可以从序列中过滤出符合条件的元素，保存到一个新的序列中</li></ol><ul><li>参数：<ul><li>1.函数，根据该函数来过滤序列（可迭代的结构）</li><li>2.需要过滤的序列（可迭代的结构）</li></ul></li><li>返回值：<ul><li>过滤后的新序列（可迭代的结构）</li></ul></li></ul><ol start="3"><li>匿名函数 lambda 函数表达式 （语法糖）</li></ol><ul><li>lambda函数表达式专门用来创建一些简单的函数，他是函数创建的又一种方式</li><li>语法：lambda 参数列表 : 返回值</li><li>匿名函数一般都是作为参数使用，其他地方一般不会使用</li><li>可以将匿名函数赋值给一个变量，一般不会这么做<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn6 = <span class="keyword">lambda</span> a,b : a + b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fn6(<span class="number">10</span>,<span class="number">30</span>))</span><br><span class="line"><span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">filter</span>(<span class="keyword">lambda</span> i : i &gt; <span class="number">5</span> , l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">&lt;<span class="built_in">filter</span> <span class="built_in">object</span> at <span class="number">0x000001C902B049E8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">list</span>(r))</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>map(): 可以对可迭代对象中的所有元素做指定的操作，然后将其添加到一个新的对象中返回<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="comment"># 对列表中的每个元素进行指数操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">map</span>(<span class="keyword">lambda</span> i : i ** <span class="number">2</span> , l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">list</span>(r))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure></li><li>sort(): 该方法用来对列表中的元素进行排序,默认是直接比较列表中的元素的大小</li></ol><ul><li>在sort()可以接收一个关键字参数 ， key<ul><li>key需要一个函数作为参数，当设置了函数作为参数</li><li>每次都会以列表中的一个元素作为参数来调用函数，并且使用函数的返回值来比较元素的大小<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;ddddddddd&#x27;</span>,<span class="string">&#x27;fff&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort(key=<span class="built_in">len</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;fff&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;ddddddddd&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="6"><li>sorted(): 这个函数和sort()的用法基本一致，但是sorted()可以对任意的序列进行排序</li></ol><ul><li>并且使用sorted()排序不会影响原来的对象，而是返回一个新对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">2</span>,<span class="number">5</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;排序前:&#x27;</span>,l)</span><br><span class="line">排序前: [<span class="number">2</span>, <span class="number">5</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">sorted</span>(l,key=<span class="built_in">int</span>))</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;排序后:&#x27;</span>,l)</span><br><span class="line">排序后: [<span class="number">2</span>, <span class="number">5</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2></li></ul><ol><li>将函数作为返回值返回，也是一种高阶函数</li><li>这种高阶函数我们也称为叫做闭包，通过闭包可以创建一些只有当前函数能访问的变量</li><li>可以将一些私有的数据藏到的闭包中</li><li>形成闭包的条件</li></ol><ul><li>函数嵌套</li><li>将内部函数作为返回值返回</li><li>内部函数必须要使用到外部函数的变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">     nums = []</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">n</span>):</span></span><br><span class="line">             nums.append(n)</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">sum</span>(nums)/<span class="built_in">len</span>(nums)</span><br><span class="line">     <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line">averager = make_averager()</span><br><span class="line">print(averager(<span class="number">10</span>)) <span class="comment">#10.0</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2></li></ul><ol><li>开闭原则（OCP）: 程序的设计，要求开发对程序的扩展，要关闭对程序的修改<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    r = a + b</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">begin_end</span>(<span class="params">old</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始执行~~~~&#x27;</span>)</span><br><span class="line">        result = old(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;执行结束~~~~&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> new_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = begin_end(add)</span><br><span class="line">t = f(<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始执行~~~~</span></span><br><span class="line"><span class="comment">#执行结束~~~~</span></span><br><span class="line"><span class="comment">#579#</span></span><br></pre></td></tr></table></figure></li><li>向begin_end()这种函数我们就称它为装饰器</li></ol><ul><li>通过装饰器，可以在不修改原来函数的情况下来对函数进行扩展</li><li>在开发中，我们都是通过装饰器来扩展函数的功能的</li><li>在定义函数时，可以通过@装饰器，来使用指定的装饰器，来装饰当前的函数</li><li>可以同时为一个函数指定多个装饰器，这样函数将会安装从内向外的顺序被装饰 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">begin_end</span>(<span class="params">old</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始执行~~~~&#x27;</span>)</span><br><span class="line">        result = old(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;执行结束~~~~&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> new_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn3</span>(<span class="params">old</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        用来对其他函数进行扩展，使其他函数可以在执行前打印开始执行，执行后打印执行结束</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">            old 要扩展的函数对象</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> 09        print(<span class="string">&#x27;fn3装饰~开始执行~~~~&#x27;</span>)</span><br><span class="line">        <span class="comment"># 调用被扩展的函数</span></span><br><span class="line">        result = old(*args , **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;fn3装饰~执行结束~~~~&#x27;</span>)</span><br><span class="line">        <span class="comment"># 返回函数的执行结果</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> new_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@fn3</span></span><br><span class="line"><span class="meta">@begin_end</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;大家好~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">fn3装饰~开始执行~~~~</span><br><span class="line">开始执行~~~~</span><br><span class="line">大家好~~~</span><br><span class="line">执行结束~~~~</span><br><span class="line">fn3装饰~执行结束~~~~</span><br></pre></td></tr></table></figure><h1 id="第八章-对象（Object）"><a href="#第八章-对象（Object）" class="headerlink" title="第八章 对象（Object）"></a>第八章 对象（Object）</h1><h2 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h2></li></ul><ol><li>对象是内存中专门用来存储数据的一块区域。</li><li>对象中可以存放各种数据（比如：数字、布尔值、代码）</li><li>对象由三部分组成：</li></ol><ul><li>对象的标识（id）</li><li>对象的类型（type）</li><li>对象的值（value）</li></ul><h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><ul><li>我们目前所学习的对象都是Python内置的对象</li><li>但是内置对象并不能满足所有的需求，所以我们在开发中经常需要自定义一些对象</li><li>类，简单理解它就相当于一个图纸。在程序中我们需要根据类来创建对象</li><li>类就是对象的图纸！</li><li>我们也称对象是类的实例（instance）</li><li>如果多个对象是通过一个类创建的，我们称这些对象是一类对象</li><li>像 int() float() bool() str() list() dict() …. 这些都是类</li><li>a = int(10) # 创建一个int类的实例 等价于 a = 10</li><li>我们自定义的类都需要使用大写字母开头，使用大驼峰命名法（帕斯卡命名法）来对类命名</li><li>类也是一个对象！</li><li>类就是一个用来创建对象的对象！</li><li>类是type类型的对象，定义类实际上就是定义了一个type类型的对象</li></ul><h3 id="类的简单使用"><a href="#类的简单使用" class="headerlink" title="类的简单使用"></a>类的简单使用</h3><ol><li>isinstance(): 用来检查一个对象是否是一个类的实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用类来创建对象，就像调用一个函数一样</span></span><br><span class="line">mc = MyClass() <span class="comment"># mc就是通过MyClass创建的对象，mc是MyClass的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查mc对象是否是MyClass类的一个实例</span></span><br><span class="line">result = <span class="built_in">isinstance</span>(mc,MyClass)</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在通过MyClass这个类创建的对象都是一个空对象，</span></span><br><span class="line"><span class="comment">#可以向对象中添加变量，对象中的变量称为属性</span></span><br><span class="line"><span class="comment">#语法：对象.属性名 = 属性值</span></span><br><span class="line">mc.name = <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line"></span><br><span class="line">print(mc.name)  <span class="comment">#孙悟空</span></span><br></pre></td></tr></table></figure><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3></li><li>类对象和实例对象中都可以保存属性（方法）</li></ol><ul><li>如果这个属性（方法）是所有的实例共享的，则应该将其保存到类对象中</li><li>如果这个属性（方法）是某个实例独有，则应该保存到实例对象中     </li></ul><ol start="2"><li>一般情况下，属性保存到实例对象中</li></ol><ul><li>而方法需要保存到类对象中    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试定义一个表示人的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> :</span></span><br><span class="line">    <span class="comment"># 在类的代码块中，我们可以定义变量和函数</span></span><br><span class="line">    <span class="comment"># 在类中我们所定义的变量，将会成为所有的实例的公共属性</span></span><br><span class="line">    <span class="comment"># 所有实例都可以访问这些变量</span></span><br><span class="line">    name = <span class="string">&#x27;swk&#x27;</span> <span class="comment"># 公共属性，所有实例都可以访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在类中也可以定义函数，类中的定义的函数，我们称为方法</span></span><br><span class="line">    <span class="comment"># 这些方法可以通过该类的所有实例来访问</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>) :</span></span><br><span class="line">        <span class="comment"># 方法每次被调用时，解析器都会自动传递第一个实参</span></span><br><span class="line">        <span class="comment"># 第一个参数，就是调用方法的对象本身，</span></span><br><span class="line">        <span class="comment">#   如果是p1调的，则第一个参数就是p1对象</span></span><br><span class="line">        <span class="comment">#   如果是p2调的，则第一个参数就是p2对象</span></span><br><span class="line">        <span class="comment"># 一般我们都会将这个参数命名为self</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># say_hello()这个方法，可以显示如下格式的数据：</span></span><br><span class="line">        <span class="comment">#   你好！我是 xxx</span></span><br><span class="line">        <span class="comment">#   在方法中不能直接访问类中的属性</span></span><br><span class="line">        print(<span class="string">&#x27;你好！我是 %s&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Person的实例</span></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p2.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方法，对象.方法名()</span></span><br><span class="line"><span class="comment"># 方法调用和函数调用的区别</span></span><br><span class="line"><span class="comment"># 如果是函数调用，则调用时传几个参数，就会有几个实参</span></span><br><span class="line"><span class="comment"># 但是如果是方法调用，默认传递一个参数，所以方法中至少要定义一个形参</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改p1的name属性</span></span><br><span class="line">p1.name = <span class="string">&#x27;猪八戒&#x27;</span></span><br><span class="line">p2.name = <span class="string">&#x27;沙和尚&#x27;</span></span><br><span class="line"></span><br><span class="line">p1.say_hello() <span class="comment"># &#x27;你好！我是 猪八戒&#x27;</span></span><br><span class="line">p2.say_hello() <span class="comment"># &#x27;你好！我是 沙和尚&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del p2.name # 删除p2的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.name) # swk</span></span><br><span class="line"><span class="comment"># print(p2.name) # 沙和尚</span></span><br></pre></td></tr></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3></li></ul><ol><li>在类中可以定义一些特殊方法（魔术方法）</li><li>特殊方法都是以__开头，__结尾的方法【<font color=red size=3><strong>双下划线</strong></font>】</li><li>特殊方法不需要我们自己调用，不要尝试去调用特殊方法</li><li>特殊方法将会在特殊的时刻自动调用</li><li>学习特殊方法：</li></ol><ul><li>特殊方法什么时候调用</li><li>特殊方法有什么作用</li></ul><ol start="6"><li><em>_init_\</em>(self): 初始化方法，对象创建后执行，初始化属性和方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;大家好，我是%s&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">print(p1.say_hello())</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2></li><li>封装指的是隐藏对象中一些不希望被外部所访问到的属性或方法</li><li>隐藏对象属性: 属性前加上<code>__</code>前缀【<font color=red size=3><strong>双下划线</strong></font>】</li></ol><ul><li>隐藏属性只能在类的内部访问，无法通过对象访问</li><li>实质是将名字修改为了，_类名__属性名 比如 __name -&gt; _Person__name</li><li>因此隐藏属性后可以访问改变后的名字就可以在外部访问</li></ul><ol start="3"><li><font color=red size=3><strong>一般我们会将一些私有属性（不希望被外部访问的属性）以_开头【单下划线】</strong></font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">self , name</span>):</span></span><br><span class="line">        self._name = name   </span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(p._name) <span class="comment">#孙悟空</span></span><br></pre></td></tr></table></figure></li><li>property封装器，用来将一个get方法，转换为对象的属性</li></ol><ul><li>添加为property装饰器以后，我们就可以像调用属性一样使用get方法</li><li>使用property装饰的方法，必须和属性名是一样的</li></ul><ol start="5"><li>setter方法的装饰器：@属性名.setter<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;get方法执行了~~~&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self , name</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;setter方法调用了&#x27;</span>)</span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self , age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;猪八戒&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">p.name = <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line">p.age = <span class="number">28</span></span><br><span class="line">print(p.name, p.age)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2></li><li>通过继承可以直接让子类获取到父类的方法或属性，避免编写重复性的代码，并且也符合OCP原则<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物会跑~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物睡觉~~~&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#通过用括号引入父类(Animal)，并覆写父类的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪~~~&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;狗跑~~~~&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#继承父类(Dog)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hashiqi</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fan_sha</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我是一只傻傻的哈士奇&#x27;</span>) </span><br></pre></td></tr></table></figure></li><li>在创建类时，如果省略了父类，则默认父类为object</li></ol><ul><li>object是所有类的父类，所有类都继承自object<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>issubclass(): 检查一个类是否是另一个类的子类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">issubclass</span>(Animal , Dog)) <span class="comment">#false</span></span><br><span class="line">print(<span class="built_in">issubclass</span>(Animal , <span class="built_in">object</span>)) <span class="comment">#true</span></span><br></pre></td></tr></table></figure></li><li>isinstance(): 用来检查一个对象是否是一个类的实例</li></ol><ul><li>如果这个类是这个对象的父类，也会返回True</li><li>所有的对象都是object的实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">isinstance</span>(<span class="built_in">print</span> , <span class="built_in">object</span>)) <span class="comment">#true</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>父类中的所有方法都会被子类继承，包括特殊方法，也可以重写特殊方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物会跑~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;动物睡觉~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="comment"># 希望可以直接调用父类的__init__来初始化父类中定义的属性</span></span><br><span class="line">        <span class="comment"># super() 可以用来获取当前类的父类，</span></span><br><span class="line">        <span class="comment">#   并且通过super()返回对象调用父类方法时，不需要传递self</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;狗跑~~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self,age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">d = Dog(<span class="string">&#x27;旺财&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(d.name)</span><br><span class="line">print(d.age)</span><br></pre></td></tr></table></figure></li><li>多继承: 前边父类的方法会覆盖后边父类的方法</li></ol><ul><li>类名.__bases__ 这个属性可以用来获取当前类的所有父类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>多态从字面上理解是多种形态</li><li>狗（狼狗、藏獒、哈士奇、古牧 。。。）</li><li>一个对象可以以不同的形态去呈现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="comment"># 对于say_hello()这个函数来说，只要对象中含有name属性，它就可以作为参数传递</span></span><br><span class="line"><span class="comment">#   这个函数并不会考虑对象的类型，只要有name属性即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">obj</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;你好 %s&#x27;</span>%obj.name)</span><br></pre></td></tr></table></figure><h2 id="类中的属性和方法"><a href="#类中的属性和方法" class="headerlink" title="类中的属性和方法"></a>类中的属性和方法</h2></li></ul><ol><li>类属性: 直接在类中定义的属性是类属性</li></ol><ul><li>类属性可以通过类或类的实例访问到</li><li>但是类属性只能通过类对象【<font color=red size=3><strong>即A.xxx，A是一个类</strong></font>】来修改，无法通过实例对象修改</li></ul><ol start="2"><li>实例属性： 通过实例对象添加的属性属于实例属性</li></ol><ul><li>实例属性只能通过实例对象来访问和修改，类对象无法访问修改</li></ul><ol start="3"><li>实例方法：在类中定义，以self为第一个参数的方法都是实例方法</li></ol><ul><li>实例方法在调用时，Python会将调用对象作为self传入 </li><li>实例方法可以通过实例和类去调用<ul><li>当通过实例调用时，会自动将当前调用对象作为self传入</li><li>当通过类调用时，不会自动传递self，此时我们必须手动传递self<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    <span class="comment"># 实例属性</span></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类属性，直接在类中定义的属性是类属性</span></span><br><span class="line">    <span class="comment">#   类属性可以通过类或类的实例访问到</span></span><br><span class="line">    <span class="comment">#   但是类属性只能通过类对象来修改，无法通过实例对象修改</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 实例属性，通过实例对象添加的属性属于实例属性</span></span><br><span class="line">        <span class="comment">#   实例属性只能通过实例对象来访问和修改，类对象无法访问修改</span></span><br><span class="line">        self.name = <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="comment">#   在类中定义，以self为第一个参数的方法都是实例方法</span></span><br><span class="line">    <span class="comment">#   实例方法在调用时，Python会将调用对象作为self传入  </span></span><br><span class="line">    <span class="comment">#   实例方法可以通过实例和类去调用</span></span><br><span class="line">    <span class="comment">#       当通过实例调用时，会自动将当前调用对象作为self传入</span></span><br><span class="line">    <span class="comment">#       当通过类调用时，不会自动传递self，此时我们必须手动传递self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是test方法~~~ &#x27;</span> , self)    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法    </span></span><br><span class="line">    <span class="comment"># 在类内部使用 @classmethod 来修饰的方法属于类方法</span></span><br><span class="line">    <span class="comment"># 类方法的第一个参数是cls，也会被自动传递，cls就是当前的类对象</span></span><br><span class="line">    <span class="comment">#   类方法和实例方法的区别，实例方法的第一个参数是self，而类方法的第一个参数是cls</span></span><br><span class="line">    <span class="comment">#   类方法可以通过类去调用，也可以通过实例调用，没有区别</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是test_2方法，他是一个类方法~~~ &#x27;</span>,cls)</span><br><span class="line">        print(cls.count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="comment"># 在类中使用 @staticmethod 来修饰的方法属于静态方法  </span></span><br><span class="line">    <span class="comment"># 静态方法不需要指定任何的默认参数，静态方法可以通过类和实例去调用  </span></span><br><span class="line">    <span class="comment"># 静态方法，基本上是一个和当前类无关的方法，它只是一个保存到当前类中的函数</span></span><br><span class="line">    <span class="comment"># 静态方法一般都是一些工具方法，和当前类无关</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;test_3执行了~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="comment"># 实例属性，通过实例对象添加的属性属于实例属性</span></span><br><span class="line">a.count = <span class="number">10</span></span><br><span class="line">A.count = <span class="number">100</span></span><br><span class="line">print(<span class="string">&#x27;A ,&#x27;</span>,A.count) </span><br><span class="line">print(<span class="string">&#x27;a ,&#x27;</span>,a.count) </span><br><span class="line">print(<span class="string">&#x27;A ,&#x27;</span>,A.name) <span class="comment">#会报错，没有在该类属性</span></span><br><span class="line">print(<span class="string">&#x27;a ,&#x27;</span>,a.name)   </span><br><span class="line"></span><br><span class="line">a.test() <span class="comment">#等价于 A.test(a)</span></span><br><span class="line"></span><br><span class="line">A.test_2() <span class="comment">#等价于 a.test_2()</span></span><br><span class="line"></span><br><span class="line">A.test_3()</span><br><span class="line">a.test_3()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2></li></ul></li><li>就像我们生活中会产生垃圾一样，程序在运行过程当中也会产生垃圾</li><li>程序运行过程中产生的垃圾会影响到程序的运行的运行性能，所以这些垃圾必须被及时清理</li><li>没用的东西就是垃圾</li><li>在程序中没有被引用的对象就是垃圾，这种垃圾对象过多以后会影响到程序的运行的性能<ul><li>所以我们必须进行及时的垃圾回收，所谓的垃圾回收就是讲垃圾对象从内存中删除</li></ul></li><li>在Python中有自动的垃圾回收机制，它会自动将这些没有被引用的对象删除，<ul><li><p>所以我们不用手动处理垃圾回收</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;A类&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del是一个特殊方法，它会在对象被垃圾回收前调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A()对象被删除了~~~&#x27;</span>,self)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="literal">None</span> <span class="comment"># 将a设置为了None，此时没有任何的变量对A()对象进行引用，它就是变成了垃圾</span></span><br><span class="line">A()对象被删除了~~~ &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x000001103EC265F8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 又使用一个变量b，来引用a对应的对象,这时A()对象由b进行引用，不是垃圾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> b  <span class="comment">#手动删除变量b的引用</span></span><br><span class="line">A()对象被删除了~~~ &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x000001103EC265F8</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="特殊方法-1"><a href="#特殊方法-1" class="headerlink" title="特殊方法"></a>特殊方法</h2></li></ul></li></ul><ol><li>特殊方法，也被成为魔法方法</li><li>特殊方法都是使用__开头和结尾的</li><li>特殊方法一般不需要我们手动调用，需要在一些特殊情况下自动执行</li></ol><h3 id="str"><a href="#str" class="headerlink" title="__str__()"></a>__str__()</h3><ul><li>当打印一个对象时，实际上打印的是对象的中特殊方法 __str__()的返回值</li><li> __str__（）这个特殊方法会在尝试将对象转换为字符串的时候调用</li><li>它的作用可以用来指定对象转换为字符串的结果  （print函数）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个Person类4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name , age</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.name = name</span><br><span class="line"><span class="meta">... </span>            self.age = age</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = Person(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p1) <span class="comment">#当打印一个对象时，实际上打印的是对象的中特殊方法 __str__()的返回值</span></span><br><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000001D1CAAFA160</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义__str__()方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name , age</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.name = name</span><br><span class="line"><span class="meta">... </span>            self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">&#x27;Person [name=%s , age=%d]&#x27;</span>%(self.name,self.age)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = Person(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p1)</span><br><span class="line">Person [name=孙悟空 , age=<span class="number">18</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="repr"><a href="#repr" class="headerlink" title="_\repr__()"></a>_\repr__()</h3></li><li>这个特殊方法会在对当前对象使用repr()函数时调用</li><li>它的作用是指定对象在 ‘交互模式’中直接输出的效果<ul><li>比如一个变量a = ‘hello’,如果是print(a)，则调用的是str这个特殊方法，打印hello；<br>而如果直接输出a，则调用repr这个特殊方法，打印’hello’<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在cmd命令行的交互模式下才起作用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="其他特殊方法"><a href="#其他特殊方法" class="headerlink" title="其他特殊方法"></a>其他特殊方法</h3></li></ul></li></ul><ol><li>object.__lt__(self, other) 小于 &lt;</li><li>object.__le__(self, other) 小于等于 &lt;=</li><li>object.__eq__(self, other) 等于 ==</li><li>object.__ne__(self, other) 不等于 !=</li><li>object.__gt__(self, other) 大于 &gt;<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name , age</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.name = name</span><br><span class="line"><span class="meta">... </span>            self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self , other</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.age &gt; other.age</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = Person(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2 = Person(<span class="string">&#x27;猪八戒&#x27;</span>,<span class="number">28</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p1 &gt; p2)  <span class="comment">#直接使用大于号作比较，其他类似</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p2 &gt; p1)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li>object.__ge__(self, other) 大于等于 &gt;= </li></ol><h2 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h2><ol><li>模块化，模块化指将一个完整的程序分解为一个一个小的模块</li></ol><ul><li>通过将模块组合，来搭建出一个完整的程序</li></ul><ol start="2"><li>不采用模块化，统一将所有的代码编写到一个文件中</li><li>采用模块化，将程序分别编写到多个文件中</li><li>模块化的有点：</li></ol><ul><li>方便开发</li><li>方便维护</li><li>模块可以复用！</li></ul><ol start="5"><li>在Python中一个py文件就是一个模块，要想创建模块，实际上就是创建一个python文件</li></ol><ul><li>注意：模块名要符号标识符的规范</li></ul><ol start="6"><li>在一个模块中引入外部模块</li></ol><ul><li>import 模块名 （模块名，就是python文件的名字，注意不要py）</li><li>import 模块名 as 模块别名<ul><li>可以引入同一个模块多次，但是模块的实例只会创建一个</li><li>import可以在程序的任意位置调用，但是一般情况下，import语句都会统一写在程序的开头</li><li>在每一个模块内部都有一个__name__属性，通过这个属性可以获取到模块的名字</li><li>__name__属性值为 __main__的模块是主模块，一个程序中只会有一个主模块</li><li><font color=red size=3><strong>主模块就是我们直接通过 python 执行的模块</strong></font></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test_module <span class="keyword">as</span> test</span><br><span class="line"></span><br><span class="line">print(test.__name__)</span><br><span class="line">print(__name__) <span class="comment">#当前执行的主程序</span></span><br></pre></td></tr></table></figure><ol start="7"><li>可以为引入的变量使用别名</li></ol><ul><li>语法：from 模块名 import 变量 as 别名</li><li>from m import test2 as new_test2</li></ul><h2 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h2><ul><li>包也是一个模块</li><li>当我们模块中代码过多时，或者一个模块需要被分解为多个模块时，这时就需要使用到包</li><li>普通的模块就是一个py文件，而包是一个文件夹</li><li>包中必须要一个 __init__.py 这个文件，这个文件中可以包含有包中的主要内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello是一个包，也是一个文件夹，包含有__init__.py,a.py,b.py这三个文件，指定引入hello包下的</span></span><br><span class="line">a模块和b模块</span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> a , b</span><br><span class="line"></span><br><span class="line">print(a.c)</span><br><span class="line">print(b.d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>__pycache__ 是模块的缓存文件</li><li>py代码在执行前，需要被解析器先转换为机器码，然后再执行</li><li>所以我们在使用模块（包）时，也需要将模块的代码先转换为机器码然后再交由计算机执行</li><li>而为了提高程序运行的性能，python会在编译过一次以后，将代码保存到一个缓存文件中</li><li>这样在下次加载这个模块（包）时，就可以不再重新编译而是直接加载缓存中编译好的代码即可</li></ul><h1 id="第九章-异常和文件"><a href="#第九章-异常和文件" class="headerlink" title="第九章 异常和文件"></a>第九章 异常和文件</h1><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h3><ol><li>程序在运行过程当中，不可避免的会出现一些错误，比如：</li></ol><ul><li>使用了没有赋值过的变量</li><li>使用了不存在的索引</li><li>除0</li><li>…</li></ul><ol start="2"><li>这些错误在程序中，我们称其为异常。</li><li>程序运行过程中，一旦出现异常将会导致程序立即终止，异常以后的代码全部都不会执行！    </li></ol><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><ul><li>程序运行时出现异常，目的并不是让我们的程序直接终止！</li><li>Python是希望在出现异常时，我们可以编写代码来对异常进行处理！    </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>语句</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        代码块（可能出现错误的语句）</span><br><span class="line">    <span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">        代码块（出现错误以后的处理方式）</span><br><span class="line">    <span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">        代码块（出现错误以后的处理方式）</span><br><span class="line">    <span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">        代码块（出现错误以后的处理方式）</span><br><span class="line">    <span class="keyword">else</span>：</span><br><span class="line">        代码块（没出错时要执行的语句）    </span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        代码块（该代码块总会执行）    </span><br></pre></td></tr></table></figure><ul><li><p>try是必须的 else语句有没有都行</p></li><li><p>except和finally至少有一个    </p></li><li><p>可以将可能出错的代码放入到try语句，这样如果代码没有错误，则会正常执行，</p><ul><li>如果出现错误，则会执行expect子句中的代码，这样我们就可以通过代码来处理异常</li><li>避免因为一个异常导致整个程序的终止            </li></ul></li></ul><h3 id="异常的传播（抛出异常）"><a href="#异常的传播（抛出异常）" class="headerlink" title="异常的传播（抛出异常）"></a>异常的传播（抛出异常）</h3><ul><li><p>当在函数中出现异常时，如果在函数中对异常进行了处理，则异常不会再继续传播,</p><ul><li>如果函数中没有对异常进行处理，则异常会继续向函数调用处传播,</li><li>如果函数调用处处理了异常，则不再传播，如果没有处理则继续向调用处传播</li><li>直到传递到全局作用域（主模块）如果依然没有处理，则程序终止，并且显示异常信息</li></ul></li><li><p>当程序运行过程中出现异常以后，所有的异常信息会被保存一个专门的异常对象中，</p><ul><li>而异常传播时，实际上就是异常对象抛给了调用处</li><li>比如 ： ZeroDivisionError类的对象专门用来表示除0的异常<ul><li>NameError类的对象专门用来处理变量错误的异常</li><li>….</li></ul></li></ul></li><li><p>在Python为我们提供了多个异常对象            </p></li></ul><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><ul><li>可以使用 raise 语句来抛出异常，<ul><li>raise语句后需要跟一个异常类 或 异常的实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以自定义异常类，只需要创建一个类继承Exception即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="comment"># 如果a和b中有负数，就向调用处抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># raise用于向外部抛出异常，后边可以跟一个异常类，或异常类的实例</span></span><br><span class="line">        <span class="comment"># raise Exception    </span></span><br><span class="line">        <span class="comment"># 抛出异常的目的，告诉调用者这里调用时出现问题，希望你自己处理一下</span></span><br><span class="line">        <span class="comment"># raise Exception(&#x27;两个参数中不能有负数！&#x27;)  </span></span><br><span class="line">        <span class="keyword">raise</span> MyError(<span class="string">&#x27;自定义的异常&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 也可以通过if else来代替异常的处理</span></span><br><span class="line">        <span class="comment"># return None</span></span><br><span class="line">    r = a + b</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">print(add(-<span class="number">123</span>,<span class="number">456</span>))</span><br></pre></td></tr></table></figure><h2 id="文件（File）"><a href="#文件（File）" class="headerlink" title="文件（File）"></a>文件（File）</h2></li></ul></li><li>通过Python程序来对计算机中的各种文件进行增删改查的操作</li><li>I/O(Input / Output)</li><li>操作文件的步骤：</li></ul><ol><li>打开文件</li><li>对文件进行各种操作（读、写），然后保存</li><li>关闭文件</li></ol><h3 id="打开文件（open函数）"><a href="#打开文件（open函数）" class="headerlink" title="打开文件（open函数）"></a>打开文件（open函数）</h3><ul><li><p>open(file, mode=’r’, buffering=-1, encoding_=None, errors=None, newline=None, closefd=True, opener=None)</p></li><li><p>使用open函数来打开一个文件</p></li><li><p>参数：</p><ul><li>file 要打开的文件的名字（路径）</li></ul></li><li><p>返回值：</p><ul><li>返回一个对象，这个对象就代表了当前打开的文件</li></ul></li><li><p>创建一个变量，来保存文件的名字</p></li><li><p>如果目标文件和当前文件在同一级目录下，则直接使用文件名即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在windows系统使用路径时，可以使用/来代替 \</span></span><br><span class="line"><span class="comment"># 或者可以使用 \\ 来代替 \</span></span><br><span class="line"><span class="comment"># 或者也可以使用原始字符串</span></span><br><span class="line">file_name = <span class="string">&#x27;hello\\demo.txt&#x27;</span></span><br><span class="line">file_name = <span class="string">r&#x27;hello\demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示路径，可以使用..来返回一级目录</span></span><br><span class="line">file_name = <span class="string">&#x27;../hello/demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目标文件距离当前文件比较远，此时可以使用绝对路径</span></span><br><span class="line"><span class="comment"># 绝对路径应该从磁盘的根目录开始书写</span></span><br><span class="line">file_name = <span class="string">r&#x27;C:\Users\lilichao\Desktop\hello.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">file_obj = <span class="built_in">open</span>(file_name) <span class="comment"># 打开 file_name 对应的文件</span></span><br><span class="line"></span><br><span class="line">print(file_obj)</span><br></pre></td></tr></table></figure><h3 id="关闭文件（close函数）"><a href="#关闭文件（close函数）" class="headerlink" title="关闭文件（close函数）"></a>关闭文件（close函数）</h3></li><li><p>当我们获取了文件对象以后，所有的对文件的操作都应该通过对象来进行</p></li><li><p>调用close()方法来关闭文件</p></li><li><p>关闭文件可以提升程序性能，如果有多个进程读取同一个文件不关闭就会在内存中占有多个资源而不被释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line">file_obj = <span class="built_in">open</span>(file_name)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line"><span class="comment"># 调用close()方法来关闭文件</span></span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure></li><li><p>with … as 语句</p><ul><li>在with语句中可以直接使用file_obj来做文件操作</li><li>此时这个文件只能在with中使用，一旦with结束则文件会自动close()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#with ... as 语句</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_obj :</span><br><span class="line">    <span class="comment"># 在with语句中可以直接使用file_obj来做文件操作</span></span><br><span class="line">    <span class="comment"># 此时这个文件只能在with中使用，一旦with结束则文件会自动close()</span></span><br><span class="line">    print(file_obj.read())</span><br></pre></td></tr></table></figure></li></ul></li><li><p>try捕获文件找不到问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_obj :</span><br><span class="line">        print(file_obj.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 文件不存在~~&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo2.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 调用open()来打开一个文件，可以将文件分成两种类型</span></span><br><span class="line">    <span class="comment"># 一种，是纯文本文件（使用utf-8等编码编写的文本文件）</span></span><br><span class="line">    <span class="comment"># 一种，是二进制文件（图片、mp3、ppt等这些文件）</span></span><br><span class="line">    <span class="comment"># open()打开文件时，默认是以文本文件的形式打开的，但是open()默认的编码为None</span></span><br><span class="line">    <span class="comment">#   所以处理文本文件时，必须要指定文件的编码</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        <span class="comment"># 通过 read() 来读取文件中的内容</span></span><br><span class="line">        <span class="comment"># 如果直接调用read()它会将文本文件的所有内容全部都读取出来</span></span><br><span class="line">        <span class="comment">#   如果要读取的文件较大的话，会一次性将文件的内容加载到内存中，容易导致内存泄漏</span></span><br><span class="line">        <span class="comment">#   所以对于较大的文件，不要直接调用read()</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">help</span>(file_obj.read) 帮助信息</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># read()可以接收一个size作为参数，该参数用来指定要读取的字符的数量</span></span><br><span class="line">        <span class="comment">#   默认值为-1，它会读取文件中的所有字符</span></span><br><span class="line">        <span class="comment">#   可以为size指定一个值，这样read()会读取指定数量的字符，</span></span><br><span class="line">        <span class="comment">#       每一次读取都是从上次读取到位置开始读取的</span></span><br><span class="line">        <span class="comment">#       如果字符的数量小于size，则会读取剩余所有的</span></span><br><span class="line">        <span class="comment">#       如果已经读取到了文件的最后了，则会返回&#x27;&#x27;空串</span></span><br><span class="line">        <span class="comment"># content = file_obj.read(-1)</span></span><br><span class="line">        </span><br><span class="line">        content = file_obj.read(<span class="number">6</span>)</span><br><span class="line">        content = file_obj.read(<span class="number">6</span>)</span><br><span class="line">        content = file_obj.read(<span class="number">6</span>)</span><br><span class="line">        content = file_obj.read(<span class="number">6</span>)</span><br><span class="line">        <span class="comment"># print(content)</span></span><br><span class="line">        <span class="comment"># print(len(content))</span></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError :</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>读取大文件的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        <span class="comment"># 定义一个变量，来保存文件的内容</span></span><br><span class="line">        file_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 定义一个变量，来指定每次读取的大小</span></span><br><span class="line">        chunk = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 创建一个循环来读取文件内容</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 读取chunk大小的内容</span></span><br><span class="line">            content = file_obj.read(chunk)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查是否读取到了内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">                <span class="comment"># 内容读取完毕，退出循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 输出内容</span></span><br><span class="line">            <span class="comment"># print(content,end=&#x27;&#x27;)</span></span><br><span class="line">            file_content += content</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError :</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(file_content)</span><br></pre></td></tr></table></figure></li><li><p>readline()： 该方法可以用来读取一行内容</p></li><li><p>readlines()：该方法用于一行一行的读取内容，它会一次性将读取到的内容封装到一个列表中返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_name = <span class="string">&#x27;demo.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name , encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># readline()</span></span><br><span class="line">    <span class="comment"># 该方法可以用来读取一行内容</span></span><br><span class="line">    print(file_obj.readline(),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print(file_obj.readline())</span><br><span class="line">    print(file_obj.readline())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># readlines()</span></span><br><span class="line">    <span class="comment"># 该方法用于一行一行的读取内容，它会一次性将读取到的内容封装到一个列表中返回</span></span><br><span class="line">    r = file_obj.readlines()</span><br><span class="line">    pprint.pprint(r[<span class="number">0</span>])</span><br><span class="line">    pprint.pprint(r[<span class="number">1</span>])</span><br><span class="line">    pprint.pprint(r[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#for循环也可以循环每一行读取文件内容</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> file_obj:</span><br><span class="line">        print(t)</span><br></pre></td></tr></table></figure><h4 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h4></li><li><p>读取模式</p><ul><li>t 读取文本文件（默认值）</li><li>b 读取二进制文件</li></ul></li><li><p>读取文本文件时，size是以字符为单位的</p></li><li><p>读取二进制文件时，size是以字节为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;c:/Users/lilichao/Desktop/告白气球.flac&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name , <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># print(file_obj.read(100))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将读取到的内容写出来</span></span><br><span class="line">    <span class="comment"># 定义一个新的文件</span></span><br><span class="line">    new_name = <span class="string">&#x27;aa.flac&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_name , <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> new_obj:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义每次读取的大小</span></span><br><span class="line">        chunk = <span class="number">1024</span> * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">            <span class="comment"># 从已有的对象中读取数据</span></span><br><span class="line">            content = file_obj.read(chunk)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 内容读取完毕，终止循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content :</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将读取到的数据写入到新对象中</span></span><br><span class="line">            new_obj.write(content)</span><br></pre></td></tr></table></figure><h4 id="读取文件的位置（seek函数）"><a href="#读取文件的位置（seek函数）" class="headerlink" title="读取文件的位置（seek函数）"></a>读取文件的位置（seek函数）</h4></li><li><p>seek()需要两个参数</p><ul><li>第一个 是要切换到的位置</li><li>第二个 计算位置方式<ul><li>可选值：<ol><li>从头计算，默认值</li><li>从当前位置计算</li><li>从最后位置开始计算</li></ol></li></ul></li></ul></li><li><p>tell() 方法用来查看当前读取的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo2.txt&#x27;</span>,<span class="string">&#x27;rt&#x27;</span> , encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># print(file_obj.read(100))</span></span><br><span class="line">    <span class="comment"># print(file_obj.read(30))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># seek() 可以修改当前读取的位置</span></span><br><span class="line">    file_obj.seek(<span class="number">9</span>)</span><br><span class="line">    <span class="comment"># seek()需要两个参数</span></span><br><span class="line">    <span class="comment">#   第一个 是要切换到的位置</span></span><br><span class="line">    <span class="comment">#   第二个 计算位置方式</span></span><br><span class="line">    <span class="comment">#       可选值：</span></span><br><span class="line">    <span class="comment">#           0 从头计算，默认值</span></span><br><span class="line">    <span class="comment">#           1 从当前位置计算,比如当前读到100，往后再加9个</span></span><br><span class="line">    <span class="comment">#           2 从最后位置开始计算</span></span><br><span class="line"></span><br><span class="line">    print(file_obj.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tell() 方法用来查看当前读取的位置</span></span><br><span class="line">    print(<span class="string">&#x27;当前读取到了 --&gt;&#x27;</span>,file_obj.tell())</span><br></pre></td></tr></table></figure><h3 id="文件写入（write函数）"><a href="#文件写入（write函数）" class="headerlink" title="文件写入（write函数）"></a>文件写入（write函数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;demo5.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用open()打开文件时必须要指定打开文件所要做的操作（读、写、追加）</span></span><br><span class="line"><span class="comment"># 如果不指定操作类型，则默认是 读取文件 ， 而读取文件时是不能向文件中写入的</span></span><br><span class="line"><span class="comment"># r 表示只读的</span></span><br><span class="line"><span class="comment"># w 表示是可写的，使用w来写入文件时，如果文件不存在会创建文件，如果文件存在则会截断文件</span></span><br><span class="line"><span class="comment">#   截断文件指删除原来文件中的所有内容</span></span><br><span class="line"><span class="comment"># a 表示追加内容，如果文件不存在会创建文件，如果文件存在则会向文件中追加内容</span></span><br><span class="line"><span class="comment"># x 用来新建文件，如果文件不存在则创建，存在则报错</span></span><br><span class="line"><span class="comment"># + 为操作符增加功能</span></span><br><span class="line"><span class="comment">#   r+ 即可读又可写，文件不存在会报错</span></span><br><span class="line"><span class="comment">#   w+</span></span><br><span class="line"><span class="comment">#   a+</span></span><br><span class="line"><span class="comment"># with open(file_name , &#x27;w&#x27; , encoding=&#x27;utf-8&#x27;) as file_obj:</span></span><br><span class="line"><span class="comment"># with open(file_name , &#x27;r+&#x27; , encoding=&#x27;utf-8&#x27;) as file_obj:</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name , <span class="string">&#x27;x&#x27;</span> , encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    <span class="comment"># write()来向文件中写入内容，</span></span><br><span class="line">    <span class="comment"># 如果操作的是一个文本文件的话，则write()需要传递一个字符串作为参数</span></span><br><span class="line">    <span class="comment"># 该方法会可以分多次向文件中写入内容</span></span><br><span class="line">    <span class="comment"># 写入完成以后，该方法会返回写入的字符的个数</span></span><br><span class="line">    file_obj.write(<span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">    file_obj.write(<span class="string">&#x27;bbb\n&#x27;</span>)</span><br><span class="line">    file_obj.write(<span class="string">&#x27;ccc\n&#x27;</span>)</span><br><span class="line">    r = file_obj.write(<span class="built_in">str</span>(<span class="number">123</span>)+<span class="string">&#x27;123123\n&#x27;</span>)</span><br><span class="line">    r = file_obj.write(<span class="string">&#x27;今天天气真不错&#x27;</span>)</span><br><span class="line">    print(r)    <span class="comment">#返回写入的字符数</span></span><br></pre></td></tr></table></figure><h3 id="文件的其他操作"><a href="#文件的其他操作" class="headerlink" title="文件的其他操作"></a>文件的其他操作</h3></li></ul><ol><li>os.listdir()： 获取指定目录的目录结构<ul><li>需要一个路径作为参数，会获取到该路径下的目录结构，默认路径为<font color=black size=4><strong>.</strong></font>当前目录</li><li>该方法会返回一个列表，目录中的每一个文件（夹）的名字都是列表中的一个元素</li></ul></li><li>os.getcwd(): 获取当前所在的目录</li><li>os.chdir(): 切换当前所在的目录 作用相当于 cd</li><li>os.mkdir(“aaa”): 在当前目录下创建一个名字为 aaa 的目录</li><li>os.rmdir(‘abc’): 删除名为abc的目录</li><li>os.remove(‘aa.txt’): 删除名为aa.txt的文件</li><li>os.rename(‘旧名字’,’新名字’): 可以对一个文件进行重命名，也可以用来移动一个文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.listdir() 获取指定目录的目录结构</span></span><br><span class="line"><span class="comment"># 需要一个路径作为参数，会获取到该路径下的目录结构，默认路径为 . 当前目录</span></span><br><span class="line"><span class="comment"># 该方法会返回一个列表，目录中的每一个文件（夹）的名字都是列表中的一个元素</span></span><br><span class="line">r = os.listdir()</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.getcwd() 获取当前所在的目录</span></span><br><span class="line">r = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.chdir() 切换当前所在的目录 作用相当于 cd</span></span><br><span class="line"><span class="comment"># os.chdir(&#x27;c:/&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r = os.getcwd()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="comment"># os.mkdir(&quot;aaa&quot;) # 在当前目录下创建一个名字为 aaa 的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;abc&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open(&#x27;aa.txt&#x27;,&#x27;w&#x27;)</span></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="comment"># os.remove(&#x27;aa.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rename(&#x27;旧名字&#x27;,&#x27;新名字&#x27;) 可以对一个文件进行重命名，也可以用来移动一个文件</span></span><br><span class="line"><span class="comment"># os.rename(&#x27;aa.txt&#x27;,&#x27;bb.txt&#x27;)</span></span><br><span class="line">os.rename(<span class="string">&#x27;bb.txt&#x27;</span>,<span class="string">&#x27;c:/users/lilichao/desktop/bb.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pprint(r)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学课程 </category>
          
          <category> Prerequisites </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 计算机科学课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+nginx服务器上部署博客(二)</title>
      <link href="/hexo/2020/07/03/hexo-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-%E4%BA%8C/"/>
      <url>/hexo/2020/07/03/hexo-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h1><ul><li>ssh免密登录</li><li>创建git仓库，配置hooks</li><li>安装hexo</li><li>部署hexo并发布</li><li>在新电脑上继续使用hexo</li></ul><h1 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h1><p>服务器由于是在国外，使用密码登录容易遭受攻击，服务器上现有两个账号，一个root账号和一个普通用户账号caixianquan，将两个账号都设置为ssh免密登录，更具安全性，也在git连接远程仓库时不会有问题。</p><h2 id="root下免密登录"><a href="#root下免密登录" class="headerlink" title="root下免密登录"></a>root下免密登录</h2><ul><li><p>首先需要生成公钥和私钥，在<code>root账户</code>下输入：<code>ssh-keygen -t rsa</code>，然后如下操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): 建议直接回车使用默认路径  </span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>  </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): 输入密码短语（留空则直接回车）  </span><br><span class="line">Enter same passphrase again: 重复密码短语  </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.  </span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.  </span><br><span class="line">The key fingerprint is:  </span><br><span class="line">05:71:53:92:96:ba:53:20:55:15:7e:5d:59:85:32:e4 root@<span class="built_in">test</span>  </span><br><span class="line">The key<span class="string">&#x27;s randomart image is:  </span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+  </span></span><br><span class="line"><span class="string">| o o .. |  </span></span><br><span class="line"><span class="string">| . o oo.+ . |  </span></span><br><span class="line"><span class="string">| o.+... = |  </span></span><br><span class="line"><span class="string">| ...o |  </span></span><br><span class="line"><span class="string">| o S |  </span></span><br><span class="line"><span class="string">| . |  </span></span><br><span class="line"><span class="string">| |  </span></span><br><span class="line"><span class="string">| |  </span></span><br><span class="line"><span class="string">| |  </span></span><br><span class="line"><span class="string">+--------------------+</span></span><br></pre></td></tr></table></figure><p>此时在/root/.ssh/目录下生成了2个文件，id_rsa为私钥，id_rsa.pub为公钥。私钥自己下载到本地电脑妥善保存（丢了服务器可就没法再登陆了），为安全，建议删除服务器端的私钥。公钥则可以任意公开。【这里我保存私钥到坚果云的我的服务器目录下，删除了服务器上面的私钥】</p></li><li><p>使用以下命令将公钥导入到VPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果没有.ssh目录和authorized_keys文件，可以手动创建</p></div></li><li><p>修改 /etc/ssh/sshd_config 文件，找到其中这几行配置注释，并指定需要的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许root认证登录</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="comment">#允许密钥认证</span></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"><span class="comment">#默认公钥存放的位置</span></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>保存后重启SSH服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><div class="note info flat"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">如果没有RSAAuthentication这行注释或者配置项，就不用理会，这是因为：</span><br><span class="line">为什么在 CentOS7.4 的配置文件中没有 RSAAuthentication 这一行？</span><br><span class="line"></span><br><span class="line">CentOS7.4相对于之前版本，做了一些与sshd相关的安全更新来加强sshd的安全性。其中之一就是弃用RSAAuthentication支持。从CentOS7.3升级上来的用户会在升级时被告知这一变化。</span><br><span class="line">作为从CentOS7.4直接开始使用，也没有阅读过发行说明的我，自然是不清楚这一改动。</span><br><span class="line"></span><br><span class="line">看到这里又产生了新的问题：</span><br><span class="line">什么是弃用 RSAAuthentication 支持，明明还可以使用密钥对进行ssh登录，是默认开启不允许关闭的意思吗？</span><br><span class="line"></span><br><span class="line">要回答这个问题，首先要了解ssh通讯协议，目前SSH的通讯协议分为第一代和第二代，不用多说第二代有更多功能、选项、和更高的安全性，它是在2006 正式由IETF发表，至今已有十年。由于两代SSH协定并不兼容，我们只能二选其一，CentOS 7的SSH预设使用第二代协定，所以无需做任何设定。</span><br><span class="line">在同时支持这两个协议的系统中，可以通过 /etc/ssh/sshd_config 配置文件中的</span><br><span class="line">Protocol 2</span><br><span class="line">来制定使用哪一个版本。</span><br><span class="line"></span><br><span class="line">RSAAuthentication （rsa认证）是只支持第1代ssh通讯协议使用的配置项，在CentOS7.4中被废除了，而且前面提到过CentOS7开始预设使用第二代通讯协议，在CentOS7.4中没有找到指定协议版本的配置行，个人猜测是CentOS7.4全面抛弃第1代协议。</span><br><span class="line"></span><br><span class="line">第2代ssh通讯协议的密钥验证选项是</span><br><span class="line"><span class="comment">#PubkeyAuthentication yes</span></span><br><span class="line"></span><br><span class="line">这个选项默认是注释掉的，并且是默认开启的，因此我们在使用第二代ssh通讯协议时不需要再去纠结 RSAAuthentication 选项了，在CentOS7.4中其强行添加 RSAAuthentication 配置会触发系统对它的废除提示。</span><br><span class="line"></span><br><span class="line">reprocess config line 38: Deprecated option RSAAuthentication</span><br><span class="line">看到这里所有的疑惑就都解开了，将这个小坑记录下来希望后来的同学能少走弯路。</span><br></pre></td></tr></table></figure></div><p>在使用SSH Key登录验证成功后，还是为了安全，建议关闭root用户使用密码登陆，关闭的方法如下：</p></li></ul><p>修改SSH的配置文件/etc/ssh/sshd_config，找到下面1行：<br><code>PasswordAuthentication yes</code><br>修改为：<br><code>PasswordAuthentication no</code><br>保存后重启SSH服务。<br><code>systemctl restart sshd</code></p><div class="note success flat"><p>之后只要在个人电脑上下载坚果云上的私钥，使用该私钥即可登录服务器root账号。</p></div><h2 id="普通账户下免密登录"><a href="#普通账户下免密登录" class="headerlink" title="普通账户下免密登录"></a>普通账户下免密登录</h2><ul><li><del>之前在root下已经生成了私钥和公钥，直接将公钥复制到普通账户下的.ssh目录下的authorized_keys文件下，如果没有该目录及文件则手动创建。</del></li><li><font color=red size=3><strong><em>上述方法有可能会报权限拒绝问题【使用私钥ssh连接】</em></strong></font></li></ul><ol><li>git bash中ssh连接时报如下错误：Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</li><li>在xshell使用私钥连接时报错：所选的用户密钥未在远程主机上注册</li><li>登录目标服务器查看sshd日志信息，日志信息目录为，/var/log/secure，有如下错误：Jul 22 14:20:33 v138020.go sshd[4917]: Authentication refused: bad ownership or modes for directory /home/xinhailong</li><li>原因：sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。用户目录权限为 755 或者 700，就是不能是77x。.ssh目录权限一般为755或者700。rsa_id.pub 及authorized_keys权限一般为644，rsa_id权限必须为600</li><li>如果是手动创建的.ssh和authorized_keys文件时就要安装以上重新配置权限即可。参考地址：<a href="https://blog.csdn.net/kmhysoft/article/details/70432633">ssh免密码登陆设置时Authentication refused: bad ownership or modes错误解决方法</a></li></ol><ul><li>在本地windows下在使用ssh的客户端软件中修改配置文件，如git工具，在安装目录下有ssh的配置文件，如下：<br><img src="1%E3%80%81%E4%BF%AE%E6%94%B9ssh%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="修改ssh客户端配置文件"><br>修改ssh_config文件两处地方【如果前有#注释，去掉】：<br><img src="2%E3%80%81%E5%A1%AB%E5%85%A5%E7%A7%81%E9%92%A5%E5%92%8C%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7.png" alt="填入私钥和修改端口号"><div class="note primary flat"><p>如果有需要就修改端口号，否则默认是22端口登录，且在git连接远程仓库push时也是用默认端口，无法指定【暂未知】</p></div></li></ul><p>这样就可以在git bash中使用ssh免密登录普通账号，使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip地址</span><br></pre></td></tr></table></figure><h1 id="创建git仓库，配置hooks"><a href="#创建git仓库，配置hooks" class="headerlink" title="创建git仓库，配置hooks"></a>创建git仓库，配置hooks</h1><div class="note warning flat"><p>注意在普通用户下操作</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir repos</span><br><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">git init --bare blog.git<span class="comment">#创建一个裸仓库</span></span><br><span class="line">vim blog.git/hooks/post-receive<span class="comment">#直接编辑post-receive文件【没有则自动创建】</span></span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/opt/blog --git-dir=/home/caixianquan/repos/blog.git checkout -f</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>/opt/blog文件夹最好已经创建存在，未测试不存在情况</p></div><p>保存退出后授予文件权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><div class="note info flat"><p>npm 的仓库在国外，这就意味着下载可能非常慢，或者不可以下载。因此我的解决方案是用淘宝的镜像源替代。</p><p>替代方案很简单只需要在命令行输入 <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> 即可，然后每次需要使用 <code>npm</code> 命令时，将 <code>npm</code> 换成 <code>cnpm</code> 即可。</p></div><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>npm install -g hexo-cli</code><br>安装完成后依旧使用 <code>hexo -v</code> 查看以下版本号。<br><img src="3%E3%80%81%E6%9F%A5%E7%9C%8Bhexo%E7%89%88%E6%9C%AC.png" alt="查看hexo版本"></p><h2 id="初始化一个-Hexo-博客"><a href="#初始化一个-Hexo-博客" class="headerlink" title="初始化一个 Hexo 博客"></a>初始化一个 Hexo 博客</h2><p>在任意位置创建一个文件夹，hexo博客将出现在这个文件夹。在该文件夹下右键使用git bash打开，输入命令<code>hexo init .</code>，然后程序会自动克隆一个 Hexo 项目到当前目录。</p><div class="note warning flat"><p>注意有一个点代表当前文件夹！！</p></div><p>查看hexo博客，通过<code>hexo s</code>启动本地服务器，访问：<a href="http://localhost:4000即可查看博客。">http://localhost:4000即可查看博客。</a></p><h2 id="安装主题，hexo优化"><a href="#安装主题，hexo优化" class="headerlink" title="安装主题，hexo优化"></a>安装主题，hexo优化</h2><p>可以修改默认主题，并制定个性化界面，这里不展开叙述。</p><h1 id="部署hexo并发布"><a href="#部署hexo并发布" class="headerlink" title="部署hexo并发布"></a>部署hexo并发布</h1><ul><li>配置博客根目录下的<code>_config.yml</code> 文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git   <span class="comment">#必须为git</span></span><br><span class="line">  repo: caixianquan@www.caixianquan.tk:/home/caixianquan/repos/blog.git  <span class="comment">#Git仓库</span></span><br><span class="line">  branch: master <span class="comment">#分支</span></span><br></pre></td></tr></table></figure></li><li>在 <code>package.json</code> 中添加 npm 脚本<br>【暂且添加一行，后面同步hexo源文件时再修改】<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span>,</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>以后本地调试使用<code>npm start</code>,即可调用以上命令，快速调试，部署到服务器时使用命令<code>npm deploy</code>。</li></ul><h1 id="在新电脑上继续使用hexo"><a href="#在新电脑上继续使用hexo" class="headerlink" title="在新电脑上继续使用hexo"></a>在新电脑上继续使用hexo</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>上传到服务器上的hexo.git仓库，后面用没安装过hexo的电脑可以直接clone下来，安装nodejs和hexo，就可以使用<br>参考：<a href="https://www.jianshu.com/p/153490a029a5">迁移hexo到新电脑</a></p><h2 id="创建非裸仓库"><a href="#创建非裸仓库" class="headerlink" title="创建非裸仓库"></a>创建非裸仓库</h2><div class="note info flat"><p>尝试过在部署的时候使用的是非裸仓库，然后在这个仓库下新建一个分支来保存源文件，但这样会有一个问题，每次checkout时仓库中的文件会发生变化，很莫名其妙，为了尽量减少错误和麻烦，直接创建一个新的非裸仓库来保存源文件，而使用裸仓库来同步博客的资源文件。</p></div><div class="note warning flat"><p>以下最好在普通用户下操作</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">mkdir hexo.git</span><br><span class="line"><span class="built_in">cd</span> hexo.git</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>即可生成一个非裸仓库</p><h2 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h2><ul><li>先将远程仓库hexo.git克隆到本地，方便后续上传。在本地找一个文件夹右键点击git bash，执行以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 用户名@服务器ip:/路径/.git</span><br></pre></td></tr></table></figure><div class="note info flat"><p>这里是需要服务器的用户名和密码，如果有免密登录，即可直接下载</p></div><ul><li><p>克隆后的本地仓库中除了.git文件夹其他删除，复制之前的博客源文件到该仓库中，除了.deploy_git文件夹，源文件应该包含一个.gitignore文件，如果没有，新建，加入以下内容</p><div class="note info flat"><p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p></div>     <p><img src="7%E3%80%81%E6%8B%B7%E8%B4%9D%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="拷贝源文件到本地仓库"></p></li><li><p>如果使用到主题库，比如butterfly，会报如下错误：<br><img src="8%E3%80%81git%E4%BB%93%E5%BA%93%E5%B5%8C%E5%A5%97git%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99.png" alt="git仓库嵌套git仓库报错"><br>那么需要删除掉clone下来的主题库的.git和.github文件夹<br><img src="11%E3%80%81clone%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%BB%E9%A2%98%E5%AD%98%E5%9C%A8.git%E5%92%8C.github%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="clone下来的主题存在.git和.github文件夹"><br>接着需要删除掉缓存的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached directory</span><br><span class="line">git add directory</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注：directory为子文件夹的路径。<br>但是执行git rm –cached directory时，提示</p><p>fatal: Unable to create ‘xx/.git/index.lock’: File exists.<br>执行<code>rm -f xx/.git/index.lock</code>后解决</p><p>参考地址：<a href="https://www.cnblogs.com/howdop/p/5583342.html">git 无法添加文件夹下文件</a></p></div><p>而后，在本地仓库中提交一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m <span class="string">&quot;add branch&quot;</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>在push到远程仓库时，报如下错误：<br><img src="9%E3%80%81push%E6%97%B6%E6%9D%83%E9%99%90%E6%8B%92%E7%BB%9D.png" alt="push时权限拒绝"><br>原因可能是不是所在用户创建的仓库，修改所有者即可</p></li></ul><p>新的报错问题：<br><img src="10%E3%80%81%E6%8B%92%E7%BB%9Dpush.png" alt="拒绝push"><br>这是由于git默认拒绝了push操作，需要进行设置，修改【在服务器上的git仓库中】.git/config文件后面添加如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[receive]</span><br><span class="line">denyCurrentBranch = ignore</span><br></pre></td></tr></table></figure><p>重新git push即可</p><div class="note primary flat"><p>若在服务器上看不到同步的文件，需要使用命令<code>git checkout master</code>进行切换分支</p></div> <h2 id="在新电脑上安装git和nodejs"><a href="#在新电脑上安装git和nodejs" class="headerlink" title="在新电脑上安装git和nodejs"></a>在新电脑上安装git和nodejs</h2><p>步骤省略，参考hexo安装过程，其中还要设置ssh免密登录</p><h2 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ul><li>在任意文件夹下，执行以下命令，注意如果是为hexo.git,那么会生成一个hexo文件夹<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 用户名@服务器ip:/路径/.git</span><br></pre></td></tr></table></figure></li><li>进入到克隆到的文件夹内，执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><div class="note info flat"><p>npm install的作用？<br>每一个rn项目都有一个package.json文件，里面有很多组件信息<br>使用npm install将按照package.json安装所需要的组件放在生成的node_modules文件夹中<br>rn项目下的每一个文件中都可以通过import引入node_modules的组件来加以使用</p></div></li></ul><h3 id="hexo-command-not-found"><a href="#hexo-command-not-found" class="headerlink" title="hexo: command not found"></a>hexo: command not found</h3><p>如果在命令行下直接使用hexo命令提示该命令无法找到时，可能原因是node_modules下的.bin文件夹没有添加进系统环境变量PATH<br><img src="6%E3%80%81%E5%B0%86node_modules%E6%B7%BB%E5%8A%A0%E8%BF%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%AD.png" alt="将node_modules添加进环境变量中"></p><h2 id="生成与部署"><a href="#生成与部署" class="headerlink" title="生成与部署"></a>生成与部署</h2><p>在该文件夹内的package.json可以添加脚本，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;d&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp;  hexo g -d &amp;&amp; git status &amp;&amp; git add -A &amp;&amp; git commit -m &#x27;auto&#x27; &amp;&amp; git push&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>这里的scripts在package.json 中已经有，增加属性即可，这里是新增了一个命令d，那么在使用时需要执行的命令为<code>npm run d</code>，这样就可以直接一键部署到服务器顺带也将源文件也同步到远程仓库中</p></div><div class="note info flat"><p>如果A和B都有clone仓库，而且在电脑A修改过源文件并且已经push到服务器，在电脑B上就需要先git pull一下，再进行博客编写</p></div><h1 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h1><p>到这里整个hexo搭建算是完成了，最后是将普通用户的shell登录操作禁止掉，仅可以git操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如果不是root用户请切换至root用户</span><br><span class="line">su root</span><br><span class="line">// 查看 git-shell 是否在登录方式里面</span><br><span class="line">cat /etc/shells </span><br><span class="line">// 查看是否安装</span><br><span class="line"><span class="built_in">which</span> git-shell </span><br><span class="line">vi /etc/shells</span><br><span class="line">// 添加上2步显示出来的路劲，通常在 /usr/bin/git-shell</span><br></pre></td></tr></table></figure><p><img src="4%E3%80%81%E6%B7%BB%E5%8A%A0git-shell.png" alt="添加git-shell"><br><img src="5%E3%80%81%E7%BC%96%E8%BE%91shells%E6%96%87%E4%BB%B6.png" alt="编辑shells文件"></p><p>修改<code>/etc/passwd</code>中的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 修改passwd文件</span><br><span class="line">vi /etc/passwd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将原来的</span><br><span class="line">git:x:1000:1000::/home/caixianquan:/bin/bash</span><br><span class="line"></span><br><span class="line">// 修改为</span><br><span class="line">git:x:1000:1000::/home/caixianquan:/bin/git-shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+nginx服务器上部署博客(一)</title>
      <link href="/hexo/2020/06/29/hexo-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-%E4%B8%80/"/>
      <url>/hexo/2020/06/29/hexo-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><div class="note info flat"><ul><li>VPS服务器，CentOS7【搬瓦工官网服务器】</li><li>Windows PC（本地环境使用win 10）</li></ul></div><h1 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h1><ul><li>服务器CentOS上安装git</li><li>服务器CentOS上安装和配置nginx</li><li>本地Windows安装node.js与git</li></ul><h1 id="服务器上安装Git"><a href="#服务器上安装Git" class="headerlink" title="服务器上安装Git"></a>服务器上安装Git</h1><h2 id="服务器上创建用户"><a href="#服务器上创建用户" class="headerlink" title="服务器上创建用户"></a>服务器上创建用户</h2><div class="note danger flat"><p>这里创建一个普通用户来对接本地的git，进行之后的push等操作，避免使用root，以防风险。同时也为了使后面使用ssh免密登录而做准备。</p></div><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><figcaption><span>创建用户</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@107  ~]<span class="comment"># useradd caixianquan</span></span><br><span class="line">[root@107  ~]<span class="comment"># passwd caixianquan</span></span><br><span class="line">Changing  password  <span class="keyword">for</span> user caixianquan.</span><br><span class="line">New  password:</span><br><span class="line">Retype  new  password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><figure class="highlight bash"><figcaption><span>授予用户权限</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看sudoers文件权限，只有read权限</span></span><br><span class="line">[root@107  ~]<span class="comment"># ll /etc/sudoers</span></span><br><span class="line">-r--r-----  1  root  root  4328  Nov  28  2019  /etc/sudoers</span><br><span class="line"><span class="comment">#修改文件权限为700，可以在root下修改文件内容</span></span><br><span class="line">[root@107  ~]<span class="comment"># chmod 700 /etc/sudoers</span></span><br><span class="line">[root@107  ~]<span class="comment"># ll /etc/sudoers</span></span><br><span class="line">-rwx------  1  root  root  4328  Nov  28  2019  /etc/sudoers</span><br><span class="line">[root@107  ~]<span class="comment"># vim /etc/sudoers</span></span><br></pre></td></tr></table></figure><p>找到以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  Allow  root  to  run  any  commands  anywhere</span></span><br><span class="line">root  ALL=(ALL)  ALL</span><br></pre></td></tr></table></figure><p>在其下面添加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caixianquan  ALL=(ALL)  ALL</span><br></pre></td></tr></table></figure><p>保存退出，将权限修改回来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@107  ~]<span class="comment"># chmod 400 /etc/sudoers</span></span><br><span class="line">[root@107  ~]<span class="comment"># ll /etc/sudoers</span></span><br><span class="line">-r--------  1  root  root  4360  Jun  5  10:15  /etc/sudoers</span><br></pre></td></tr></table></figure><h2 id="服务器上安装Git-1"><a href="#服务器上安装Git-1" class="headerlink" title="服务器上安装Git"></a>服务器上安装Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@107 ~]<span class="comment"># yum install git</span></span><br><span class="line">[root@107 ~]<span class="comment"># git config --global user.name &quot;caixianquan&quot;</span></span><br><span class="line">[root@107 ~]<span class="comment"># git config --global user.email &quot;854191181@qq.com&quot;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>网上解释：因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></div><h1 id="服务器上安装和配置Nginx"><a href="#服务器上安装和配置Nginx" class="headerlink" title="服务器上安装和配置Nginx"></a>服务器上安装和配置Nginx</h1><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@107 ~]<span class="comment"># yum install nginx # 安装nginx</span></span><br><span class="line">[root@107 ~]<span class="comment"># systemctl start nginx # 启动nginx</span></span><br><span class="line">[root@107 ~]<span class="comment"># systemctl enable nginx.service # 设置为开机启动</span></span><br><span class="line">[root@107 ~]<span class="comment"># systemctl status nginx # 查看nginx服务状态</span></span><br></pre></td></tr></table></figure><p>此时用浏览器访问服务器公网ip就可以看到<br><img src="1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8Bnginx%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="浏览器查看nginx是否启动成功"></p><h2 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h2><p>如果使用yum安装的nginx，一般都会默认安装有SSL模块，手动安装的就可以参考下面文章。<br>该小节参考地址：<a href="https://blog.csdn.net/weixin_37264997/article/details/84525444?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase">Nginx 配置 HTTPS 完整过程</a></p><p><a href="https://blog.csdn.net/GX_1_11_real/article/details/85784689">使用yum安装下的nginx，添加模块的方法</a></p><h3 id="nginx的ssl模块安装"><a href="#nginx的ssl模块安装" class="headerlink" title="nginx的ssl模块安装"></a>nginx的ssl模块安装</h3><div class="note info flat"><ul><li>查看 nginx 是否安装 <code>http_ssl_module</code> 模块。<br>注意：这里的V是大写，小写不会显示安装的模块信息</li></ul></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="3%E3%80%81%E6%9F%A5%E7%9C%8Bnginx%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97%E4%BF%A1%E6%81%AF.png" alt="查看nginx安装模块信息"><br>如果出现 <code>configure arguments: --with-http_ssl_module</code>, 则已安装。</p><h3 id="SSL证书获取"><a href="#SSL证书获取" class="headerlink" title="SSL证书获取"></a>SSL证书获取</h3><p>在阿里云申请免费证书，如果域名不在阿里云，还需要<br>进行域名解析。百度查找申请SSL证书。</p><h3 id="SSL证书部署"><a href="#SSL证书部署" class="headerlink" title="SSL证书部署"></a>SSL证书部署</h3><p>从阿里云上下载ssl证书文件压缩包（包含pem和key文件）。可以放到nginx配置目录下。配置文件nginx.conf在后面列出。</p><h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    gzip                on;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.caixianquan.tk;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /opt/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.caixianquan.tk;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      /etc/nginx/4043710_www.caixianquan.tk.pem;</span><br><span class="line">        ssl_certificate_key  /etc/nginx/4043710_www.caixianquan.tk.key;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /opt/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>可以去掉http的server配置信息，保留也不会出什么问题【如果没有配置SSL证书，就需要配置http信息】；<br>配置ssl_certificate和ssl_certificate_key属性，使用绝地路径，也可以使用相对路径；<br>使用yum安装的nginx服务，在配置服务器名称后会在conf.d文件夹下生成一个以域名为名的conf文件，里面是http重定向。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.caixianquan.tk;</span><br><span class="line">    rewrite ^(.*) https://<span class="variable">$server_name</span>:4431<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果启动时出现如下错误：<br><img src="2%E3%80%81%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF.png" alt="出现的错误">    </p><div class="note warning flat"><p>暂未解决，重新安装的Nginx服务。</p></div>    <h1 id="本地Windows安装node-js与git"><a href="#本地Windows安装node-js与git" class="headerlink" title="本地Windows安装node.js与git"></a>本地Windows安装node.js与git</h1><p>主要是通过软件直接安装，具体直接百度即可。然后在系统环境变量中将node.js和git的安装目录填写到path变量中【如果安装时没有自动添加环境的话】</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxifier使用教程</title>
      <link href="/hexo/2020/06/29/Proxifier%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/hexo/2020/06/29/Proxifier%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\hexo\assets\css\APlayer.min.css"><script src="\hexo\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\hexo\assets\js\Meting.min.js"></script><h1 id="配置顺序–三步"><a href="#配置顺序–三步" class="headerlink" title="配置顺序–三步"></a>配置顺序–三步</h1><ul><li>  代理服务器配置</li><li>  代理规则设置</li><li>  域名解析设置</li></ul><p><img src="1%E3%80%81%E9%85%8D%E7%BD%AE%E9%A1%BA%E5%BA%8F.png" alt="配置顺序"></p><h1 id="代理服务器配置"><a href="#代理服务器配置" class="headerlink" title="代理服务器配置"></a>代理服务器配置</h1><ul><li>  点击Proxy Server按钮</li><li>  add</li><li>  输入本地shadowshocks的ip（默认127.0.0.1）和端口（默认1080）</li><li>  选择SHOCKS Versin 5</li><li>  然后点击check</li><li>  OK</li></ul><p><img src="2%E3%80%81%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="代理服务器配置"></p><p>显示Proxy is ready to work with Proxfier! 则此步骤配置成功，否则认真检查端口是否正确以及shadowsocks是否运行。</p><p><img src="3%E3%80%81%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E8%83%BD%E5%A4%9F%E8%BF%9E%E6%8E%A5%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="检查是否能够连接上服务器"></p><div class="note primary flat"><p>接下来的两步配置至关重要，配置错误可能导致全局代理失败或者循环代理。</p></div><h1 id="代理规则设置"><a href="#代理规则设置" class="headerlink" title="代理规则设置"></a>代理规则设置</h1><ul><li>  点击Proxification Rule</li><li>  选中localhost,点击Edit</li><li>  Target hosts处添加shadowshocks代理服务器的IP地址（以123.123.123.123示例）</li><li>  Action选择Direct(直连)</li><li>  OK</li></ul><p><img src="4%E3%80%81%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE.png" alt="代理规则配置"></p><div class="note info flat"><p>注：此配置步骤允许发送到代理服务器的数据包通过，防止循环代理错误</p></div><p>配置后如图<br><img src="5%E3%80%81%E9%85%8D%E7%BD%AElocalhost%E9%98%B2%E6%AD%A2%E5%BE%AA%E7%8E%AF%E4%BB%A3%E7%90%86.png" alt="配置localhost防止循环代理"></p><h1 id="域名解析设置"><a href="#域名解析设置" class="headerlink" title="域名解析设置"></a>域名解析设置</h1><ul><li>  点击Name Resolution</li><li>  选择第二个Resolve hostnames through proxy（通过代理服务器解析域名）</li><li>  OK</li></ul><p><img src="6%E3%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%AE%BE%E7%BD%AE.png" alt="域名解析设置"></p><p>至此，全局代理已经配置完毕，用CMD命令nslookup <a href="www.google.com">www.google.com</a>测试是否成功获取其IP地址，也可以直接访问<a href="www.ip138.com">www.ip138.com</a>查看当前外网IP地址。</p><div class="note warning flat"><p>注意：如果未配置localhost，那么也可以单独配置科学上网使用的应用程序，我这里使用的是trojan，如下：<br><img src="7%E3%80%81%E6%B7%BB%E5%8A%A0trojan%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99.png" alt="添加trojan过滤规则">    </p></div>]]></content>
      
      
      <categories>
          
          <category> 我的服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Proxifier </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
